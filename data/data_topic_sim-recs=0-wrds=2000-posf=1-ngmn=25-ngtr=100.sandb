1,1,1,"182 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 6, NO. 2, APRIL 2002 A Fast and Elitist Multiobjective Genetic Algorithm: NSGA-II Kalyanmoy Deb, Associate Member, IEEE, Amrit Pratap, Sameer Agarwal, and T. Meyarivan Abstract—Multiobjective evolutionary algorithms (EAs) that use nondominated sorting and sharing have been criticized mainly for their: 1) ( 3) computational complexity (where is the number of objectives and is the population size); 2) nonelitism approach; and 3) the need for specifying a sharing parameter. In this paper, we suggest a nondominated sorting-based multiobjective EA (MOEA), called nondominated sorting genetic algorithm II (NSGA-II), which alleviates all the above three difficulties. Specifically, a fast nondominated sorting approach with ( 2) computational complexity is presented. Also, a selection operator is presented that creates a mating pool by combining the parent and offspring populations and selecting the best (with respect to fitness and spread) solutions. Simulation results on difficult test problems show that the proposed NSGA-II, in most problems, is able to find much better spread of solutions and better convergence near the true Pareto-optimal front compared to Pareto-archived evolution strategy and strength-Pareto EA—two other elitist MOEAs that pay special attention to creating a diverse Pareto-optimal front. Moreover, we modify the definition of dominance in order to solve constrained multiobjective problems efficiently. Simulation results of the constrained NSGA-II on a number of test problems, including a five-objective seven-constraint nonlinear problem, are compared with another constrained multiobjective optimizer and much better performance of NSGA-II is observed. Index Terms—Constraint handling, elitism, genetic algorithms, multicriterion decision making, multiobjective optimization, Pareto-optimal solutions. I. INTRODUCTION THE PRESENCE of multiple objectives in a problem, in principle, gives rise to a set of optimal solutions (largely known as Pareto-optimal solutions), instead of a single optimal solution. In the absence of any further information, one of these Pareto-optimal solutions cannot be said to be better than the other. This demands a user to find as many Pareto-optimal solutions as possible. Classical optimization methods (including the multicriterion decision-making methods) suggest converting the multiobjective optimization problem to a single-objective optimization problem by emphasizing one particular Pareto-optimal solution at a time. When such a method is to be used for finding multiple solutions, it has to be applied many times, hopefully finding a different solution at each simulation run. Over the past decade, a number of multiobjective evolutionary algorithms (MOEAs) have been suggested [1], [7], [13], Manuscript received August 18, 2000; revised February 5, 2001 and September 7, 2001. The work of K. Deb was supported by the Ministry of Human Resources and Development, India, under the Research and Development Scheme. The authors are with the Kanpur Genetic Algorithms Laboratory, Indian Institute of Technology, Kanpur PIN 208 016, India (e-mail: deb@iitk.ac.in). Publisher Item Identifier S 1089-778X(02)04101-2. [20], [26]. The primary reason for this is their ability to find multiple Pareto-optimal solutions in one single simulation run. Since evolutionary algorithms (EAs) work with a population of solutions, a simple EA can be extended to maintain a diverse set of solutions. With an emphasis for moving toward the true Pareto-optimal region, an EA can be used to find multiple Pareto-optimal solutions in one single simulation run. The nondominated sorting genetic algorithm (NSGA) proposed in [20] was one of the first such EAs. Over the years, the main criticisms of the NSGA approach have been as follows. 1) High computational complexity of nondominated sorting: The currently-used nondominated sorting algorithm has a computational complexity of (where is the number of objectives and is the population size). This makes NSGA computationally expensive for large population sizes. This large complexity arises because of the complexity involved in the nondominated sorting procedure in every generation. 2) Lack of elitism: Recent results [25], [18] show that elitism can speed up the performance of the GA significantly, which also can help preventing the loss of good solutions once they are found. 3) Need for specifying the sharing parameter : Traditional mechanisms of ensuring diversity in a population so as to get a wide variety of equivalent solutions have relied mostly on the concept of sharing. The main problem with sharing is that it requires the specification of a sharing parameter ( ). Though there has been some work on dynamic sizing of the sharing parameter [10], a parameter- less diversity-preservation mechanism is desirable. In this paper, we address all of these issues and propose an improved version of NSGA, which we call NSGA-II. From the simulation results on a number of difficult test problems, we find that NSGA-II outperforms two other contemporary MOEAs: Pareto-archived evolution strategy (PAES) [14] and strength- Pareto EA (SPEA) [24] in terms of finding a diverse set of solutions and in converging near the true Pareto-optimal set. Constrained multiobjective optimization is important from the point of viewof practical problem solving, but notmuchattention has been paid so far in this respect among the EA researchers. In this paper, we suggest a simple constraint-handling strategy with NSGA-II that suits well for any EA. On four problems chosen from the literature, NSGA-II has been compared with another recently suggested constraint-handling strategy. These results encourage the application of NSGA-II to more complex and real-world multiobjective optimization problems. In the remainder of the paper, we briefly mention a number of existing elitist MOEAs in Section II. Thereafter, in Section III, 1089-778X/02$17.00 © 2002  13:25:36 UTC from IEEE Xplore. Restrictions apply. DEB et al.: A FAST AND ELITIST MULTIOBJECTIVE GA: NSGA-II 183 we describe the proposed NSGA-II algorithm in details. Section IV presents simulation results of NSGA-II and compares them with two other elitist MOEAs (PAES and SPEA). In Section V, we highlight the issue of parameter interactions, a matter that is important in evolutionary computation research. The next section extends NSGA-II for handling constraints and compares the results with another recently proposed constraint-handling method. Finally, we outline the conclusions of this paper. II. ELITIST MULTIOBJECTIVE EVOLUTIONARY ALGORITHMS During 1993–1995, a number of different EAs were suggested to solve multiobjective optimization problems. Of them, Fonseca and Fleming’s MOGA [7], Srinivas and Deb’s NSGA [20], and Horn et al.’s NPGA [13] enjoyed more attention. These algorithms demonstrated the necessary additional operators for converting a simple EA to a MOEA. Two common features on all three operators were the following: i) assigning fitness to population members based on nondominated sorting and ii) preserving diversity among solutions of the same nondominated front. Although they have been shown to find multiple nondominated solutions on many test problems and a number of engineering design problems, researchers realized the need of introducing more useful operators (which have been found useful in single-objective EA’s) so as to solve multiobjective optimization problems better. Particularly, the interest has been to introduce elitism to enhance the convergence properties of a MOEA. Reference [25] showed that elitism helps in achieving better convergence in MOEAs. Among the existing elitist MOEAs, Zitzler and Thiele’s SPEA [26], Knowles and Corne’s Pareto-archived PAES [14], and Rudolph’s elitist GA [18] are well studied. We describe these approaches in brief. For details, readers are encouraged to refer to the original studies. Zitzler and Thiele [26] suggested an elitist multicriterion EA with the concept of nondomination in their SPEA. They suggested maintaining an external population at every generation storing all nondominated solutions discovered so far beginning from the initial population. This external population participates in all genetic operations. At each generation, a combined population with the external and the current population is first constructed. All nondominated solutions in the combined population are assigned a fitness based on the number of solutions they dominate and dominated solutions are assigned fitness worse than the worst fitness of any nondominated solution. This assignment of fitness makes sure that the search is directed toward the nondominated solutions. A deterministic clustering technique is used to ensure diversity among nondominated solutions. Although the implementation suggested in [26] is , with proper bookkeeping the complexity of SPEA can be reduced to . Knowles and Corne [14] suggested a simple MOEA using a single-parent single-offspring EA similar to (1 1)-evolution strategy. Instead of using real parameters, binary strings were used and bitwise mutations were employed to create offsprings. In their PAES, with one parent and one offspring, the offspring is compared with respect to the parent. If the offspring dominates the parent, the offspring is accepted as the next parent and the iteration continues. On the other hand, if the parent dominates the offspring, the offspring is discarded and a new mutated solution (a new offspring) is found. However, if the offspring and the parent do not dominate each other, the choice between the offspring and the parent is made by comparing them with an archive of best solutions found so far. The offspring is compared with the archive to check if it dominates any member of the archive. If it does, the offspring is accepted as the new parent and all the dominated solutions are eliminated from the archive. If the offspring does not dominate any member of the archive, both parent and offspring are checked for their nearness with the solutions of the archive. If the offspring resides in a least crowded region in the objective space among the members of the archive, it is accepted as a parent and a copy of added to the archive. Crowding is maintained by dividing the entire search space deterministically in subspaces, where is the depth parameter and is the number of decision variables, and by updating the subspaces dynamically. Investigators have calculated the worst case complexity of PAES for evaluations as , where is the archive length. Since the archive size is usually chosen proportional to the population size , the overall complexity of the algorithm is . Rudolph [18] suggested, but did not simulate, a simple elitist MOEA based on a systematic comparison of individuals from parent and offspring populations. The nondominated solutions of the offspring population are compared with that of parent solutions to form an overall nondominated set of solutions, which becomes the parent population of the next iteration. If the size of this set is not greater than the desired population size, other individuals from the offspring population are included. With this strategy, he proved the convergence of this algorithm to the Pareto-optimal front. Although this is an important achievement in its own right, the algorithm lacks motivation for the second task of maintaining diversity of Pareto-optimal solutions. An explicit diversity-preserving mechanism must be added to make it more practical. Since the determinism of the first nondominated front is , the overall complexity of Rudolph’s algorithm is also . In the following, we present the proposed nondominated sorting GA approach, which uses a fast nondominated sorting procedure, an elitist-preserving approach, and a parameterless niching operator. III. ELITIST NONDOMINATED SORTING GENETIC ALGORITHM A. Fast Nondominated Sorting Approach For the sake of clarity, we first describe a naive and slow procedure of sorting a population into different nondomination levels. Thereafter, we describe a fast approach. In a naive approach, in order to identify solutions of the first nondominated front in a population of size , each solution can be compared with every other solution in the population to find if it is dominated. This requires comparisons for each solution, where is the number of objectives. When this process is continued to find all members of the first nondominated level in the population, the total complexity is . At this stage, all individuals in the first nondominated front are found. In order to find the individuals in the next nondominated Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. 184 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 6, NO. 2, APRIL 2002 front, the solutions of the first front are discounted temporarily and the above procedure is repeated. In the worst case, the task of finding the second front also requires computations, particularly when number of solutions belong to the second and higher nondominated levels. This argument is true for finding third and higher levels of nondomination. Thus, the worst case is when there are fronts and there exists only one solution in each front. This requires an overall computations. Note that storage is required for this procedure. In the following paragraph and equation shown at the bottom of the page, we describe a fast nondominated sorting approach which will require computations. First, for each solution we calculate two entities: 1) domination count , the number of solutions which dominate the solution , and 2) , a set of solutions that the solution dominates. This requires comparisons. All solutions in the first nondominated front will have their domination count as zero. Now, for each solution with , we visit each member ( ) of its set and reduce its domination count by one. In doing so, if for any member the domination count becomes zero, we put it in a separate list . These members belong to the second nondominated front. Now, the above procedure is continued with each member of and the third front is identified. This process continues until all fronts are identified. For each solution in the second or higher level of nondomination, the domination count can be at most . Thus, each solution will be visited at most times before its domination count becomes zero. At this point, the solution is assigned a nondomination level and will never be visited again. Since there are at most such solutions, the total complexity is . Thus, the overall complexity of the procedure is . Another way to calculate this complexity is to realize that the body of the first inner loop (for each ) is executed exactly times as each individual can be the member of at most one front and the second inner loop (for each ) can be executed at maximum times for each individual [each individual dominates individuals at maximum and each domination check requires at most comparisons] results in the overall computations. It is important to note that although the time complexity has reduced to , the storage requirement has increased to . B. Diversity Preservation We mentioned earlier that, along with convergence to the Pareto-optimal set, it is also desired that an EA maintains a good spread of solutions in the obtained set of solutions. The original NSGA used the well-known sharing function approach, which has been found to maintain sustainable diversity in a population with appropriate setting of its associated parameters. The sharing function method involves a sharing parameter , which sets the extent of sharing desired in a problem. This parameter is related to the distance metric chosen to calculate the proximity measure between two population members. The parameter denotes the largest value of that distance metric within which any two solutions share each other’s fitness. This parameter is usually set by the user, although there exist some guidelines [4]. There are two difficulties with this sharing function approach. 1) The performance of the sharing function method in maintaining a spread of solutions depends largely on the chosen value. - - - for each for each if then If dominates Add to the set of solutions dominated by else if then Increment the domination counter of if then belongs to the first front Initialize the front counter while Used to store the members of the next front for each for each if then belongs to the next front Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. DEB et al.: A FAST AND ELITIST MULTIOBJECTIVE GA: NSGA-II 185 Fig. 1. Crowding-distance calculation. Points marked in filled circles are solutions of the same nondominated front. 2) Since each solution must be compared with all other solutions in the population, the overall complexity of the sharing function approach is . In the proposed NSGA-II, we replace the sharing function approach with a crowded-comparison approach that eliminates both the above difficulties to some extent. The new approach does not require any user-defined parameter for maintaining diversity among population members. Also, the suggested approach has a better computational complexity. To describe this approach, we first define a density-estimation metric and then present the crowded-comparison operator. 1) Density Estimation: To get an estimate of the density of solutions surrounding a particular solution in the population, we calculate the average distance of two points on either side of this point along each of the objectives. This quantity serves as an estimate of the perimeter of the cuboid formed by using the nearest neighbors as the vertices (call this the crowding distance). In Fig. 1, the crowding distance of the th solution in its front (marked with solid circles) is the average side length of the cuboid (shown with a dashed box). The crowding-distance computation requires sorting the population according to each objective function value in ascending order of magnitude. Thereafter, for each objective function, the boundary solutions (solutions with smallest and largest function values) are assigned an infinite distance value. All other intermediate solutions are assigned a distance value equal to the absolute normalized difference in the function values of two adjacent solutions. This calculation is continued with other objective functions. The overall crowding-distance value is calculated as the sum of individual distance values corresponding to each objective. Each objective function is normalized before calculating the crowding distance. The algorithm as shown at the bottom of the page outlines the crowding-distance computation procedure of all solutions in an nondominated set . Here, refers to the th objective function value of the th individual in the set and the parameters and are the maximum and minimum values of the th objective function. The complexity of this procedure is governed by the sorting algorithm. Since independent sortings of at most solutions (when all population members are in one front ) are involved, the above algorithm has computational complexity. After all population members in the set are assigned a distance metric, we can compare two solutions for their extent of proximity with other solutions. A solution with a smaller value of this distance measure is, in some sense, more crowded by other solutions. This is exactly what we compare in the proposed crowded-comparison operator, described below. Although Fig. 1 illustrates the crowding-distance computation for two objectives, the procedure is applicable to more than two objectives as well. 2) Crowded-Comparison Operator: The crowded-comparison operator ( ) guides the selection process at the various stages of the algorithm toward a uniformly spread-out Paretooptimal front. Assume that every individual in the population has two attributes: 1) nondomination rank ( ); 2) crowding distance ( ). We now define a partial order as if or and That is, between two solutions with differing nondomination ranks, we prefer the solution with the lower (better) rank. Otherwise, if both solutions belong to the same front, then we prefer the solution that is located in a lesser crowded region. With these three new innovations—a fast nondominated sorting procedure, a fast crowded distance estimation procedure, and a simple crowded comparison operator, we are now ready to describe the NSGA-II algorithm. C. Main Loop Initially, a random parent population is created. The population is sorted based on the nondomination. Each solution is assigned a fitness (or rank) equal to its nondomination level (1 is the best level, 2 is the next-best level, and so on). Thus, minimization of fitness is assumed. At first, the usual binary tournament selection, recombination, and mutation operators are used to create a offspring population of size . Since elitism - - number of solutions in for each set initialize distance for each objective sort sort using each objective value so that boundary points are always selected for to for all other points Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. 186 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 6, NO. 2, APRIL 2002 is introduced by comparing current population with previously found best nondominated solutions, the procedure is different after the initial generation. We first describe the th generation of the proposed algorithm as shown at the bottom of the page. The step-by-step procedure shows that NSGA-II algorithm is simple and straightforward. First, a combined population is formed. The population is of size . Then, the population is sorted according to nondomination. Since all previous and current population members are included in , elitism is ensured. Now, solutions belonging to the best nondominated set are of best solutions in the combined population and must be emphasized more than any other solution in the combined population. If the size of is smaller then , we definitely choose all members of the set for the new population . The remaining members of the population are chosen from subsequent nondominated fronts in the order of their ranking. Thus, solutions from the set are chosen next, followed by solutions from the set , and so on. This procedure is continued until no more sets can be accommodated. Say that the set is the last nondominated set beyond which no other set can be accommodated. In general, the count of solutions in all sets from to would be larger than the population size. To choose exactly population members, we sort the solutions of the last front using the crowded-comparison operator in descending order and choose the best solutions needed to fill all population slots. The NSGA-II procedure is also shown in Fig. 2. The new population of size is now used for selection, crossover, and mutation to create a newpopulation of size . It is important to note that we use a binary tournament selection operator but the selection criterion is now based on the crowded-comparison operator . Since this operator requires both the rank and crowded distance of each solution in the population, we calculate these quantities while forming the population , as shown in the above algorithm. Consider the complexity of one iteration of the entire algorithm. The basic operations and their worst-case complexities are as follows: 1) nondominated sorting is ; 2) crowding-distance assignment is ; 3) sorting on is . The overall complexity of the algorithm is , which is governed by the nondominated sorting part of the algorithm. If Fig. 2. NSGA-II procedure. performed carefully, the complete population of size need not be sorted according to nondomination. As soon as the sorting procedure has found enough number of fronts to have members in , there is no reason to continue with the sorting procedure. The diversity among nondominated solutions is introduced by using the crowding comparison procedure, which is used in the tournament selection and during the population reduction phase. Since solutions compete with their crowding-distance (a measure of density of solutions in the neighborhood), no extra niching parameter (such as needed in the NSGA) is required. Although the crowding distance is calculated in the objective function space, it can also be implemented in the parameter space, if so desired [3]. However, in all simulations performed in this study, we have used the objective-function space niching. IV. SIMULATION RESULTS In this section, we first describe the test problems used to compare the performance of NSGA-II with PAES and SPEA. For PAES and SPEA, we have identical parameter settings as suggested in the original studies. For NSGA-II, we have chosen a reasonable set of values and have not made any effort in finding the best parameter setting. We leave this task for a future study. combine parent and offspring population - - - all nondominated fronts of and until until the parent population is filled - - calculate crowding-distance in include th nondominated front in the parent pop check the next front for inclusion Sort sort in descending order using choose the first elements of - - use selection, crossover and mutation to create a new population increment the generation counter Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. DEB et al.: A FAST AND ELITIST MULTIOBJECTIVE GA: NSGA-II 187 TABLE I TEST PROBLEMS USED IN THIS STUDY All objective functions are to be minimized. A. Test Problems We first describe the test problems used to compare different MOEAs. Test problems are chosen from a number of significant past studies in this area. Veldhuizen [22] cited a number of test problems that have been used in the past. Of them, we choose four problems: Schaffer’s study (SCH) [19], Fonseca and Fleming’s study (FON) [10], Poloni’s study (POL) [16], and Kursawe’s study (KUR) [15]. In 1999, the first author suggested a systematic way of developing test problems for multiobjective optimization [3]. Zitzler et al. [25] followed those guidelines and suggested six test problems. We choose five of those six problems here and call them ZDT1, ZDT2, ZDT3, ZDT4, and ZDT6. All problems have two objective functions. None of these problems have any constraint. We describe these problems in Table I. The table also shows the number of variables, their bounds, the Pareto-optimal solutions, and the nature of the Pareto-optimal front for each problem. All approaches are run for a maximum of 25 000 function evaluations. We use the single-point crossover and bitwise mutation for binary-coded GAs and the simulated binary crossover (SBX) operator and polynomial mutation [6] for real-coded GAs. The crossover probability of and a mutation probability of or (where is the number of decision variables for real-coded GAs and is the string length for binary-coded GAs) are used. For real-coded NSGA-II, we use distribution indexes [6] for crossover and mutation operators as and , respectively. The population obtained at the end of 250 generations (the population after elite-preserving operator is applied) is used to calculate a couple of performance metrics, which we discuss in the next section. For PAES, we use a depth value equal to four and an archive size of 100. We use all population members of the archive obtained at the end of 25 000 iterations to calculate the performance metrics. For SPEA, we use a population of size 80 and an external population of size 20 (this 4 : 1 ratio is suggested by the developers of SPEA to maintain an adequate selection pressure for the elite solutions), so that overall population size becomes 100. SPEA is also run until 25 000 function evaluations are done. For SPEA, we use the Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. 188 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 6, NO. 2, APRIL 2002 Fig. 3. Distance metric . nondominated solutions of the combined GA and external populations at the final generation to calculate the performance metrics used in this study. For PAES, SPEA, and binary-coded NSGA-II, we have used 30 bits to code each decision variable. B. Performance Measures Unlike in single-objective optimization, there are two goals in a multiobjective optimization: 1) convergence to the Pareto-optimal set and 2) maintenance of diversity in solutions of the Pareto-optimal set. These two tasks cannot be measured adequately with one performance metric. Many performance metrics have been suggested [1], [8], [24]. Here, we define two performance metrics that are more direct in evaluating each of the above two goals in a solution set obtained by a multiobjective optimization algorithm. The first metric measures the extent of convergence to a known set of Pareto-optimal solutions. Since multiobjective algorithms would be tested on problems having a known set of Pareto-optimal solutions, the calculation of this metric is possible. We realize, however, that such a metric cannot be used for any arbitrary problem. First, we find a set of uniformly spaced solutions from the true Pareto-optimal front in the objective space. For each solution obtained with an algorithm, we compute the minimum Euclidean distance of it from chosen solutions on the Pareto-optimal front. The average of these distances is used as the first metric (the convergence metric). Fig. 3 shows the calculation procedure of this metric. The shaded region is the feasible search region and the solid curved lines specify the Pareto-optimal solutions. Solutions with open circles are chosen solutions on the Pareto-optimal front for the calculation of the convergence metric and solutions marked with dark circles are solutions obtained by an algorithm. The smaller the value of this metric, the better the convergence toward the Pareto-optimal front. When all obtained solutions lie exactly on chosen solutions, this metric takes a value of zero. In all simulations performed here, we present the average and variance of this metric calculated for solution sets obtained in multiple runs. Even when all solutions converge to the Pareto-optimal front, the above convergence metric does not have a value of zero. The metric will yield zero only when each obtained solution lies exactly on each of the chosen solutions. Although this metric alone Fig. 4. Diversity metric . can provide some information about the spread in obtained solutions, we define an different metric to measure the spread in solutions obtained by an algorithm directly. The second metric measures the extent of spread achieved among the obtained solutions. Here, we are interested in getting a set of solutions that spans the entire Pareto-optimal region. We calculate the Euclidean distance between consecutive solutions in the obtained nondominated set of solutions. We calculate the average of these distances. Thereafter, from the obtained set of nondominated solutions, we first calculate the extreme solutions (in the objective space) by fitting a curve parallel to that of the true Pareto-optimal front. Then, we use the following metric to calculate the nonuniformity in the distribution: (1) Here, the parameters and are the Euclidean distances between the extreme solutions and the boundary solutions of the obtained nondominated set, as depicted in Fig. 4. The figure illustrates all distances mentioned in the above equation. The parameter is the average of all distances , , assuming that there are solutions on the best nondominated front. With solutions, there are consecutive distances. The denominator is the value of the numerator for the case when all solutions lie on one solution. It is interesting to note that this is not the worst case spread of solutions possible. We can have a scenario in which there is a large variance in . In such scenarios, the metric may be greater than one. Thus, the maximum value of the above metric can be greater than one. However, a good distribution would make all distances equal to and would make (with existence of extreme solutions in the nondominated set). Thus, for the most widely and uniformly spreadout set of nondominated solutions, the numerator of would be zero, making the metric to take a value zero. For any other distribution, the value of the metric would be greater than zero. For two distributions having identical values of and , the metric takes a higher value with worse distributions of solutions within the extreme solutions. Note that the above diversity metric can be used on any nondominated set of solutions, including one that is not the Pareto-optimal set. Using Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. DEB et al.: A FAST AND ELITIST MULTIOBJECTIVE GA: NSGA-II 189 TABLE II MEAN (FIRST ROWS) AND VARIANCE (SECOND ROWS) OF THE CONVERGENCE METRIC  TABLE III MEAN (FIRST ROWS) AND VARIANCE (SECOND ROWS) OF THE DIVERSITY METRIC  a triangularization technique or a Voronoi diagram approach [1] to calculate , the above procedure can be extended to estimate the spread of solutions in higher dimensions. C. Discussion of the Results Table II shows the mean and variance of the convergence metric obtained using four algorithms NSGA-II (real-coded), NSGA-II (binary-coded), SPEA, and PAES. NSGA-II (real coded or binary coded) is able to converge better in all problems except in ZDT3 and ZDT6, where PAES found better convergence. In all cases with NSGA-II, the variance in ten runs is also small, except in ZDT4 with NSGA-II (binary coded). The fixed archive strategy of PAES allows better convergence to be achieved in two out of nine problems. Table III shows the mean and variance of the diversity metric obtained using all three algorithms. NSGA-II (real or binary coded) performs the best in all nine test problems. The worst performance is observed with PAES. For illustration, we show one of the ten runs of PAES with an arbitrary run of NSGA-II (real-coded) on problem SCH in Fig. 5. On most problems, real-coded NSGA-II is able to find a better spread of solutions than any other algorithm, including binary-coded NSGA-II. In order to demonstrate the working of these algorithms, we also show typical simulation results of PAES, SPEA, and NSGA-II on the test problems KUR, ZDT2, ZDT4, and ZDT6. The problem KUR has three discontinuous regions in the Pareto-optimal front. Fig. 6 shows all nondominated solutions obtained after 250 generations with NSGA-II (real-coded). The Pareto-optimal region is also shown in the figure. This figure demonstrates the abilities of NSGA-II in converging to the true front and in finding diverse solutions in the front. Fig. 7 shows the obtained nondominated solutions with SPEA, which is the next-best algorithm for this problem (refer to Tables II and III). Fig. 5. NSGA-II finds better spread of solutions than PAES on SCH. Fig. 6. Nondominated solutions with NSGA-II (real-coded) on KUR. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. 190 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 6, NO. 2, APRIL 2002 Fig. 7. Nondominated solutions with SPEA on KUR. Fig. 8. Nondominated solutions with NSGA-II (binary-coded) on ZDT2. In both aspects of convergence and distribution of solutions, NSGA-II performed better than SPEA in this problem. Since SPEA could not maintain enough nondominated solutions in the final GA population, the overall number of nondominated solutions is much less compared to that obtained in the final population of NSGA-II. Next, we show the nondominated solutions on the problem ZDT2 in Figs. 8 and 9. This problem has a nonconvex Pareto-optimal front.We show the performance of binary-coded NSGA-II and SPEA on this function. Although the convergence is not a difficulty here with both of these algorithms, both real- and binary-coded NSGA-II have found a better spread and more solutions in the entire Pareto-optimal region than SPEA (the next-best algorithm observed for this problem). The problem ZDT4 has 21 or 7.94(10 ) different local Pareto-optimal fronts in the search space, of which only one corresponds to the global Pareto-optimal front. The Euclidean distance in the decision space between solutions of two consecutive local Pareto-optimal sets is 0.25. Fig. 10 shows that both real-coded NSGA-II and PAES get stuck at different local Pareto-optimal sets, but the convergence and ability to find a diverse set of solutions are definitely better with NSGA-II. Binary-coded GAs have difficulties in converging Fig. 9. Nondominated solutions with SPEA on ZDT2. Fig. 10. NSGA-II finds better convergence and spread of solutions than PAES on ZDT4. near the global Pareto-optimal front, a matter that is also been observed in previous single-objective studies [5]. On a similar ten-variable Rastrigin’s function [the function here], that study clearly showed that a population of size of about at least 500 is needed for single-objective binary-coded GAs (with tournament selection, single-point crossover and bitwise mutation) to find the global optimum solution in more than 50% of the simulation runs. Since we have used a population of size 100, it is not expected that a multiobjective GA would find the global Pareto-optimal solution, but NSGA-II is able to find a good spread of solutions even at a local Pareto-optimal front. Since SPEA converges poorly on this problem (see Table II), we do not show SPEA results on this figure. Finally, Fig. 11 shows that SPEA finds a better converged set of nondominated solutions in ZDT6 compared to any other algorithm. However, the distribution in solutions is better with real-coded NSGA-II. D. Different Parameter Settings In this study, we do not make any serious attempt to find the best parameter setting for NSGA-II. But in this section, we per- Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. DEB et al.: A FAST AND ELITIST MULTIOBJECTIVE GA: NSGA-II 191 Fig. 11. Real-coded NSGA-II finds better spread of solutions than SPEA on ZDT6, but SPEA has a better convergence. TABLE IV MEAN AND VARIANCE OF THE CONVERGENCE AND DIVERSITY METRICS UP TO 500 GENERATIONS form additional experiments to show the effect of a couple of different parameter settings on the performance of NSGA-II. First, we keep all other parameters as before, but increase the number of maximum generations to 500 (instead of 250 used before). Table IV shows the convergence and diversity metrics for problems POL, KUR, ZDT3, ZDT4, and ZDT6. Now, we achieve a convergence very close to the true Pareto-optimal front and with a much better distribution. The table shows that in all these difficult problems, the real-coded NSGA-II has converged very close to the true optimal front, except in ZDT6, which probably requires a different parameter setting with NSGA-II. Particularly, the results on ZDT3 and ZDT4 improve with generation number. The problem ZDT4 has a number of local Pareto-optimal fronts, each corresponding to particular value of . A large change in the decision vector is needed to get out of a local optimum. Unless mutation or crossover operators are capable of creating solutions in the basin of another better attractor, the improvement in the convergence toward the true Pareto-optimal front is not possible.We use NSGA-II (real-coded) with a smaller distribution index for mutation, which has an effect of creating solutions with more spread than before. Rest of the parameter settings are identical as before. The convergence metric and diversity measure on problem ZDT4 at the end of 250 generations are as follows: Fig. 12. Obtained nondominated solutions with NSGA-II on problem ZDT4. These results are much better than PAES and SPEA, as shown in Table II. To demonstrate the convergence and spread of solutions, we plot the nondominated solutions of one of the runs after 250 generations in Fig. 12. The figure shows that NSGA-II is able to find solutions on the true Pareto-optimal front with . V. ROTATED PROBLEMS It has been discussed in an earlier study [3] that interactions among decision variables can introduce another level of difficulty to any multiobjective optimization algorithm including EAs. In this section, we create one such problem and investigate the working of previously three MOEAs on the following epistatic problem: minimize minimize where and for (2) An EA works with the decision variable vector , but the above objective functions are defined in terms of the variable vector , which is calculated by transforming the decision variable vector by a fixed rotation matrix . This way, the objective functions are functions of a linear combination of decision variables. In order to maintain a spread of solutions over the Pareto-optimal region or even converge to any particular solution requires an EA to update all decision variables in a particular fashion.With a generic search operator, such as the variablewise SBX operator used here, this becomes a difficult task for an EA. However, here, we are interested in evaluating the overall behavior of three elitist MOEAs. We use a population size of 100 and run each algorithm until 500 generations. For SBX, we use and we use for mutation. To restrict the Pareto-optimal solutions to lie Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. 192 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 6, NO. 2, APRIL 2002 Fig. 13. Obtained nondominated solutions with NSGA-II, PAES, and SPEA on the rotated problem. within the prescribed variable bounds, we discourage solutions with by adding a fixed large penalty to both objectives. Fig. 13 shows the obtained solutions at the end of 500 generations using NSGA-II, PAES, and SPEA. It is observed that NSGA-II solutions are closer to the true front compared to solutions obtained by PAES and SPEA. The correlated parameter updates needed to progress toward the Pareto-optimal front makes this kind of problems difficult to solve. NSGA-II’s elite-preserving operator along with the real-coded crossover and mutation operators is able to find some solutions close to the Pareto-optimal front [with resulting ]. This example problem demonstrates that one of the known difficulties (the linkage problem [11], [12]) of single-objective optimization algorithm can also cause difficulties in a multiobjective problem. However, more systematic studies are needed to amply address the linkage issue in multiobjective optimization. VI. CONSTRAINT HANDLING In the past, the first author and his students implemented a penalty-parameterless constraint-handling approach for singleobjective optimization. Those studies [2], [6] have shown how a tournament selection based algorithm can be used to handle constraints in a population approach much better than a number of other existing constraint-handling approaches. A similar approach can be introduced with the above NSGA-II for solving constrained multiobjective optimization problems. A. Proposed Constraint-Handling Approach (Constrained NSGA-II) This constraint-handling method uses the binary tournament selection, where two solutions are picked from the population and the better solution is chosen. In the presence of constraints, each solution can be either feasible or infeasible. Thus, there may be at most three situations: 1) both solutions are feasible; 2) one is feasible and other is not; and 3) both are infeasible. For single objective optimization, we used a simple rule for each case. Case 1) Choose the solution with better objective function value. Case 2) Choose the feasible solution. Case 3) Choose the solution with smaller overall constraint violation. Since in no case constraints and objective function values are compared with each other, there is no need of having any penalty parameter, a matter that makes the proposed constraint-handling approach useful and attractive. In the context of multiobjective optimization, the latter two cases can be used as they are and the first case can be resolved by using the crowded-comparison operator as before. To maintain the modularity in the procedures of NSGA-II, we simply modify the definition of domination between two solutions and . Definition 1: A solution is said to constrained-dominate a solution , if any of the following conditions is true. 1) Solution is feasible and solution is not. 2) Solutions and are both infeasible, but solution has a smaller overall constraint violation. 3) Solutions and are feasible and solution dominates solution . The effect of using this constrained-domination principle is that any feasible solution has a better nondomination rank than any infeasible solution. All feasible solutions are ranked according to their nondomination level based on the objective function values. However, among two infeasible solutions, the solution with a smaller constraint violation has a better rank. Moreover, this modification in the nondomination principle does not change the computational complexity of NSGA-II. The rest of the NSGA-II procedure as described earlier can be used as usual. The above constrained-domination definition is similar to that suggested by Fonseca and Fleming [9]. The only difference is in the way domination is defined for the infeasible solutions. In the above definition, an infeasible solution having a larger overall constraint-violation are classified as members of a larger nondomination level. On the other hand, in [9], infeasible solutions violating different constraints are classified as members of the same nondominated front. Thus, one infeasible solution violating a constraint marginally will be placed in the same nondominated level with another solution violating a different constraint to a large extent. This may cause an algorithm to wander in the infeasible search region for more generations before reaching the feasible region through constraint boundaries. Moreover, since Fonseca–Fleming’s approach requires domination checks with the constraint-violation values, the proposed approach of this paper is computationally less expensive and is simpler. B. Ray–Tai–Seow’s Constraint-Handling Approach Ray et al. [17] suggested a more elaborate constraint-handling technique, where constraint violations of all constraints are not simply summed together. Instead, a nondomination check of constraint violations is also made. We give an outline of this procedure here. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. DEB et al.: A FAST AND ELITIST MULTIOBJECTIVE GA: NSGA-II 193 TABLE V CONSTRAINED TEST PROBLEMS USED IN THIS STUDY All objective functions are to be minimized. Three different nondominated rankings of the population are first performed. The first ranking is performed using objective function values and the resulting ranking is stored in a -dimensional vector . The second ranking is performed using only the constraint violation values of all ( of them) constraints and no objective function information is used. Thus, constraint violation of each constraint is used a criterion and a nondomination classification of the population is performed with the constraint violation values. Notice that for a feasible solution all constraint violations are zero. Thus, all feasible solutions have a rank 1 in . The third ranking is performed on a combination of objective functions and constraint-violation values [a total of values]. This produces the ranking . Although objective function values and constraint violations are used together, one nice aspect of this algorithm is that there is no need for any penalty parameter. In the domination check, criteria are compared individually, thereby eliminating the need of any penalty parameter. Once these rankings are over, all feasible solutions having the best rank in are chosen for the new population. If more population slots are available, they are created from the remaining solutions systematically. By giving importance to the ranking in in the selection operator and by giving importance to the ranking in in the crossover operator, the investigators laid out a systematic multiobjective GA, which also includes a niche-preserving operator. For details, readers may refer to [17]. Although the investigators did not compare their algorithm with any other method, they showed the working of this constraint-handling method on a number of engineering design problems. However, since nondominated sorting of three different sets of criteria are required and the algorithm introduces many different operators, it remains to be investigated how it performs on more complex problems, particularly from the point of view of computational burden associated with the method. In the following section, we choose a set of four problems and compare the simple constrained NSGA-II with the Ray–Tai–Seow’s method. C. Simulation Results We choose four constrained test problems (see Table V) that have been used in earlier studies. In the first problem, a part of the unconstrained Pareto-optimal region is not feasible. Thus, the resulting constrained Pareto-optimal region is a concatenation of the first constraint boundary and some part of the unconstrained Pareto-optimal region. The second problem SRN was used in the original study of NSGA [20]. Here, the constrained Pareto-optimal set is a subset of the unconstrained Pareto-optimal set. The third problem TNK was suggested by Tanaka et al. [21] and has a discontinuous Pareto-optimal region, falling entirely on the first constraint boundary. In the next section, we show the constrained Pareto-optimal region for each of the above problems. The fourth problem WATER is a five-objective and seven-constraint problem, attempted to solve in [17]. With five objectives, it is difficult to discuss the effect of the constraints on the unconstrained Pareto-optimal region. In the next section, we show all or ten pairwise plots of obtained nondominated solutions. We apply real-coded NSGA-II here. In all problems, we use a population size of 100, distribution indexes for real-coded crossover and mutation operators of 20 and 100, respectively, and run NSGA-II (real coded) with the proposed constraint-handling technique and with Ray–Tai–Seow’s constraint-handling algorithm [17] for a maximum of 500 generations. We choose this rather large number of generations to investigate if the spread in solutions Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. 194 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 6, NO. 2, APRIL 2002 Fig. 14. Obtained nondominated solutions with NSGA-II on the constrained problem CONSTR. Fig. 15. Obtained nondominated solutions with Ray-Tai-Seow’s algorithm on the constrained problem CONSTR. can be maintained for a large number of generations. However, in each case, we obtain a reasonably good spread of solutions as early as 200 generations. Crossover and mutation probabilities are the same as before. Fig. 14 shows the obtained set of 100 nondominated solutions after 500 generations using NSGA-II. The figure shows that NSGA-II is able to uniformly maintain solutions in both Pareto-optimal region. It is important to note that in order to maintain a spread of solutions on the constraint boundary, the solutions must have to be modified in a particular manner dictated by the constraint function. This becomes a difficult task of any search operator. Fig. 15 shows the obtained solutions using Ray-Tai-Seow’s algorithm after 500 generations. It is clear that NSGA-II performs better than Ray–Tai–Seow’s algorithm in terms of converging to the true Pareto-optimal front and also in terms of maintaining a diverse population of nondominated solutions. Next, we consider the test problem SRN. Fig. 16 shows the nondominated solutions after 500 generations using NSGA-II. Fig. 16. Obtained nondominated solutions with NSGA-II on the constrained problem SRN. Fig. 17. Obtained nondominated solutions with Ray–Tai–Seow’s algorithm on the constrained problem SRN. The figure shows how NSGA-II can bring a random population on the Pareto-optimal front. Ray–Tai–Seow’s algorithm is also able to come close to the front on this test problem (Fig. 17). Figs. 18 and 19 show the feasible objective space and the obtained nondominated solutions with NSGA-II and Ray–Tai–Seow’s algorithm. Here, the Pareto-optimal region is discontinuous and NSGA-II does not have any difficulty in finding a wide spread of solutions over the true Pareto-optimal region. Although Ray–Tai–Seow’s algorithm found a number of solutions on the Pareto-optimal front, there exist many infeasible solutions even after 500 generations. In order to demonstrate the working of Fonseca–Fleming’s constraint-handling strategy, we implement it with NSGA-II and apply on TNK. Fig. 20 shows 100 population members at the end of 500 generations and with identical parameter setting as used in Fig. 18. Both these figures demonstrate that the proposed and Fonseca–Fleming’s constraint-handling strategies work well with NSGA-II. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. DEB et al.: A FAST AND ELITIST MULTIOBJECTIVE GA: NSGA-II 195 Fig. 18. Obtained nondominated solutions with NSGA-II on the constrained problem TNK. Fig. 19. Obtained nondominated solutions with Ray–Tai–Seow’s algorithm on the constrained problem TNK. Ray et al. [17] have used the problem WATER in their study. They normalized the objective functions in the following manner: Since there are five objective functions in the problemWATER, we observe the range of the normalized objective function values of the obtained nondominated solutions. Table VI shows the comparison with Ray–Tai–Seow’s algorithm. In most objective functions, NSGA-II has found a better spread of solutions than Ray–Tai–Seow’s approach. In order to show the pairwise interactions among these five normalized objective functions, we plot all or ten interactions in Fig. 21 for both algorithms. NSGA-II results are shown in the upper diagonal portion of the figure and the Ray–Tai–Seow’s results are shown in the lower diagonal portion. The axes of any plot can be obtained by looking at the corresponding diagonal boxes and their ranges. For example, the plot at the first row and third column has its vertical axis as and horizontal axis as . Since this plot belongs in the upper side of the diagonal, this Fig. 20. Obtained nondominated solutions with Fonseca–Fleming’s constraint-handling strategy with NSGA-II on the constrained problem TNK. plot is obtained using NSGA-II. In order to compare this plot with a similar plot using Ray–Tai–Seow’s approach, we look for the plot in the third row and first column. For this figure, the vertical axis is plotted as and the horizontal axis is plotted as . To get a better comparison between these two plots, we observe Ray–Tai–Seow’s plot as it is, but turn the page 90 in the clockwise direction for NSGA-II results. This would make the labeling and ranges of the axes same in both cases. We observe that NSGA-II plots have better formed patterns than in Ray–Tai–Seow’s plots. For example, figures - , - , and - interactions are very clear from NSGA-II results. Although similar patterns exist in the results obtained using Ray–Tai–Seow’s algorithm, the convergence to the true fronts is not adequate. VII. CONCLUSION We have proposed a computationally fast and elitist MOEA based on a nondominated sorting approach. On nine different difficult test problems borrowed from the literature, the proposed NSGA-II was able to maintain a better spread of solutions and converge better in the obtained nondominated front compared to two other elitist MOEAs—PAES and SPEA. However, one problem, PAES, was able to converge closer to the true Pareto-optimal front. PAES maintains diversity among solutions by controlling crowding of solutions in a deterministic and prespecified number of equal-sized cells in the search space. In that problem, it is suspected that such a deterministic crowding coupled with the effect of mutation-based approach has been beneficial in converging near the true front compared to the dynamic and parameterless crowding approach used in NSGA-II and SPEA. However, the diversity preserving mechanism used in NSGA-II is found to be the best among the three approaches studied here. On a problem having strong parameter interactions, NSGA-II has been able to come closer to the true front than the other two approaches, but the important matter is that all three approaches faced difficulties in solving this so-called highly epistatic problem. Although this has been a matter of ongoing Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. 196 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 6, NO. 2, APRIL 2002 TABLE VI LOWER AND UPPER BOUNDS OF THE OBJECTIVE FUNCTION VALUES OBSERVED IN THE OBTAINED NONDOMINATED SOLUTIONS Fig. 21. Upper diagonal plots are for NSGA-II and lower diagonal plots are for Ray–Tai–Seow’s algorithm. Compare (i; j) plot (Ray–Tai–Seow’s algorithm with i > j) with (j; i) plot (NSGA-II). Label and ranges used for each axis are shown in the diagonal boxes. research in single-objective EA studies, this paper shows that highly epistatic problems may also cause difficulties to MOEAs. More importantly, researchers in the field should consider such epistatic problems for testing a newly developed algorithm for multiobjective optimization. We have also proposed a simple extension to the definition of dominance for constrained multiobjective optimization. Although this new definition can be used with any other MOEAs, the real-coded NSGA-II with this definition has been shown to solve four different problems much better than another recently- proposed constraint-handling approach. With the properties of a fast nondominated sorting procedure, an elitist strategy, a parameterless approach and a simple yet efficient constraint-handling method, NSGA-II, should find increasing attention and applications in the near future. REFERENCES [1] K. Deb, Multiobjective Optimization Using Evolutionary Algorithms. Chichester, U.K.: Wiley, 2001. [2] , “An efficient constraint-handling method for genetic algorithms,” Comput. Methods Appl. Mech. Eng., vol. 186, no. 2–4, pp. 311–338, 2000. [3] , “Multiobjective genetic algorithms: Problem difficulties and construction of test functions,” in Evol. Comput., 1999, vol. 7, pp. 205–230. [4] K. Deb and D. E. Goldberg, “An investigation of niche and species formation in genetic function optimization,” in Proceedings of the Third International Conference on Genetic Algorithms, J. D. Schaffer, Ed. San Mateo, CA: Morgan Kauffman, 1989, pp. 42–50. [5] K. Deb and S. Agrawal, “Understanding interactions among genetic algorithm parameters,” in Foundations of Genetic Algorithms V, W. Banzhaf and C. Reeves, Eds. San Mateo, CA: Morgan Kauffman, 1998, pp. 265–286. [6] K. Deb and R. B. Agrawal, “Simulated binary crossover for continuous search space,” in Complex Syst., Apr. 1995, vol. 9, pp. 115–148. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply. DEB et al.: A FAST AND ELITIST MULTIOBJECTIVE GA: NSGA-II 197 [7] C. M. Fonseca and P. J. Fleming, “Genetic algorithms for multiobjective optimization: Formulation, discussion and generalization,” in Proceedings of the Fifth International Conference on Genetic Algorithms, S. Forrest, Ed. San Mateo, CA: Morgan Kauffman, 1993, pp. 416–423. [8] , “On the performance assessment and comparison of stochastic multiobjective optimizers,” in Parallel Problem Solving from Nature IV, H.-M. Voigt, W. Ebeling, I. Rechenberg, and H.-P. Schwefel, Eds. Berlin, Germany: Springer-Verlag, 1996, pp. 584–593. [9] , “Multiobjective optimization and multiple constraint handling with evolutionary algorithms—Part I: A unified formulation,” IEEE Trans. Syst., Man, Cybern. A, vol. 28, pp. 26–37, Jan. 1998. [10] , “Multiobjective optimization and multiple constraint handling with evolutionary algorithms—Part II: Application example,” IEEE Trans. Syst., Man, Cybern. A, vol. 28, pp. 38–47, Jan. 1998. [11] D. E. Goldberg, B. Korb, and K. Deb, “Messy genetic algorithms: Motivation, analysis, and first results,” in Complex Syst., Sept. 1989, vol. 3, pp. 93–530. [12] G. Harik, “Learning gene linkage to efficiently solve problems of bounded difficulty using genetic algorithms,” llinois Genetic Algorithms Lab., Univ. Illinois at Urbana-Champaign, Urbana, IL, IlliGAL Rep. 97005, 1997. [13] J. Horn, N. Nafploitis, and D. E. Goldberg, “A niched Pareto genetic algorithm for multiobjective optimization,” in Proceedings of the First IEEE Conference on Evolutionary Computation, Z. Michalewicz, Ed. Piscataway, NJ: IEEE Press, 1994, pp. 82–87. [14] J. Knowles and D. Corne, “The Pareto archived evolution strategy: A new baseline algorithm for multiobjective optimization,” in Proceedings of the 1999 Congress on Evolutionary Computation. Piscataway, NJ: IEEE Press, 1999, pp. 98–105. [15] F. Kursawe, “A variant of evolution strategies for vector optimization,” in Parallel Problem Solving from Nature, H.-P. Schwefel and R. Männer, Eds. Berlin, Germany: Springer-Verlag, 1990, pp. 193–197. [16] C. Poloni, “Hybrid GA for multiobjective aerodynamic shape optimization,” in Genetic Algorithms in Engineering and Computer Science, G. Winter, J. Periaux, M. Galan, and P. Cuesta, Eds. New York: Wiley, 1997, pp. 397–414. [17] T. Ray, K. Tai, and C. Seow, “An evolutionary algorithm for multiobjective optimization,” Eng. Optim., vol. 33, no. 3, pp. 399–424, 2001. [18] G. Rudolph, “Evolutionary search under partially ordered sets,” Dept. Comput. Sci./LS11, Univ. Dortmund, Dortmund, Germany, Tech. Rep. CI-67/99, 1999. [19] J. D. Schaffer, “Multiple objective optimization with vector evaluated genetic algorithms,” in Proceedings of the First International Conference on Genetic Algorithms, J. J. Grefensttete, Ed. Hillsdale, NJ: Lawrence Erlbaum, 1987, pp. 93–100. [20] N. Srinivas and K. Deb, “Multiobjective function optimization using nondominated sorting genetic algorithms,” Evol. Comput., vol. 2, no. 3, pp. 221–248, Fall 1995. [21] M. Tanaka, “GA-based decision support system for multicriteria optimization,” in Proc. IEEE Int. Conf. Systems, Man and Cybernetics-2, 1995, pp. 1556–1561. [22] D.Van Veldhuizen, “Multiobjective evolutionary algorithms: Classifications, analyzes, and new innovations,” Air Force Inst. Technol., Dayton, OH, Tech. Rep. AFIT/DS/ENG/99-01, 1999. [23] D. Van Veldhuizen and G. Lamont, “Multiobjective evolutionary algorithm research: A history and analysis,” Air Force Inst. Technol., Dayton, OH, Tech. Rep. TR-98-03, 1998. [24] E. Zitzler, “Evolutionary algorithms for multiobjective optimization: Methods and applications,” Doctoral dissertation ETH 13398, Swiss Federal Institute of Technology (ETH), Zurich, Switzerland, 1999. [25] E. Zitzler, K. Deb, and L. Thiele, “Comparison of multiobjective evolutionary algorithms: Empirical results,” Evol. Comput., vol. 8, no. 2, pp. 173–195, Summer 2000. [26] E. Zitzler and L. Thiele, “Multiobjective optimization using evolutionary algorithms—A comparative case study,” in Parallel Problem Solving From Nature, V, A. E. Eiben, T. Bäck, M. Schoenauer, and H.-P. Schwefel, Eds. Berlin, Germany: Springer-Verlag, 1998, pp. 292–301. Kalyanmoy Deb (A’02) received the B.Tech degree in mechanical engineering from the Indian Institute of Technology, Kharagpur, India, 1985 and the M.S. and Ph.D. degrees in engineering mechanics from the University of Alabama, Tuscaloosa, in 1989 and 1991, respectively. He is currently a Professor of Mechanical Engineering with the Indian Institute of Technology, Kanpur, India. He has authored or coauthored over 100 research papers in journals and conferences, a number of book chapters, and two books: Multiobjective Optimization Using Evolutionary Algorithms (Chichester, U.K.: Wiley, 2001) and Optimization for Engineering Design (New Delhi, India: Prentice-Hall, 1995). His current research interests are in the field of evolutionary computation, particularly in the areas of multicriterion and real-parameter evolutionary algorithms. Dr. Deb is an Associate Editor of IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION and an Executive Council Member of the International Society on Genetic and Evolutionary Computation. Amrit Pratap was born in Hyderabad, India, on August 27, 1979. He received the M.S. degree in mathematics and scientific computing from the Indian Institute of Technology, Kanpur, India, in 2001. He is working toward the Ph.D. degree in computer science at the California Institute of Technology, Pasadena, CA. He was a member of the Kanpur Genetic Algorithms Laboratory. He is currently a Member of the Caltech Learning Systems Group. His current research interests include evolutionary computation, machine learning, and neural networks. Sameer Agarwal was born in Bulandshahar, India, on February 19, 1977. He received the M.S. degree in mathematics and scientific computing from the Indian Institute of Technology, Kanpur, India, in 2000. He is working toward the Ph.D. degree in computer science at University of California, San Diego. He was a Member of the Kanpur Genetic Algorithms Laboratory. His research interests include evolutionary computation and learning both in humans as well as machines. He is currently developing learning methods for learning by imitation. T. Meyarivan was born in Haldia, India, on November 23, 1977. He is working toward the M.S. degree in chemistry from Indian Institute of Technology, Kanpur, India. He is a Member of the Kanpur Genetic Algorithms Laboratory. His current research interests include evolutionary computation and its applications to biology and various fields in chemistry. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:25:36 UTC from IEEE Xplore. Restrictions apply.","['ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fast', 'elitist', 'multiobjective', 'genetic', 'algorithm', 'nsga', 'deb', 'associate', 'member', 'ieee', 'abstract', 'multiobjective', 'evolutionary', 'algorithms', 'eas', 'nondominated', 'sorting', 'sharing', 'computational', 'complexity', 'number', 'objectives', 'population', 'size', 'approach', 'need', 'sharing', 'parameter', 'suggest', 'nondominated', 'sorting', 'multiobjective', 'moea', 'called', 'nondominated', 'sorting', 'genetic', 'algorithm', 'nsga', 'difficulties', 'fast', 'nondominated', 'sorting', 'approach', 'computational', 'complexity', 'presented', 'selection', 'operator', 'presented', 'creates', 'pool', 'combining', 'parent', 'offspring', 'populations', 'best', 'respect', 'fitness', 'spread', 'solutions', 'simulation', 'results', 'difficult', 'test', 'problems', 'show', 'nsga', 'problems', 'able', 'find', 'much', 'spread', 'solutions', 'convergence', 'true', 'pareto', 'optimal', 'front', 'compared', 'pareto', 'archived', 'evolution', 'strategy', 'strength', 'pareto', 'elitist', 'moeas', 'special', 'attention', 'creating', 'diverse', 'pareto', 'optimal', 'front', 'moreover', 'modify', 'definition', 'dominance', 'order', 'solve', 'constrained', 'multiobjective', 'problems', 'simulation', 'results', 'constrained', 'nsga', 'number', 'test', 'problems', 'including', 'objective', 'constraint', 'nonlinear', 'problem', 'compared', 'constrained', 'multiobjective', 'optimizer', 'much', 'performance', 'nsga', 'observed', 'index', 'terms', 'constraint', 'handling', 'elitism', 'genetic', 'algorithms', 'multicriterion', 'decision', 'making', 'multiobjective', 'optimization', 'pareto', 'optimal', 'solutions', 'introduction', 'presence', 'multiple', 'objectives', 'problem', 'principle', 'gives', 'set', 'optimal', 'solutions', 'known', 'pareto', 'optimal', 'solutions', 'single', 'optimal', 'solution', 'absence', 'information', 'pareto', 'optimal', 'solutions', 'cannot', 'said', 'user', 'find', 'many', 'pareto', 'optimal', 'solutions', 'possible', 'classical', 'optimization', 'methods', 'including', 'multicriterion', 'decision', 'making', 'methods', 'suggest', 'multiobjective', 'optimization', 'problem', 'single', 'objective', 'optimization', 'problem', 'particular', 'pareto', 'optimal', 'solution', 'method', 'used', 'finding', 'multiple', 'solutions', 'applied', 'many', 'times', 'finding', 'different', 'solution', 'simulation', 'run', 'past', 'decade', 'number', 'multiobjective', 'evolutionary', 'algorithms', 'moeas', 'suggested', 'manuscript', 'received', 'august', 'revised', 'february', 'september', 'deb', 'supported', 'human', 'resources', 'development', 'india', 'research', 'development', 'scheme', 'authors', 'kanpur', 'genetic', 'algorithms', 'laboratory', 'indian', 'institute', 'technology', 'kanpur', 'india', 'mail', 'deb', 'identifier', 'primary', 'reason', 'ability', 'find', 'multiple', 'pareto', 'optimal', 'solutions', 'single', 'simulation', 'run', 'evolutionary', 'algorithms', 'eas', 'population', 'solutions', 'simple', 'extended', 'maintain', 'diverse', 'set', 'solutions', 'moving', 'true', 'pareto', 'optimal', 'region', 'used', 'find', 'multiple', 'pareto', 'optimal', 'solutions', 'single', 'simulation', 'run', 'nondominated', 'sorting', 'genetic', 'algorithm', 'nsga', 'eas', 'years', 'main', 'nsga', 'approach', 'follows', 'high', 'computational', 'complexity', 'nondominated', 'sorting', 'used', 'nondominated', 'sorting', 'algorithm', 'computational', 'complexity', 'number', 'objectives', 'population', 'size', 'makes', 'nsga', 'expensive', 'large', 'population', 'sizes', 'large', 'complexity', 'arises', 'complexity', 'involved', 'nondominated', 'sorting', 'procedure', 'generation', 'lack', 'elitism', 'recent', 'results', 'show', 'elitism', 'speed', 'performance', 'help', 'loss', 'solutions', 'found', 'need', 'sharing', 'parameter', 'traditional', 'mechanisms', 'diversity', 'population', 'wide', 'variety', 'equivalent', 'solutions', 'relied', 'concept', 'sharing', 'main', 'problem', 'sharing', 'requires', 'specification', 'sharing', 'parameter', 'dynamic', 'sharing', 'parameter', 'parameter', 'diversity', 'preservation', 'mechanism', 'desirable', 'address', 'issues', 'propose', 'improved', 'version', 'nsga', 'call', 'nsga', 'simulation', 'results', 'number', 'difficult', 'test', 'problems', 'find', 'nsga', 'outperforms', 'moeas', 'pareto', 'archived', 'evolution', 'strategy', 'paes', 'strength', 'pareto', 'spea', 'terms', 'finding', 'diverse', 'set', 'solutions', 'converging', 'true', 'pareto', 'optimal', 'set', 'constrained', 'multiobjective', 'optimization', 'important', 'point', 'practical', 'problem', 'solving', 'respect', 'researchers', 'suggest', 'simple', 'constraint', 'handling', 'strategy', 'nsga', 'problems', 'chosen', 'literature', 'nsga', 'compared', 'suggested', 'constraint', 'handling', 'strategy', 'results', 'application', 'nsga', 'complex', 'real', 'world', 'multiobjective', 'optimization', 'problems', 'remainder', 'briefly', 'mention', 'number', 'existing', 'elitist', 'moeas', 'section', 'section', 'iii', 'utc', 'ieee', 'xplore_restrictions', 'apply', 'deb', 'fast', 'elitist', 'multiobjective', 'nsga', 'describe', 'nsga', 'algorithm', 'details', 'section', 'presents', 'simulation', 'results', 'nsga', 'compares', 'elitist', 'moeas', 'paes', 'spea', 'section', 'issue', 'parameter', 'interactions', 'matter', 'important', 'evolutionary', 'computation', 'research', 'next', 'section', 'extends', 'nsga', 'handling', 'constraints', 'compares', 'results', 'constraint', 'handling', 'method', 'conclusions', 'elitist', 'multiobjective', 'evolutionary', 'algorithms', 'number', 'different', 'eas', 'suggested', 'solve', 'multiobjective', 'optimization', 'problems', 'fonseca', 'fleming', 'srinivas', 'deb', 'nsga', 'horn', 'attention', 'algorithms', 'demonstrated', 'necessary', 'additional', 'operators', 'simple', 'moea', 'common', 'features', 'operators', 'following', 'fitness', 'population', 'members', 'nondominated', 'sorting', 'preserving', 'diversity', 'solutions', 'nondominated', 'front', 'shown', 'find', 'multiple', 'nondominated', 'solutions', 'many', 'test', 'problems', 'number', 'engineering', 'design', 'problems', 'researchers', 'need', 'introducing', 'useful', 'operators', 'found', 'useful', 'single', 'objective', 'solve', 'multiobjective', 'optimization', 'problems', 'interest', 'introduce', 'elitism', 'enhance', 'convergence', 'properties', 'moea', 'reference', 'showed', 'elitism', 'helps', 'convergence', 'moeas', 'existing', 'elitist', 'moeas', 'zitzler', 'thiele', 'spea', 'knowles', 'corne', 'pareto', 'archived', 'paes', 'rudolph', 'elitist', 'studied', 'describe', 'approaches', 'brief', 'details', 'readers', 'refer', 'original', 'studies', 'zitzler', 'thiele', 'suggested', 'elitist', 'multicriterion', 'concept', 'nondomination', 'spea', 'suggested', 'maintaining', 'external', 'population', 'generation', 'nondominated', 'solutions', 'discovered', 'beginning', 'initial', 'population', 'external', 'population', 'genetic', 'operations', 'generation', 'combined', 'population', 'external', 'current', 'population', 'nondominated', 'solutions', 'combined', 'population', 'assigned', 'fitness', 'number', 'solutions', 'dominate', 'dominated', 'solutions', 'assigned', 'fitness', 'worse', 'worst', 'fitness', 'nondominated', 'solution', 'assignment', 'fitness', 'makes', 'search', 'directed', 'nondominated', 'solutions', 'deterministic', 'clustering', 'technique', 'used', 'ensure', 'diversity', 'nondominated', 'solutions', 'implementation', 'suggested', 'proper', 'complexity', 'spea', 'reduced', 'knowles', 'corne', 'suggested', 'simple', 'moea', 'single', 'parent', 'single', 'offspring', 'similar', 'evolution', 'strategy', 'real', 'parameters', 'binary', 'strings', 'used', 'mutations', 'employed', 'create', 'paes', 'parent', 'offspring', 'offspring', 'compared', 'respect', 'parent', 'offspring', 'dominates', 'parent', 'offspring', 'accepted', 'next', 'parent', 'iteration', 'hand', 'parent', 'dominates', 'offspring', 'offspring', 'discarded', 'mutated', 'solution', 'offspring', 'found', 'offspring', 'parent', 'dominate', 'choice', 'offspring', 'parent', 'made', 'comparing', 'archive', 'best', 'solutions', 'found', 'offspring', 'compared', 'archive', 'check', 'dominates', 'member', 'archive', 'offspring', 'accepted', 'parent', 'dominated', 'solutions', 'eliminated', 'archive', 'offspring', 'dominate', 'member', 'archive', 'parent', 'offspring', 'solutions', 'archive', 'offspring', 'least', 'crowded', 'region', 'objective', 'space', 'members', 'archive', 'accepted', 'parent', 'added', 'archive', 'crowding', 'entire', 'search', 'space', 'parameter', 'number', 'decision', 'variables', 'updating', 'calculated', 'worst', 'case', 'complexity', 'paes', 'evaluations', 'archive', 'length', 'archive', 'size', 'chosen', 'proportional', 'population', 'size', 'overall', 'complexity', 'algorithm', 'rudolph', 'suggested', 'simulate', 'simple', 'elitist', 'moea', 'systematic', 'comparison', 'individuals', 'parent', 'offspring', 'populations', 'nondominated', 'solutions', 'offspring', 'population', 'compared', 'parent', 'solutions', 'form', 'overall', 'nondominated', 'set', 'solutions', 'becomes', 'parent', 'population', 'next', 'iteration', 'size', 'set', 'greater', 'desired', 'population', 'size', 'individuals', 'offspring', 'population', 'included', 'strategy', 'convergence', 'algorithm', 'pareto', 'optimal', 'front', 'important', 'right', 'algorithm', 'motivation', 'second', 'task', 'maintaining', 'diversity', 'pareto', 'optimal', 'solutions', 'diversity', 'preserving', 'mechanism', 'added', 'practical', 'nondominated', 'front', 'overall', 'complexity', 'rudolph', 'algorithm', 'following', 'present', 'nondominated', 'sorting', 'approach', 'uses', 'fast', 'nondominated', 'sorting', 'procedure', 'elitist', 'preserving', 'approach', 'parameterless', 'niching', 'operator', 'iii', 'elitist', 'nondominated', 'sorting', 'genetic', 'algorithm', 'fast', 'nondominated', 'sorting', 'approach', 'describe', 'slow', 'procedure', 'sorting', 'population', 'different', 'nondomination', 'levels', 'describe', 'fast', 'approach', 'approach', 'order', 'identify', 'solutions', 'nondominated', 'front', 'population', 'size', 'solution', 'compared', 'solution', 'population', 'find', 'dominated', 'requires', 'comparisons', 'solution', 'number', 'objectives', 'process', 'continued', 'find', 'members', 'nondominated', 'level', 'population', 'total', 'complexity', 'stage', 'individuals', 'nondominated', 'front', 'found', 'order', 'find', 'individuals', 'next', 'nondominated', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'front', 'solutions', 'front', 'procedure', 'repeated', 'worst', 'case', 'task', 'finding', 'second', 'front', 'requires', 'computations', 'number', 'solutions', 'belong', 'second', 'higher', 'nondominated', 'levels', 'true', 'finding', 'third', 'higher', 'levels', 'nondomination', 'worst', 'case', 'fronts', 'exists', 'solution', 'front', 'requires', 'overall', 'computations', 'note', 'required', 'procedure', 'following', 'equation', 'shown', 'bottom', 'page', 'describe', 'fast', 'nondominated', 'sorting', 'approach', 'require', 'computations', 'solution', 'calculate', 'domination', 'count', 'number', 'solutions', 'dominate', 'solution', 'set', 'solutions', 'solution', 'dominates', 'requires', 'comparisons', 'solutions', 'nondominated', 'front', 'domination', 'count', 'zero', 'solution', 'visit', 'member', 'set', 'reduce', 'domination', 'count', 'member', 'domination', 'count', 'becomes', 'zero', 'put', 'separate', 'list', 'members', 'belong', 'second', 'nondominated', 'front', 'procedure', 'continued', 'member', 'third', 'front', 'identified', 'process', 'fronts', 'identified', 'solution', 'second', 'higher', 'level', 'nondomination', 'domination', 'count', 'solution', 'visited', 'times', 'domination', 'count', 'becomes', 'zero', 'point', 'solution', 'assigned', 'nondomination', 'level', 'visited', 'solutions', 'total', 'complexity', 'overall', 'complexity', 'procedure', 'calculate', 'complexity', 'loop', 'executed', 'times', 'individual', 'member', 'front', 'second', 'loop', 'executed', 'maximum', 'times', 'individual', 'individual', 'dominates', 'individuals', 'maximum', 'domination', 'check', 'requires', 'comparisons', 'results', 'overall', 'computations', 'important', 'note', 'complexity', 'reduced', 'increased', 'diversity', 'preservation', 'mentioned', 'convergence', 'pareto', 'optimal', 'set', 'desired', 'maintains', 'spread', 'solutions', 'obtained', 'set', 'solutions', 'original', 'nsga', 'used', 'known', 'sharing', 'function', 'approach', 'found', 'maintain', 'diversity', 'population', 'appropriate', 'setting', 'associated', 'parameters', 'sharing', 'function', 'method', 'involves', 'sharing', 'parameter', 'sets', 'extent', 'sharing', 'desired', 'problem', 'parameter', 'related', 'distance', 'metric', 'chosen', 'calculate', 'measure', 'population', 'members', 'parameter', 'denotes', 'value', 'distance', 'metric', 'solutions', 'fitness', 'parameter', 'set', 'user', 'exist', 'guidelines', 'difficulties', 'sharing', 'function', 'approach', 'performance', 'sharing', 'function', 'method', 'maintaining', 'spread', 'solutions', 'depends', 'chosen', 'value', 'dominates', 'set', 'solutions', 'dominated', 'increment', 'domination', 'counter', 'belongs', 'front', 'initialize', 'front', 'counter', 'used', 'store', 'members', 'next', 'front', 'belongs', 'next', 'front', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'deb', 'fast', 'elitist', 'multiobjective', 'nsga', 'fig', 'crowding', 'distance', 'calculation', 'points', 'marked', 'circles', 'solutions', 'nondominated', 'front', 'solution', 'compared', 'solutions', 'population', 'overall', 'complexity', 'sharing', 'function', 'approach', 'nsga', 'replace', 'sharing', 'function', 'approach', 'crowded', 'comparison', 'approach', 'difficulties', 'extent', 'approach', 'require', 'user', 'defined', 'parameter', 'maintaining', 'diversity', 'population', 'members', 'suggested', 'approach', 'computational', 'complexity', 'describe', 'approach', 'define', 'density', 'estimation', 'metric', 'present', 'crowded', 'comparison', 'operator', 'density', 'estimation', 'estimate', 'density', 'solutions', 'surrounding', 'particular', 'solution', 'population', 'calculate', 'average', 'distance', 'points', 'side', 'point', 'objectives', 'quantity', 'serves', 'estimate', 'formed', 'nearest', 'neighbors', 'call', 'crowding', 'distance', 'fig', 'crowding', 'distance', 'solution', 'front', 'marked', 'circles', 'average', 'side', 'length', 'shown', 'box', 'crowding', 'distance', 'computation', 'requires', 'sorting', 'population', 'according', 'objective', 'function', 'value', 'order', 'magnitude', 'objective', 'function', 'boundary', 'solutions', 'solutions', 'smallest', 'function', 'values', 'assigned', 'infinite', 'distance', 'value', 'intermediate', 'solutions', 'assigned', 'distance', 'value', 'equal', 'absolute', 'normalized', 'difference', 'function', 'values', 'adjacent', 'solutions', 'calculation', 'continued', 'objective', 'functions', 'overall', 'crowding', 'distance', 'value', 'calculated', 'sum', 'individual', 'distance', 'values', 'corresponding', 'objective', 'objective', 'function', 'normalized', 'calculating', 'crowding', 'distance', 'algorithm', 'shown', 'bottom', 'page', 'crowding', 'distance', 'computation', 'procedure', 'solutions', 'nondominated', 'set', 'objective', 'function', 'value', 'individual', 'set', 'parameters', 'maximum', 'minimum', 'values', 'objective', 'function', 'complexity', 'procedure', 'sorting', 'algorithm', 'independent', 'solutions', 'population', 'members', 'front', 'involved', 'algorithm', 'computational', 'complexity', 'population', 'members', 'set', 'assigned', 'distance', 'metric', 'compare', 'solutions', 'extent', 'solutions', 'solution', 'smaller', 'value', 'distance', 'measure', 'sense', 'crowded', 'solutions', 'compare', 'crowded', 'comparison', 'operator', 'described', 'fig', 'illustrates', 'crowding', 'distance', 'computation', 'objectives', 'procedure', 'applicable', 'objectives', 'crowded', 'comparison', 'operator', 'crowded', 'comparison', 'operator', 'selection', 'process', 'various', 'stages', 'algorithm', 'spread', 'front', 'assume', 'individual', 'population', 'attributes', 'nondomination', 'rank', 'crowding', 'distance', 'define', 'partial', 'order', 'solutions', 'nondomination', 'prefer', 'solution', 'lower', 'rank', 'solutions', 'belong', 'front', 'prefer', 'solution', 'located', 'crowded', 'region', 'innovations', 'fast', 'nondominated', 'sorting', 'procedure', 'fast', 'crowded', 'distance', 'estimation', 'procedure', 'simple', 'crowded', 'comparison', 'operator', 'describe', 'nsga', 'algorithm', 'main', 'loop', 'random', 'parent', 'population', 'created', 'population', 'sorted', 'nondomination', 'solution', 'assigned', 'fitness', 'rank', 'equal', 'nondomination', 'level', 'best', 'level', 'next', 'best', 'level', 'minimization', 'fitness', 'assumed', 'usual', 'binary', 'tournament', 'selection', 'recombination', 'mutation', 'operators', 'used', 'create', 'offspring', 'population', 'size', 'elitism', 'number', 'solutions', 'set', 'initialize', 'distance', 'objective', 'sort', 'sort', 'objective', 'value', 'boundary', 'points', 'selected', 'points', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'introduced', 'comparing', 'current', 'population', 'found', 'best', 'nondominated', 'solutions', 'procedure', 'different', 'initial', 'generation', 'describe', 'generation', 'algorithm', 'shown', 'bottom', 'page', 'step', 'step', 'procedure', 'shows', 'nsga', 'algorithm', 'simple', 'straightforward', 'combined', 'population', 'formed', 'population', 'size', 'population', 'sorted', 'according', 'nondomination', 'previous', 'current', 'population', 'members', 'included', 'elitism', 'solutions', 'belonging', 'best', 'nondominated', 'set', 'best', 'solutions', 'combined', 'population', 'solution', 'combined', 'population', 'size', 'smaller', 'choose', 'members', 'set', 'population', 'remaining', 'members', 'population', 'chosen', 'subsequent', 'nondominated', 'fronts', 'order', 'ranking', 'solutions', 'set', 'chosen', 'next', 'followed', 'solutions', 'set', 'procedure', 'continued', 'sets', 'set', 'last', 'nondominated', 'set', 'set', 'general', 'count', 'solutions', 'sets', 'larger', 'population', 'size', 'choose', 'population', 'members', 'sort', 'solutions', 'last', 'front', 'crowded', 'comparison', 'operator', 'order', 'choose', 'best', 'solutions', 'needed', 'population', 'nsga', 'procedure', 'shown', 'fig', 'population', 'size', 'used', 'selection', 'crossover', 'mutation', 'create', 'size', 'important', 'note', 'binary', 'tournament', 'selection', 'operator', 'selection', 'criterion', 'crowded', 'comparison', 'operator', 'operator', 'requires', 'rank', 'crowded', 'distance', 'solution', 'population', 'calculate', 'quantities', 'population', 'shown', 'algorithm', 'consider', 'complexity', 'iteration', 'entire', 'algorithm', 'basic', 'operations', 'worst', 'case', 'follows', 'nondominated', 'sorting', 'crowding', 'distance', 'assignment', 'sorting', 'overall', 'complexity', 'algorithm', 'nondominated', 'sorting', 'part', 'algorithm', 'fig', 'nsga', 'procedure', 'performed', 'complete', 'population', 'size', 'need', 'sorted', 'according', 'nondomination', 'sorting', 'procedure', 'found', 'number', 'fronts', 'members', 'reason', 'continue', 'sorting', 'procedure', 'diversity', 'nondominated', 'solutions', 'introduced', 'crowding', 'comparison', 'procedure', 'used', 'tournament', 'selection', 'population', 'reduction', 'phase', 'solutions', 'compete', 'crowding', 'distance', 'measure', 'density', 'solutions', 'neighborhood', 'niching', 'parameter', 'needed', 'nsga', 'required', 'crowding', 'distance', 'calculated', 'objective', 'function', 'space', 'implemented', 'parameter', 'space', 'desired', 'simulations', 'performed', 'study', 'used', 'objective', 'function', 'space', 'niching', 'simulation', 'results', 'section', 'describe', 'test', 'problems', 'used', 'compare', 'performance', 'nsga', 'paes', 'spea', 'paes', 'spea', 'identical', 'parameter', 'settings', 'suggested', 'original', 'studies', 'nsga', 'chosen', 'reasonable', 'set', 'values', 'made', 'effort', 'finding', 'best', 'parameter', 'setting', 'task', 'future', 'study', 'combine', 'parent', 'offspring', 'population', 'nondominated', 'fronts', 'parent', 'population', 'calculate', 'crowding', 'distance', 'include', 'nondominated', 'front', 'parent', 'check', 'next', 'front', 'inclusion', 'sort', 'sort', 'order', 'choose', 'elements', 'selection', 'crossover', 'mutation', 'create', 'population', 'increment', 'generation', 'counter', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'deb', 'fast', 'elitist', 'multiobjective', 'nsga', 'table', 'test', 'problems', 'used', 'study', 'objective', 'functions', 'minimized', 'test', 'problems', 'describe', 'test', 'problems', 'used', 'compare', 'different', 'moeas', 'test', 'problems', 'chosen', 'number', 'significant', 'past', 'studies', 'area', 'veldhuizen', 'number', 'test', 'problems', 'used', 'past', 'choose', 'problems', 'schaffer', 'study', 'fonseca', 'fleming', 'study', 'study', 'study', 'kur', 'author', 'suggested', 'systematic', 'developing', 'test', 'problems', 'multiobjective', 'optimization', 'zitzler', 'followed', 'guidelines', 'suggested', 'test', 'problems', 'choose', 'problems', 'call', 'problems', 'objective', 'functions', 'none', 'problems', 'constraint', 'describe', 'problems', 'table', 'table', 'shows', 'number', 'variables', 'bounds', 'pareto', 'optimal', 'solutions', 'nature', 'pareto', 'optimal', 'front', 'problem', 'approaches', 'run', 'maximum', 'function', 'evaluations', 'single', 'point', 'crossover', 'mutation', 'binary', 'coded', 'gas', 'simulated', 'binary', 'crossover', 'sbx', 'operator', 'mutation', 'real', 'coded', 'gas', 'crossover', 'probability', 'mutation', 'probability', 'number', 'decision', 'variables', 'real', 'coded', 'gas', 'string', 'length', 'binary', 'coded', 'gas', 'used', 'real', 'coded', 'nsga', 'distribution', 'indexes', 'crossover', 'mutation', 'operators', 'population', 'obtained', 'end', 'generations', 'population', 'elite', 'preserving', 'operator', 'applied', 'used', 'calculate', 'couple', 'performance', 'metrics', 'discuss', 'next', 'section', 'paes', 'value', 'equal', 'archive', 'size', 'population', 'members', 'archive', 'obtained', 'end', 'iterations', 'calculate', 'performance', 'metrics', 'spea', 'population', 'size', 'external', 'population', 'size', 'ratio', 'suggested', 'spea', 'maintain', 'selection', 'pressure', 'elite', 'solutions', 'overall', 'population', 'size', 'becomes', 'spea', 'run', 'function', 'evaluations', 'done', 'spea', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fig', 'distance', 'metric', 'nondominated', 'solutions', 'combined', 'external', 'populations', 'final', 'generation', 'calculate', 'performance', 'metrics', 'used', 'study', 'paes', 'spea', 'binary', 'coded', 'nsga', 'used', 'bits', 'code', 'decision', 'variable', 'performance', 'measures', 'single', 'objective', 'optimization', 'multiobjective', 'optimization', 'convergence', 'pareto', 'optimal', 'set', 'maintenance', 'diversity', 'solutions', 'pareto', 'optimal', 'set', 'tasks', 'cannot', 'measured', 'performance', 'metric', 'many', 'performance', 'metrics', 'suggested', 'define', 'performance', 'metrics', 'direct', 'evaluating', 'solution', 'set', 'obtained', 'multiobjective', 'optimization', 'algorithm', 'metric', 'measures', 'extent', 'convergence', 'known', 'set', 'pareto', 'optimal', 'solutions', 'multiobjective', 'algorithms', 'tested', 'problems', 'known', 'set', 'pareto', 'optimal', 'solutions', 'calculation', 'metric', 'possible', 'metric', 'cannot', 'used', 'arbitrary', 'problem', 'find', 'set', 'solutions', 'true', 'pareto', 'optimal', 'front', 'objective', 'space', 'solution', 'obtained', 'algorithm', 'compute', 'minimum', 'euclidean', 'distance', 'chosen', 'solutions', 'pareto', 'optimal', 'front', 'average', 'distances', 'used', 'metric', 'convergence', 'metric', 'fig', 'shows', 'calculation', 'procedure', 'metric', 'region', 'feasible', 'search', 'region', 'lines', 'specify', 'pareto', 'optimal', 'solutions', 'solutions', 'open', 'circles', 'chosen', 'solutions', 'pareto', 'optimal', 'front', 'calculation', 'convergence', 'metric', 'solutions', 'marked', 'circles', 'solutions', 'obtained', 'algorithm', 'smaller', 'value', 'metric', 'convergence', 'pareto', 'optimal', 'front', 'obtained', 'solutions', 'lie', 'chosen', 'solutions', 'metric', 'takes', 'value', 'zero', 'simulations', 'performed', 'present', 'average', 'variance', 'metric', 'calculated', 'solution', 'sets', 'obtained', 'multiple', 'runs', 'solutions', 'converge', 'pareto', 'optimal', 'front', 'convergence', 'metric', 'value', 'zero', 'metric', 'yield', 'zero', 'obtained', 'solution', 'lies', 'chosen', 'solutions', 'metric', 'fig', 'diversity', 'metric', 'provide', 'information', 'spread', 'obtained', 'solutions', 'define', 'different', 'metric', 'measure', 'spread', 'solutions', 'obtained', 'algorithm', 'second', 'metric', 'measures', 'extent', 'spread', 'achieved', 'obtained', 'solutions', 'interested', 'set', 'solutions', 'entire', 'pareto', 'optimal', 'region', 'calculate', 'euclidean', 'distance', 'consecutive', 'solutions', 'obtained', 'nondominated', 'set', 'solutions', 'calculate', 'average', 'distances', 'obtained', 'set', 'nondominated', 'solutions', 'calculate', 'extreme', 'solutions', 'objective', 'space', 'parallel', 'true', 'pareto', 'optimal', 'front', 'following', 'metric', 'calculate', 'distribution', 'parameters', 'euclidean', 'distances', 'extreme', 'solutions', 'boundary', 'solutions', 'obtained', 'nondominated', 'set', 'fig', 'figure', 'illustrates', 'distances', 'mentioned', 'equation', 'parameter', 'average', 'distances', 'assuming', 'solutions', 'best', 'nondominated', 'front', 'solutions', 'consecutive', 'distances', 'value', 'case', 'solutions', 'lie', 'solution', 'interesting', 'note', 'worst', 'case', 'spread', 'solutions', 'possible', 'scenario', 'large', 'variance', 'scenarios', 'metric', 'greater', 'maximum', 'value', 'metric', 'greater', 'distribution', 'distances', 'equal', 'existence', 'extreme', 'solutions', 'nondominated', 'set', 'set', 'nondominated', 'solutions', 'zero', 'making', 'metric', 'value', 'zero', 'distribution', 'value', 'metric', 'greater', 'zero', 'distributions', 'identical', 'values', 'metric', 'takes', 'higher', 'value', 'worse', 'distributions', 'solutions', 'extreme', 'solutions', 'note', 'diversity', 'metric', 'used', 'nondominated', 'set', 'solutions', 'including', 'pareto', 'optimal', 'set', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'deb', 'fast', 'elitist', 'multiobjective', 'nsga', 'table', 'mean', 'rows', 'variance', 'second', 'rows', 'convergence', 'metric', 'table', 'iii', 'mean', 'rows', 'variance', 'second', 'rows', 'diversity', 'metric', 'technique', 'approach', 'calculate', 'procedure', 'extended', 'estimate', 'spread', 'solutions', 'higher', 'dimensions', 'discussion', 'results', 'table', 'shows', 'mean', 'variance', 'convergence', 'metric', 'obtained', 'algorithms', 'nsga', 'real', 'coded', 'nsga', 'binary', 'coded', 'spea', 'paes', 'nsga', 'real', 'coded', 'binary', 'coded', 'able', 'converge', 'problems', 'paes', 'found', 'convergence', 'cases', 'nsga', 'variance', 'ten', 'runs', 'small', 'nsga', 'binary', 'coded', 'fixed', 'archive', 'strategy', 'paes', 'allows', 'convergence', 'achieved', 'problems', 'table', 'iii', 'shows', 'mean', 'variance', 'diversity', 'metric', 'obtained', 'algorithms', 'nsga', 'real', 'binary', 'coded', 'performs', 'best', 'test', 'problems', 'worst', 'performance', 'observed', 'paes', 'show', 'ten', 'runs', 'paes', 'arbitrary', 'run', 'nsga', 'real', 'coded', 'problem', 'fig', 'problems', 'real', 'coded', 'nsga', 'able', 'find', 'spread', 'solutions', 'algorithm', 'including', 'binary', 'coded', 'nsga', 'order', 'demonstrate', 'working', 'algorithms', 'show', 'typical', 'simulation', 'results', 'paes', 'spea', 'nsga', 'test', 'problems', 'kur', 'problem', 'kur', 'discontinuous', 'regions', 'pareto', 'optimal', 'front', 'fig', 'shows', 'nondominated', 'solutions', 'obtained', 'generations', 'nsga', 'real', 'coded', 'pareto', 'optimal', 'region', 'shown', 'figure', 'figure', 'demonstrates', 'abilities', 'nsga', 'converging', 'true', 'front', 'finding', 'diverse', 'solutions', 'front', 'fig', 'shows', 'obtained', 'nondominated', 'solutions', 'spea', 'next', 'best', 'algorithm', 'problem', 'refer', 'tables', 'iii', 'fig', 'nsga', 'finds', 'spread', 'solutions', 'paes', 'fig', 'nondominated', 'solutions', 'nsga', 'real', 'coded', 'kur', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fig', 'nondominated', 'solutions', 'spea', 'kur', 'fig', 'nondominated', 'solutions', 'nsga', 'binary', 'coded', 'aspects', 'convergence', 'distribution', 'solutions', 'nsga', 'performed', 'spea', 'problem', 'spea', 'maintain', 'nondominated', 'solutions', 'final', 'population', 'overall', 'number', 'nondominated', 'solutions', 'much', 'compared', 'obtained', 'final', 'population', 'nsga', 'next', 'show', 'nondominated', 'solutions', 'problem', 'figs', 'problem', 'pareto', 'optimal', 'front', 'show', 'performance', 'binary', 'coded', 'nsga', 'spea', 'function', 'convergence', 'difficulty', 'algorithms', 'real', 'binary', 'coded', 'nsga', 'found', 'spread', 'solutions', 'entire', 'pareto', 'optimal', 'region', 'spea', 'next', 'best', 'algorithm', 'observed', 'problem', 'problem', 'different', 'local', 'pareto', 'optimal', 'fronts', 'search', 'space', 'global', 'pareto', 'optimal', 'front', 'euclidean', 'distance', 'decision', 'space', 'solutions', 'consecutive', 'local', 'pareto', 'optimal', 'sets', 'fig', 'shows', 'real', 'coded', 'nsga', 'paes', 'stuck', 'different', 'local', 'pareto', 'optimal', 'sets', 'convergence', 'ability', 'find', 'diverse', 'set', 'solutions', 'nsga', 'binary', 'coded', 'gas', 'difficulties', 'converging', 'fig', 'nondominated', 'solutions', 'spea', 'fig', 'nsga', 'finds', 'convergence', 'spread', 'solutions', 'paes', 'global', 'pareto', 'optimal', 'front', 'matter', 'observed', 'previous', 'single', 'objective', 'studies', 'similar', 'ten', 'variable', 'rastrigin', 'function', 'function', 'study', 'showed', 'population', 'size', 'least', 'needed', 'single', 'objective', 'binary', 'coded', 'gas', 'tournament', 'selection', 'single', 'point', 'crossover', 'mutation', 'find', 'global', 'optimum', 'solution', 'simulation', 'runs', 'used', 'population', 'size', 'expected', 'multiobjective', 'find', 'global', 'pareto', 'optimal', 'solution', 'nsga', 'able', 'find', 'spread', 'solutions', 'local', 'pareto', 'optimal', 'front', 'spea', 'converges', 'problem', 'table', 'show', 'spea', 'results', 'figure', 'fig', 'shows', 'spea', 'finds', 'converged', 'set', 'nondominated', 'solutions', 'compared', 'algorithm', 'distribution', 'solutions', 'real', 'coded', 'nsga', 'different', 'parameter', 'settings', 'study', 'attempt', 'find', 'best', 'parameter', 'setting', 'nsga', 'section', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'deb', 'fast', 'elitist', 'multiobjective', 'nsga', 'fig', 'real', 'coded', 'nsga', 'finds', 'spread', 'solutions', 'spea', 'spea', 'convergence', 'table', 'mean', 'variance', 'convergence', 'diversity', 'metrics', 'generations', 'form', 'additional', 'experiments', 'show', 'effect', 'couple', 'different', 'parameter', 'settings', 'performance', 'nsga', 'keep', 'parameters', 'increase', 'number', 'maximum', 'generations', 'used', 'table', 'shows', 'convergence', 'diversity', 'metrics', 'problems', 'kur', 'achieve', 'convergence', 'true', 'pareto', 'optimal', 'front', 'much', 'distribution', 'table', 'shows', 'difficult', 'problems', 'real', 'coded', 'nsga', 'converged', 'true', 'optimal', 'front', 'requires', 'different', 'parameter', 'setting', 'nsga', 'results', 'improve', 'generation', 'number', 'problem', 'number', 'local', 'pareto', 'optimal', 'fronts', 'corresponding', 'particular', 'value', 'large', 'change', 'decision', 'vector', 'needed', 'local', 'optimum', 'mutation', 'crossover', 'operators', 'capable', 'creating', 'solutions', 'basin', 'improvement', 'convergence', 'true', 'pareto', 'optimal', 'front', 'possible', 'nsga', 'real', 'coded', 'smaller', 'distribution', 'index', 'mutation', 'effect', 'creating', 'solutions', 'spread', 'rest', 'parameter', 'settings', 'identical', 'convergence', 'metric', 'diversity', 'measure', 'problem', 'end', 'generations', 'follows', 'fig', 'obtained', 'nondominated', 'solutions', 'nsga', 'problem', 'results', 'much', 'paes', 'spea', 'shown', 'table', 'demonstrate', 'convergence', 'spread', 'solutions', 'plot', 'nondominated', 'solutions', 'runs', 'generations', 'fig', 'figure', 'shows', 'nsga', 'able', 'find', 'solutions', 'true', 'pareto', 'optimal', 'front', 'rotated', 'problems', 'discussed', 'study', 'interactions', 'decision', 'variables', 'introduce', 'level', 'difficulty', 'multiobjective', 'optimization', 'algorithm', 'including', 'eas', 'section', 'create', 'problem', 'investigate', 'working', 'moeas', 'following', 'epistatic', 'problem', 'minimize', 'minimize', 'works', 'decision', 'variable', 'vector', 'objective', 'functions', 'defined', 'terms', 'variable', 'vector', 'calculated', 'decision', 'variable', 'vector', 'fixed', 'rotation', 'matrix', 'objective', 'functions', 'functions', 'linear', 'combination', 'decision', 'variables', 'order', 'maintain', 'spread', 'solutions', 'pareto', 'optimal', 'region', 'converge', 'particular', 'solution', 'requires', 'update', 'decision', 'variables', 'particular', 'search', 'operator', 'sbx', 'operator', 'used', 'becomes', 'difficult', 'task', 'interested', 'evaluating', 'overall', 'behavior', 'elitist', 'moeas', 'population', 'size', 'run', 'algorithm', 'generations', 'sbx', 'mutation', 'pareto', 'optimal', 'solutions', 'lie', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fig', 'obtained', 'nondominated', 'solutions', 'nsga', 'paes', 'spea', 'rotated', 'problem', 'variable', 'bounds', 'solutions', 'adding', 'fixed', 'large', 'penalty', 'objectives', 'fig', 'shows', 'obtained', 'solutions', 'end', 'generations', 'nsga', 'paes', 'spea', 'observed', 'nsga', 'solutions', 'closer', 'true', 'front', 'compared', 'solutions', 'obtained', 'paes', 'spea', 'parameter', 'needed', 'progress', 'pareto', 'optimal', 'front', 'makes', 'kind', 'problems', 'difficult', 'solve', 'nsga', 'elite', 'preserving', 'operator', 'real', 'coded', 'crossover', 'mutation', 'operators', 'able', 'find', 'solutions', 'pareto', 'optimal', 'front', 'resulting', 'example', 'problem', 'demonstrates', 'known', 'difficulties', 'linkage', 'problem', 'single', 'objective', 'optimization', 'algorithm', 'cause', 'difficulties', 'multiobjective', 'problem', 'systematic', 'studies', 'needed', 'address', 'linkage', 'issue', 'multiobjective', 'optimization', 'constraint', 'handling', 'past', 'author', 'implemented', 'penalty', 'parameterless', 'constraint', 'handling', 'approach', 'optimization', 'studies', 'shown', 'tournament', 'selection', 'algorithm', 'used', 'handle', 'constraints', 'population', 'approach', 'much', 'number', 'existing', 'constraint', 'handling', 'approaches', 'similar', 'approach', 'introduced', 'nsga', 'solving', 'constrained', 'multiobjective', 'optimization', 'problems', 'constraint', 'handling', 'approach', 'constrained', 'nsga', 'constraint', 'handling', 'method', 'uses', 'binary', 'tournament', 'selection', 'solutions', 'picked', 'population', 'solution', 'chosen', 'presence', 'constraints', 'solution', 'feasible', 'infeasible', 'situations', 'solutions', 'feasible', 'feasible', 'infeasible', 'single', 'objective', 'optimization', 'used', 'simple', 'rule', 'case', 'case', 'choose', 'solution', 'objective', 'function', 'value', 'case', 'choose', 'feasible', 'solution', 'case', 'choose', 'solution', 'smaller', 'overall', 'constraint', 'violation', 'case', 'constraints', 'objective', 'function', 'values', 'compared', 'need', 'penalty', 'parameter', 'matter', 'makes', 'constraint', 'handling', 'approach', 'useful', 'attractive', 'context', 'multiobjective', 'optimization', 'latter', 'cases', 'used', 'case', 'crowded', 'comparison', 'operator', 'maintain', 'procedures', 'nsga', 'modify', 'definition', 'domination', 'solutions', 'definition', 'solution', 'said', 'constrained', 'dominate', 'solution', 'following', 'conditions', 'true', 'solution', 'feasible', 'solution', 'solutions', 'infeasible', 'solution', 'smaller', 'overall', 'constraint', 'violation', 'solutions', 'feasible', 'solution', 'dominates', 'solution', 'effect', 'constrained', 'domination', 'principle', 'feasible', 'solution', 'nondomination', 'rank', 'infeasible', 'solution', 'feasible', 'solutions', 'according', 'nondomination', 'level', 'objective', 'function', 'values', 'infeasible', 'solutions', 'solution', 'smaller', 'constraint', 'violation', 'rank', 'moreover', 'nondomination', 'principle', 'change', 'computational', 'complexity', 'nsga', 'rest', 'nsga', 'procedure', 'described', 'used', 'usual', 'constrained', 'domination', 'definition', 'similar', 'suggested', 'fonseca', 'fleming', 'difference', 'domination', 'defined', 'infeasible', 'solutions', 'definition', 'infeasible', 'solution', 'larger', 'overall', 'constraint', 'violation', 'classified', 'members', 'larger', 'nondomination', 'level', 'hand', 'infeasible', 'solutions', 'violating', 'different', 'constraints', 'classified', 'members', 'nondominated', 'front', 'infeasible', 'solution', 'violating', 'constraint', 'nondominated', 'level', 'solution', 'violating', 'different', 'constraint', 'large', 'extent', 'cause', 'algorithm', 'infeasible', 'search', 'region', 'generations', 'feasible', 'region', 'constraint', 'moreover', 'fonseca', 'fleming', 'approach', 'requires', 'domination', 'constraint', 'violation', 'values', 'approach', 'expensive', 'simpler', 'ray', 'tai', 'seow', 'constraint', 'handling', 'approach', 'ray', 'suggested', 'constraint', 'handling', 'technique', 'constraint', 'violations', 'constraints', 'summed', 'nondomination', 'check', 'constraint', 'violations', 'made', 'procedure', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'deb', 'fast', 'elitist', 'multiobjective', 'nsga', 'table', 'constrained', 'test', 'problems', 'used', 'study', 'objective', 'functions', 'minimized', 'different', 'nondominated', 'population', 'performed', 'ranking', 'performed', 'objective', 'function', 'values', 'resulting', 'ranking', 'stored', 'dimensional', 'vector', 'second', 'ranking', 'performed', 'constraint', 'violation', 'values', 'constraints', 'objective', 'function', 'information', 'used', 'constraint', 'violation', 'constraint', 'used', 'criterion', 'nondomination', 'classification', 'population', 'performed', 'constraint', 'violation', 'values', 'feasible', 'solution', 'constraint', 'violations', 'zero', 'feasible', 'solutions', 'rank', 'third', 'ranking', 'performed', 'combination', 'objective', 'functions', 'constraint', 'violation', 'values', 'total', 'values', 'produces', 'ranking', 'objective', 'function', 'values', 'constraint', 'violations', 'used', 'algorithm', 'need', 'penalty', 'parameter', 'domination', 'check', 'criteria', 'compared', 'need', 'penalty', 'parameter', 'feasible', 'solutions', 'best', 'rank', 'chosen', 'population', 'population', 'available', 'created', 'remaining', 'solutions', 'importance', 'ranking', 'selection', 'operator', 'importance', 'ranking', 'crossover', 'operator', 'laid', 'systematic', 'multiobjective', 'niche', 'preserving', 'operator', 'details', 'readers', 'refer', 'compare', 'algorithm', 'method', 'showed', 'working', 'constraint', 'handling', 'method', 'number', 'engineering', 'design', 'problems', 'nondominated', 'sorting', 'different', 'sets', 'criteria', 'required', 'algorithm', 'introduces', 'many', 'different', 'operators', 'remains', 'investigated', 'performs', 'complex', 'problems', 'point', 'view', 'computational', 'associated', 'method', 'following', 'section', 'choose', 'set', 'problems', 'compare', 'simple', 'constrained', 'nsga', 'ray', 'tai', 'seow', 'method', 'simulation', 'results', 'choose', 'constrained', 'test', 'problems', 'table', 'used', 'studies', 'problem', 'part', 'unconstrained', 'pareto', 'optimal', 'region', 'feasible', 'resulting', 'constrained', 'pareto', 'optimal', 'region', 'constraint', 'boundary', 'part', 'unconstrained', 'pareto', 'optimal', 'region', 'second', 'problem', 'srn', 'used', 'original', 'study', 'nsga', 'constrained', 'pareto', 'optimal', 'set', 'subset', 'unconstrained', 'pareto', 'optimal', 'set', 'third', 'problem', 'tnk', 'suggested', 'discontinuous', 'pareto', 'optimal', 'region', 'constraint', 'boundary', 'next', 'section', 'show', 'constrained', 'pareto', 'optimal', 'region', 'problems', 'fourth', 'problem', 'objective', 'constraint', 'problem', 'attempted', 'solve', 'objectives', 'difficult', 'discuss', 'effect', 'constraints', 'unconstrained', 'pareto', 'optimal', 'region', 'next', 'section', 'show', 'ten', 'plots', 'obtained', 'nondominated', 'solutions', 'apply', 'real', 'coded', 'nsga', 'problems', 'population', 'size', 'distribution', 'indexes', 'real', 'coded', 'crossover', 'mutation', 'operators', 'run', 'nsga', 'real', 'coded', 'constraint', 'handling', 'technique', 'ray', 'tai', 'seow', 'constraint', 'handling', 'algorithm', 'maximum', 'generations', 'choose', 'large', 'number', 'generations', 'investigate', 'spread', 'solutions', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fig', 'obtained', 'nondominated', 'solutions', 'nsga', 'constrained', 'problem', 'fig', 'obtained', 'nondominated', 'solutions', 'ray', 'tai', 'seow', 'algorithm', 'constrained', 'problem', 'large', 'number', 'generations', 'case', 'obtain', 'spread', 'solutions', 'generations', 'crossover', 'mutation', 'probabilities', 'fig', 'shows', 'obtained', 'set', 'nondominated', 'solutions', 'generations', 'nsga', 'figure', 'shows', 'nsga', 'able', 'maintain', 'solutions', 'pareto', 'optimal', 'region', 'important', 'note', 'order', 'maintain', 'spread', 'solutions', 'constraint', 'boundary', 'solutions', 'modified', 'particular', 'manner', 'constraint', 'function', 'becomes', 'difficult', 'task', 'search', 'operator', 'fig', 'shows', 'obtained', 'solutions', 'ray', 'tai', 'seow', 'algorithm', 'generations', 'clear', 'nsga', 'performs', 'ray', 'tai', 'seow', 'algorithm', 'terms', 'converging', 'true', 'pareto', 'optimal', 'front', 'terms', 'maintaining', 'diverse', 'population', 'nondominated', 'solutions', 'next', 'consider', 'test', 'problem', 'srn', 'fig', 'shows', 'nondominated', 'solutions', 'generations', 'nsga', 'fig', 'obtained', 'nondominated', 'solutions', 'nsga', 'constrained', 'problem', 'srn', 'fig', 'obtained', 'nondominated', 'solutions', 'ray', 'tai', 'seow', 'algorithm', 'constrained', 'problem', 'srn', 'figure', 'shows', 'nsga', 'random', 'population', 'pareto', 'optimal', 'front', 'ray', 'tai', 'seow', 'algorithm', 'able', 'front', 'test', 'problem', 'fig', 'figs', 'show', 'feasible', 'objective', 'space', 'obtained', 'nondominated', 'solutions', 'nsga', 'ray', 'tai', 'seow', 'algorithm', 'pareto', 'optimal', 'region', 'discontinuous', 'nsga', 'difficulty', 'finding', 'wide', 'spread', 'solutions', 'true', 'pareto', 'optimal', 'region', 'ray', 'tai', 'seow', 'algorithm', 'found', 'number', 'solutions', 'pareto', 'optimal', 'front', 'exist', 'many', 'infeasible', 'solutions', 'generations', 'order', 'demonstrate', 'working', 'fonseca', 'fleming', 'constraint', 'handling', 'strategy', 'implement', 'nsga', 'apply', 'tnk', 'fig', 'shows', 'population', 'members', 'end', 'generations', 'identical', 'parameter', 'setting', 'used', 'fig', 'figures', 'demonstrate', 'fonseca', 'fleming', 'constraint', 'handling', 'strategies', 'nsga', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'deb', 'fast', 'elitist', 'multiobjective', 'nsga', 'fig', 'obtained', 'nondominated', 'solutions', 'nsga', 'constrained', 'problem', 'tnk', 'fig', 'obtained', 'nondominated', 'solutions', 'ray', 'tai', 'seow', 'algorithm', 'constrained', 'problem', 'tnk', 'ray', 'used', 'problem', 'study', 'normalized', 'objective', 'functions', 'following', 'manner', 'objective', 'functions', 'observe', 'range', 'normalized', 'objective', 'function', 'values', 'obtained', 'nondominated', 'solutions', 'table', 'shows', 'comparison', 'ray', 'tai', 'seow', 'algorithm', 'objective', 'functions', 'nsga', 'found', 'spread', 'solutions', 'ray', 'tai', 'seow', 'approach', 'order', 'show', 'interactions', 'normalized', 'objective', 'functions', 'plot', 'ten', 'interactions', 'fig', 'algorithms', 'nsga', 'results', 'shown', 'upper', 'diagonal', 'portion', 'figure', 'ray', 'tai', 'seow', 'results', 'shown', 'lower', 'diagonal', 'portion', 'axes', 'plot', 'obtained', 'looking', 'corresponding', 'diagonal', 'ranges', 'example', 'plot', 'row', 'third', 'column', 'axis', 'axis', 'plot', 'belongs', 'upper', 'side', 'diagonal', 'fig', 'obtained', 'nondominated', 'solutions', 'fonseca', 'fleming', 'constraint', 'handling', 'strategy', 'nsga', 'constrained', 'problem', 'tnk', 'plot', 'obtained', 'nsga', 'order', 'compare', 'plot', 'similar', 'plot', 'ray', 'tai', 'seow', 'approach', 'plot', 'third', 'row', 'column', 'figure', 'axis', 'plotted', 'axis', 'plotted', 'comparison', 'plots', 'observe', 'ray', 'tai', 'seow', 'plot', 'turn', 'page', 'direction', 'nsga', 'results', 'ranges', 'axes', 'cases', 'observe', 'nsga', 'plots', 'formed', 'patterns', 'ray', 'tai', 'seow', 'plots', 'example', 'figures', 'interactions', 'clear', 'nsga', 'results', 'similar', 'patterns', 'exist', 'results', 'obtained', 'ray', 'tai', 'seow', 'algorithm', 'convergence', 'true', 'fronts', 'vii', 'conclusion', 'fast', 'elitist', 'moea', 'nondominated', 'sorting', 'approach', 'different', 'difficult', 'test', 'problems', 'literature', 'nsga', 'able', 'maintain', 'spread', 'solutions', 'converge', 'obtained', 'nondominated', 'front', 'compared', 'elitist', 'moeas', 'paes', 'spea', 'problem', 'paes', 'able', 'converge', 'closer', 'true', 'pareto', 'optimal', 'front', 'paes', 'maintains', 'diversity', 'solutions', 'controlling', 'crowding', 'solutions', 'deterministic', 'prespecified', 'number', 'equal', 'sized', 'search', 'space', 'problem', 'deterministic', 'crowding', 'coupled', 'effect', 'mutation', 'approach', 'converging', 'true', 'front', 'compared', 'dynamic', 'parameterless', 'crowding', 'approach', 'used', 'nsga', 'spea', 'diversity', 'preserving', 'mechanism', 'used', 'nsga', 'found', 'best', 'approaches', 'studied', 'problem', 'strong', 'parameter', 'interactions', 'nsga', 'able', 'closer', 'true', 'front', 'approaches', 'important', 'matter', 'approaches', 'difficulties', 'solving', 'called', 'epistatic', 'problem', 'matter', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'table', 'lower', 'upper', 'bounds', 'objective', 'function', 'values', 'observed', 'obtained', 'nondominated', 'solutions', 'fig', 'upper', 'diagonal', 'plots', 'nsga', 'lower', 'diagonal', 'plots', 'ray', 'tai', 'seow', 'algorithm', 'compare', 'plot', 'ray', 'tai', 'seow', 'algorithm', 'plot', 'nsga', 'ranges', 'used', 'axis', 'shown', 'diagonal', 'research', 'single', 'objective', 'studies', 'shows', 'epistatic', 'problems', 'cause', 'difficulties', 'moeas', 'researchers', 'field', 'consider', 'epistatic', 'problems', 'testing', 'developed', 'algorithm', 'multiobjective', 'optimization', 'simple', 'extension', 'definition', 'dominance', 'constrained', 'multiobjective', 'optimization', 'definition', 'used', 'moeas', 'real', 'coded', 'nsga', 'definition', 'shown', 'solve', 'different', 'problems', 'much', 'constraint', 'handling', 'approach', 'properties', 'fast', 'nondominated', 'sorting', 'procedure', 'elitist', 'strategy', 'parameterless', 'approach', 'simple', 'efficient', 'constraint', 'handling', 'method', 'nsga', 'find', 'increasing', 'attention', 'applications', 'future', 'references', 'deb', 'multiobjective', 'optimization', 'evolutionary', 'algorithms', 'wiley', 'efficient', 'constraint', 'handling', 'method', 'genetic', 'algorithms', 'comput', 'methods', 'appl', 'eng', 'vol', 'multiobjective', 'genetic', 'algorithms', 'problem', 'difficulties', 'test', 'functions', 'evol_comput', 'vol', 'deb', 'goldberg', 'investigation', 'niche', 'species', 'genetic', 'function', 'optimization', 'proceedings', 'third', 'international', 'conference', 'genetic', 'algorithms', 'schaffer', 'san', 'mateo', 'morgan', 'kauffman', 'deb', 'agrawal', 'understanding', 'interactions', 'genetic', 'algorithm', 'parameters', 'genetic', 'algorithms', 'eds', 'san', 'mateo', 'morgan', 'kauffman', 'deb', 'agrawal', 'simulated', 'binary', 'crossover', 'continuous', 'search', 'space', 'complex', 'syst', 'apr', 'vol', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'deb', 'fast', 'elitist', 'multiobjective', 'nsga', 'fonseca', 'fleming', 'genetic', 'algorithms', 'multiobjective', 'optimization', 'formulation', 'discussion', 'generalization', 'proceedings', 'fifth', 'international', 'conference', 'genetic', 'algorithms', 'san', 'mateo', 'morgan', 'kauffman', 'performance', 'assessment', 'comparison', 'stochastic', 'multiobjective', 'optimizers', 'parallel', 'problem', 'solving', 'nature', 'rechenberg', 'schwefel', 'eds', 'berlin', 'germany', 'springer', 'verlag', 'multiobjective', 'optimization', 'multiple', 'constraint', 'handling', 'evolutionary', 'algorithms', 'part', 'formulation', 'ieee', 'trans', 'syst', 'man', 'cybern', 'vol', 'jan', 'multiobjective', 'optimization', 'multiple', 'constraint', 'handling', 'evolutionary', 'algorithms', 'part', 'application', 'example', 'ieee', 'trans', 'syst', 'man', 'cybern', 'vol', 'jan', 'goldberg', 'deb', 'genetic', 'algorithms', 'motivation', 'analysis', 'results', 'complex', 'syst', 'vol', 'learning', 'gene', 'linkage', 'solve', 'problems', 'difficulty', 'genetic', 'algorithms', 'genetic', 'algorithms', 'univ', 'rep', 'horn', 'goldberg', 'pareto', 'genetic', 'algorithm', 'multiobjective', 'optimization', 'proceedings', 'ieee', 'conference', 'evolutionary', 'computation', 'michalewicz', 'ieee', 'press', 'knowles', 'corne', 'pareto', 'archived', 'evolution', 'strategy', 'algorithm', 'multiobjective', 'optimization', 'proceedings', 'evolutionary', 'computation', 'ieee', 'press', 'variant', 'evolution', 'strategies', 'vector', 'optimization', 'parallel', 'problem', 'solving', 'nature', 'schwefel', 'eds', 'berlin', 'germany', 'springer', 'verlag', 'hybrid', 'multiobjective', 'shape', 'optimization', 'genetic', 'algorithms', 'engineering', 'computer', 'science', 'eds', 'york', 'wiley', 'ray', 'tai', 'seow', 'evolutionary', 'algorithm', 'multiobjective', 'optimization', 'eng', 'optim', 'vol', 'rudolph', 'evolutionary', 'search', 'sets', 'dept', 'comput', 'sci', 'univ', 'germany', 'tech', 'rep', 'schaffer', 'multiple', 'objective', 'optimization', 'vector', 'evaluated', 'genetic', 'algorithms', 'proceedings', 'international', 'conference', 'genetic', 'algorithms', 'srinivas', 'deb', 'multiobjective', 'function', 'optimization', 'nondominated', 'sorting', 'genetic', 'algorithms', 'evol_comput', 'vol', 'fall', 'decision', 'support', 'system', 'optimization', 'proc', 'ieee', 'int', 'conf', 'systems', 'man', 'cybernetics', 'van', 'veldhuizen', 'multiobjective', 'evolutionary', 'algorithms', 'innovations', 'air', 'force', 'inst', 'technol', 'tech', 'rep', 'eng', 'van', 'veldhuizen', 'multiobjective', 'evolutionary', 'algorithm', 'research', 'history', 'analysis', 'air', 'force', 'inst', 'technol', 'tech', 'rep', 'zitzler', 'evolutionary', 'algorithms', 'multiobjective', 'optimization', 'methods', 'applications', 'institute', 'technology', 'switzerland', 'zitzler', 'deb', 'thiele', 'comparison', 'multiobjective', 'evolutionary', 'algorithms', 'empirical', 'results', 'evol_comput', 'vol', 'zitzler', 'thiele', 'multiobjective', 'optimization', 'evolutionary', 'algorithms', 'comparative', 'case', 'study', 'parallel', 'problem', 'solving', 'nature', 'eiben', 'schwefel', 'eds', 'berlin', 'germany', 'springer', 'verlag', 'deb', 'received', 'tech', 'degree', 'engineering', 'indian', 'institute', 'technology', 'india', 'degrees', 'engineering', 'mechanics', 'university', 'professor', 'engineering', 'indian', 'institute', 'technology', 'kanpur', 'india', 'research', 'papers', 'journals', 'number', 'multiobjective', 'optimization', 'evolutionary', 'algorithms', 'wiley', 'optimization', 'engineering', 'design', 'india', 'current', 'research', 'interests', 'field', 'evolutionary', 'computation', 'areas', 'multicriterion', 'real', 'parameter', 'evolutionary', 'algorithms', 'deb', 'associate', 'editor', 'ieee', 'transactions', 'evolutionary', 'computation', 'member', 'international', 'society', 'genetic', 'evolutionary', 'computation', 'born', 'india', 'august', 'received', 'degree', 'mathematics', 'scientific', 'computing', 'indian', 'institute', 'technology', 'kanpur', 'india', 'working', 'degree', 'computer', 'science', 'institute', 'technology', 'member', 'kanpur', 'genetic', 'algorithms', 'laboratory', 'member', 'learning', 'systems', 'group', 'current', 'research', 'interests', 'include', 'evolutionary', 'computation', 'machine', 'learning', 'neural', 'networks', 'born', 'india', 'february', 'received', 'degree', 'mathematics', 'scientific', 'computing', 'indian', 'institute', 'technology', 'kanpur', 'india', 'working', 'degree', 'computer', 'science', 'university', 'san', 'member', 'kanpur', 'genetic', 'algorithms', 'laboratory', 'research', 'interests', 'include', 'evolutionary', 'computation', 'learning', 'humans', 'machines', 'developing', 'learning', 'methods', 'learning', 'born', 'india', 'working', 'degree', 'indian', 'institute', 'technology', 'kanpur', 'india', 'member', 'kanpur', 'genetic', 'algorithms', 'laboratory', 'current', 'research', 'interests', 'include', 'evolutionary', 'computation', 'applications', 'biology', 'various', 'fields', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply']"
2,1,1,"Genetic algorithms provide an alternative to traditional optimization techniques by using directed random searches to locate optimal solutions in complex landscapes. This article traces GA research. Genetic Algorithms: A Survey M. Srinivas, Motorola India Electronics Ltd. Lalit M. Patnaik, Indian Institute of Science n the last five years, genetic algorithms have emerged as practical, robust optimization and search methods. Diverse areas such as music generation, genetic synthesis, VLSI technology, strategy planning, and machine learning have profited from these methods. The popularity of genetic algorithms is reflected in three biennial conferences, a new international journal, and an ever-increasing mass of literature devoted to the theory, practice, and applications of such techniques (see the sidebar “To learn more”). Genetic algorithm search methods are rooted in the mechanisms of evolution and natural genetics. The interest in heuristic search algorithms with underpinnings in natural and physical processes began as early as the 1970s, when Holland’ first proposed genetic algorithms. This interest was rekindled by Kirkpatrick, Gelatt, and Vecchi’s simulated annealing technique in 1983.2 Simulated annealing is based on thermodynamic considerations, with annealing interpreted as an optimization procedure. Evolutionary ~ t r a t e g i e sa~n.d~ g enetic algorithm^,^.'^ on the other hand, draw inspiration from the natural search and selection processes leading to the survival of the fittest individuals. Simulated annealing, genetic algorithms, and evolutionary strategies are similar in their use of a probabilistic search mechanism directed toward decreasing cost or increasing payoff. These three methods have a high probability of locating the global solution optimally in a multimodal search landscape. (A multimodal cost function has several locally optimal solutions as well.) However, each method has a significantly different mode of operation. Simulated annealing probabilistically generates a sequence of states based on a cooling schedule to ultimately converge to the global optimum. Evolutionary strategies use mutations as search mechanisms and selection to direct the search toward the prospective regions in the search space. Genetic algorithms generate a sequence of populations by using a selection mechanism, and use crossover and mutation as search mechanisms. The principal difference between genetic algorithms and evolutionary strategies is that genetic algorithms rely on crossover, a mechanism of probabilistic and useful exchange of information among solutions, to locate better solutions, while evolutionary strategies use mutation as the primary search mechanism. Although Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. simulated annealing, evolutionary strategies, and genetic algorithms have basically different approaches. several hybrids of these techniques that narrow the distinctions among them have been proposed in recent literature. Other optimization algorithms derived from the evolutionary paradigm have also demonstrated considerable success. In this article we introduce the art and science of genetic algorithms and survey current issues in GA theory and practice. We do not present a detailed study, since several wonderful texts on GAS already e~ist.’.~.’‘I.n’~st ead, we offer a quick guide into the labyrinth of GA research. To start, we draw the analogy between genetic algorithms and the search processes in nature. Then we describe the genetic algorithm that Holland introduced in 1975 and the workings of GAS. After a survey of techniques proposed as improvements to Holland’s GA and of some radically different approaches, we survey the advances in GA theory related to modeling. dynamics, and deception. Genetic algorithms and natural selection In nature. individuals best suited to competition for scanty resources survive. Adapting to a changing environment is essential for the survival of individuals of each species. While the various features that uniquely characterize an individual determine its survival capacity. the features in turn are determined by the individual’s genetic content. Specifically, each feature is controlled by a basic unit called a gene. The sets of genes controlling features form the chromosomes, the “keys” to the survival of the individual in a competitive environment. Although evolution manifests itself as a succession of changes in species’ features, it is the changes in the species’ genetic material that form the essence of evolution. Specifically, evolution’s driving force is the joint action of natural selection and the recombination of genetic material that occurs during reproduction. In nature, competition among individuals for scant resources such as food and space and for mates results in the fittest individuals dominating over weaker ones. Only the fittest individuals survive and reproduce, a natural phenomenon called “the survival of the fittest.” Hence, the genes of the fittest survive, while the genes of weaker individuals die out. Natural selection leads to the survival of the fittest individuals, but it also implicitly leads to the survival of the fittest genes. The reproduction process generates diversity in the gene pool. Evolution is initiated when the genetic material (chromosomes) from two parents recombines during reproduction. New combinations To learn more Readers wishing to pursue information on genetic algorithms may be interested in the following materials. nd Applications, Lawrence E of genes are generated from previous ones; a new gene pool is created. Specifically, the exchange of genetic material among chromosomes is called crossover. Segments of the two parent chromosomes are exchanged during crossover, creating the possibility of the “right” combination of genes for better individuals. Repeated selection and crossover cause the continuous evolution of the gene pool and the generation of individuals that survive better in a competitive environment. Holland’ proposed genetic algorithms in the early 1970s as computer programs that mimic the evolutionary processes in nature. Genetic algorithms manipulate a population of potential solutions to an optimization (or search) problem. Specifically, they operate on encoded representations of the solutions, equivalent to the genetic material of individuals in nature, and not directly on the solutions themselves. Holland’s genetic algorithm encodes the solutions as strings of bits from a binary alphabet. As in nature, selection provides the necessary driving mechanism for better solutions to survive. Each solution is associated with a fitness vulue that reflects how good it is, compared with other solutions in the population. The higher the fitness value of an individual, the higher its chances of survival and reproduction and the larger its representation in the subsequent generation. Recombination of genetic material in genetic algorithms is simulated through a crossover mechanism that exchanges portions between strings. Another operation, called mutation, causes sporadic and random alteration of the bits of strings. Mutation too has a direct analogy from nature and plays the role of regenerating lost genetic material. A simple genetic algorithm In the literature, Holland’s genetic algorithm is commonly called the Simple Genetic Algorithm or SGA. Essential to the SGA’s working is a population of binary strings. Each string of Os and Is is the encoded version of a solution to the optimization problem. Using genetic operators - crossover and mutation -the algorithm creates the subsequent generation from the strings of the current population. This generational cycle is re- 18 COMPUTER Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. peated until a desired termination criterion is reached (for example. a predefined number of generations are processed). Figure 1 summarizes the working of the SGA. which has the following components: 0 a population of binary strings, control parameters. a fitness function, 0 genetic operators (crossover and mua selection mechanism, and 0 a mechanism to encode the solutions tation), as binary strings. Encoding mechanism. Fundamental to the GA structure is the encoding mechanism for representing the optimization problem's variables. The encoding mechanism depends on the nature of the problem variables. For example. when solving for the optimal flows in a transportation problem. the variables (flows in different channels) assume continuous values, while the variables in a travelingsalesman problem are binary quantities representing the inclusion or exclusion of an edge in the Hamiltonian circuit. In each case the encoding mechanism should map each solution to a unique binary string. A large number of optimization problems have real-valued continuous variables. A common method of encoding them uses their integer representation. Each variable is first linearly mapped to an integer defined in a specified range, and the integer is encoded using a fixed number of binary bits. The binary codes of all the variables are then concatenated to obtain a binary string. For example, consider a continuous variable defined in a range from -1.28 to 1.28. We could encode this continuous variable with an accuracy of two decimal places by multiplying its real value by 100 and then discarding the decimal portion of the product. Thus the value that the variable attains is linearly mapped to integers in the range [-128, 1281. The binary code corresponding to each integer can be easily computed. Fitness function. The objective function, the function to be optimized, provides the mechanism for evaluating each string. However. its range of values varies from problem to problem. To maintain uniformity over various problem domains, we use thefitness function to normalize the objective function to a convenient range of 0 to 1. The normalized value of the objective function is thefitness of the string, which the selection mechanism uses to evaluate the strings of the population. Selection. Selection models nature's survival-of-the-fittest mechanism. Fitter solutions survive while weaker ones perish. In the SGA, a fitter string receives a higher number of offspring and thus has a higher chance of surviving in the subsequent generation. In the proportionate selection scheme, a string with fitness value f - is allocated fb'f offspring, Simple Genetic Algorithm () initialize population; evaluate population; [ wherefis the average fitness value of the population. A string with a fitness value higher than the average is allocated more than one offspring, while a string with a fitness value less than the average is allocated less than one offspring. The proportionate selection scheme allocates fractional numbers of offspring to strings. Hence the numberfb'frepresents the string's expected number of offspring. Since in the final allocation some strings have to receive a higher number of offspring thanfi/'and some less than fb'f, allocation methods include some randomization to remove methodical allocation biases toward any particular set of strings. The allocation technique controls the extent to which the actual allocation of offspring to strings matches the expected number of offspringfi/'. The SGA uses the roulette wheel selection scheme' to implement proportionate selection. Each string is allocated a sector (slot) of a roulette wheel with the angle subtended by the sector at the center of the wheel equaling 2x fi@. A string is allocated an offspring if a randomly generated number in the range 0 to 2x falls in the sector corresponding to the string. The algorithm selects strings in this fashion until it has generated the entire population of the next generation. Roulette wheel selection could generate large sampling errors in the sense that the final number of offspring allocated to a string might vary significantly from the expected number. The allocated number of offspring approaches the expected number only for very large population sizes. Figure 1. Simple Genetic Algorithm structure. Crossover. After selection comes crossover, SGA's crucial operation. Pairs of strings are picked at random from the population to be subjected to crossover. The SGA uses the simplest approach - single-point crossover. Assuming that 1 is the string length, it randomly chooses a crossover point that can assume values in the range 1 to 1 - 1. The portions of the two strings beyond this crossover point are exchanged to form two new strings. The crossover point may assume any of the 1 - 1 possible values with equal probability. Further, crossover is not always effected. After choosing a pair of strings, the algorithm invokes crossover only if a randomly generated number in the range 0 to 1 is greater than pc, the crossover rate. (In GA literature, the term crossover rate is also used to denote the probability of crossover.) Otherwise the strings remain unaltered. The value ofp,. lies in the range from 0 to 1. In a large population,p, gives the fraction of strings actually crossed. Mutation. After crossover. strings are subjected to mutation. Mutation of a bit involves flipping it: changing a 0 to 1 or vice versa. Just asp, controls the probability of a crossover, another parameter. P, ,~( the mutation rate), gives the probability that a bit will be flipped. The bits of a string are independently mutated - that is, the mutation of a bit does not affect the probability of mutation of other bits. The SGA treats mutation only as a secondary operator with the role of restoring lost genetic material. For example, suppose all the strings in a population have converged to a 0 at a given position and the optimal solution has a 1 at that position. Then crossover cannot regenerate a 1 at that position. while a mutation could. June 1994 19 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. Population P1: String Fitness value 0000011100 0.3 1000011111 0.6 01 10101011 0.6 1111111011 0.9 Population P2 : After selection String Fitness value 1000011111 0.6 0110101011 0.6 1111111011 0.9 1111111011 0.9 Population P3 : After crossover String Fitness value 100001 11 01 1 0.5 0110101011 0.6 1111111011 0.9 11111111111 1.0 Population P4 : After mutation String crossed, while the other pair of strings is left intact. The crossover point falls between the fifth and sixth bits of the strings, and portions of strings 1 and 4 beyond the fifth bit are swapped. Population P3 represents the set of strings after crossover. The action of mutation on population P3 can be seen in population P4 on the sixth bit of string 2 and the first bit of string 4: Only two bits out of 40 have been mutated, representing an effective mutation rate of 0.05. Population P4 represents the next generation. (In effect, P1 and P4 are the populations, while P2 and P3 represent intermediate stages in the generational cycle.) The example in Figure 2 is only for illustration. Typically the SGA uses a population size of 30 to 200, crossover rates from 0.5 to 1.0, and mutation rates from 0.001 to 0.05. These parameters - the population size, mutation rate, and crossover rate - are together referred to as the control parameters of the SGA and must be specified before its execution. To terminate execution of the SGA. we must specify a stopping criterion. It could be terminated after a fixed number of generations, after a string with a certain high fitness value is located, or after all the strings in the population have attained a certain degree of homogeneity (a large number of strings have identical bits at most positions). Figure 2. A generational cycle of the Simple Genetic Algorithm. How do genetic algorithms work? Generational cycle. Figure 2 shows a generational cycle of the genetic algorithm with a population (Pl) of four strings with 10 bits each. In the example, the objective function, which can assume values in the range 0 to 10, gives the number of Is in the string. The fitness function performs a “divide by 10” operation to normalize the objective function to the range 0 to 1. The four strings thus have fitness values of 0.3,0.6,0.6, and 0.9. Ideally, the proportional selection scheme should allocate 0.5, 1.0. 1.0 and 1.5 offspring to the strings. However, in this case, the final allocation of offspring is 0, 1.1, and 2. In Figure 2 the population P2 represents this selected set of strings. Next, the four strings are paired randomly for crossover. Strings 1 and 4 form one pair, while strings 2 and 3 form the other pair. At a crossover rate of 0.5, only the pair of strings 1 and 4 is actually Despite successful use of GAS in a large number of optimization problems. progress on the theoretical front has been rather slow. A very clear picture of the workings of GAS has not yet emerged, but the schemu theory and the buildingblock hypothesis of Holland and Goldberg’. 7 capture the essence of GA mechanics. Similarity template. A schema is a similarity template describing a subset of strings with similarities at certain posit i o n~. ’I,n~ o ther words, a schema represents a subset of all possible strings that have the same bits at certain string positions. As an example, consider strings with five bits. A schema **000 represents strings with 0s in the last three positions: the set of strings 00000,01000,10000, and 11000. Similarly, a schema 1*00* represents the strings 10000, 10001,11000, and 11001. Each string represented by a schema is called an instance of the schema. Because the symbol * signifies that a 0 or a 1 could occur at the corresponding string position, the schema ***** represents all possible strings of five bits. The fixed posifions of a schema are the string positions that have a 0 or a 1: in **000, the third, fourth. and fifth positions. The number of fixed positions of a schema is its order: **000 is of order 3. A schema’s defining length is the distance between the outermost fixed positions. Hence, the defining length of **000 is 2, while the defining length of 1 *00* is 3. Any specific string is simultaneously an instance of 2‘schemata ( I is the string length). Since a schema represents a subset of strings, we can associate a fitness value with a schema: the average fitness of the schema. In a given population, this is determined by the average fitness of instances of the schema. Hence, a schema’s average fitness value varies with the population’s composition from one generation to another. Competition. Why are schemata important? Consider a schema with k fixed positions. There are 2k - 1 other schemata with the same fixed positions that can be obtained by considering all permutations of 0s and Is at these k positions. Altogether, for k fixed positions, there are 2h distinct schemata that generate a partitioning of all possible strings. Each such set of k fixed positions generates a schema competition, a survival competition among the 2k schemata. Since there are 2’ possible combinations of fixed positions, 2‘distinct schema competitions are possible. The execution of the GA thus generates 2‘ simultaneous schema competitions. The GA simultaneously, though not independently, attempts to solve all the 2‘ schema competitions and locate the best schema for each set of fixed positions. We can visualize the GA’s search for the optimal string as a simultaneous competition among schemata to increase the number of their instances in the population. If we describe the optimal string as the juxtaposition of schemata with short defining lengths and high average fitness values, then the winners of the individual schema competitions could potentially form the optimal string. Such schemata with high fitness values and small defining lengths are appropriately called building blocks. The notion that 20 COMPUTER Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. strings with high fitness values can be located by sampling building blocks with high fitness values and combining the building blocks effectively is called the building-block hypothesis.’.’ Building blocks. The genetic operators - crossover and mutation - generate, promote, and juxtapose building blocks to form optimal strings. Crossover tends to conserve the genetic information present in the strings to be crossed. Thus, when the strings to be crossed are similar, its capacity to generate new building blocks diminishes. Mutation is not a conservative operator and can generate radically new building blocks. Selection provides the favorable bias toward building blocks with higher fitness values and ensures that they increase in representation from generation to generation. GAS’ crucial and unique operation is the juxtaposition of building blocks achieved during crossover, and this is the cornerstone of CA mechanics. The building-block hypothesis assumes that the juxtaposition of good building blocks yields good strings. This is not always true. Depending on the nature of the objective function, very bad strings can be generated when good building blocks are combined. Such objective functions are referred to as CA-deceptive functions, and they have been studied extensively. (We discuss them in more detail in a later section.) Schema theorem. When we consider the effects of selection. crossover, and mutation on the rate at which instances of a schema increase from generation to generation. we see that proportionate selection increases or decreases the number in relation to the average fitness value of the schema. Neglecting crossover, a schema with a high average fitness value grows exponentially to win its relevant schema competition. However, a high average fitness value alone is not sufficient for a high growth rate. A schema must have a short defining length too. Because crossover is disruptive, the higher the defining length of a schema, the higher the probability that the crossover point will fall between its fixed positions and an instance will be destroyed. Thus, schemata with high fitness values and small defining lengths grow exponentially with time. This is the essence of the schema theorem, first proposed by Holland as the “fundamental theorem ofgenetic algorithms.”’ (See the sidebar.) The following equation is a formal statement of the schema theorem: where f(h, t): average fitness value of schema h in generation t fct): average fitness value of the population in generation t pc: crossover probability pm: mutation probability F(h): defining length of the schema o(h): order of the schema h N(h, t): expected number of instances of schema h in generation t I: the number of bit positions in a string The factor: gives the probability that an instance of the schema h is disrupted by crossover, andp,,o(h) gives the probability that an instance is disrupted by mutation.’ The CA samples the building blocks at a very high rate. In a single generational cycle the CA processes only P strings (P is the population size), but it implicitly evaluates approximately P’ schemata.’ This capacity of GAS to simultaneously process a large number of schemata, called implicit parallelism, arises from the fact that a string simultaneously represents 2‘ different schemata. Modifications to the SGA Over the last decade, considerable research has focused on improving GA performance. Efficient implementations of the proportionate selection scheme such as the stochastic remainder technique and the stochastic universal sampling technique have been proposed to reduce sampling errors. Selection mechanisms such as rank-based selection, elitist strategies, steady-state selection, and tournament selection have been proposed as alternatives to proportional selection. Crossover mechanisms such as two-point, multipoint. and uniform have been proposed as improvements on the traditional single- point crossover technique. Gray codes and dynamic encoding have overcome some problems associated with fixedpoint integer encoding. Departing from the traditional policy of static control parameters for the GA, adaptive techniques dynamically vary the control parameters (crossover and mutation rates). Significant innovations include the distributed genetic algorithms and parallel genetic algorithms. The rest of this section surveys these developments. Selection mechanisms and scaling. The proportionate selection scheme allocates offspring based on the ratio of a string’s fitness value to the population’s average fitness value. In the initial generations of the CA, the population typically has a low average fitness value. The presence of a few strings with relatively high fitness values causes the proportionate selection scheme to allocate a large number of offspring to these “superstrings,” and they take over the population, causing premature convergence. A different problem arises in the later stages of the CA when the population has converged and the variance in string fitness values becomes small. The proportionate selection scheme allocates approximately equal numbers of offspring to all strings, thereby depleting the driving force that promotes better strings. Scaling mechanisms and rankbased selection schemes overcome these two problems. June 1994 21 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. Scaling of fitness values involves readjustment of string fitness values. Linear scaling computes the scaled fitness value as f =af+b wherefis the fitness value, f is the scaled fitness value, and a and b are suitably chosen constants. Here a and b are calculated in each generation to ensure that the maximum value of the scaled fitness value is a small number, say 1.5 or 2.0 times the average fitness value of the population. Then the maximum number of offspring allocated to a string is 1.5 or 2.0. Sometimes the scaled fitness values may become negative for strings that have fitness values far smaller than the average fitness of the population. In such cases, we must recompute a and b appropriately to avoid negative fitness values. One way to overcome the problem of negative scaled fitness values is simply to remove these “troublemakers” from the competition. The sigma truncation scheme does exactly this by considering the standard deviation of fitness values before scaling them. Hence the fitness values of strings are determined as follows: f =f-&co) wherefis the average fitness value of the population, CJ is the standard deviation of fitness values in the population, and c is a small constant typically ranging from 1 to 3. Strings whose fitness values are less than c standard deviations from the average fitness value are discarded. This approach ensures that most strings in the population (those whose fitness values are within c standard deviations of the average) are considered for selection, but a few strings that could potentially cause negative scaled fitness values are discarded. An alternate way to avoid the twin problems that plague proportional selection is rank-based selection, which uses a fitness value-based rank of strings to allocate offspring. The scaled fitness values typically vary linearly with the rank of the string. The absolute fitness value of the string does not directly control the number of its offspring. To associate each string with a unique rank, this approach sorts the strings according to their fitness values, introducing the drawback of additional overhead in the GA computation. Another mechanism is tournament selection. For selection, a string must win a competition with a randomly selected set of strings. In a k-ary tournament, the best of k strings is selected for the next generation. In either proportionate selection (with or without scaling) or rank-based selection, the expected number of offspring is not an integer, although only integer numbers of offspring may be allocated to strings. Researchers have proposed several implementations to achieve a distribution of offspring very close to the expected numbers of offspring. Considerable research has focused on improving GA performance. Innovations include distributed and parallel GAS. The stochastic remainder technique deterministically assigns offspring to strings based on the integer part of the expected number of offspring. It allocates the fractional parts in a roulette wheel selection (stochastic selection) to the remaining offspring, thus restricting randomness to only the fractional parts of the expected numbers of offspring. Each iteration of the simple GA creates an entirely new population from an existing population. GAS that replace the entire population are called generational GAS. GAS that replace only a small fraction of strings at a time are called steady-state GAS. Typically, new strings created through recombination replace the worst strings (strings with the lowest fitness values). Functionally, steady-state GAS differ from generational GAS in their use of populational elitism (preservation of the best strings), large population sizes, and high probabilities of crossover and mutation. The elitist selection strategy balances the disruptive effects of high crossover and mutation rates. Crossover mechanisms. Because of their importance to GA functioning, much of the literature has been devoted to different crossover techniques and their analysis. This section discusses the important techniques. Traditionally, GA researchers set the number of crossover points at one or two. In the two-point crossover scheme, two crossover points are randomly chosen and segments of the strings between them are exchanged. Two-point crossover eliminates the single-point crossover bias toward bits at the ends of strings. An extension of the two-point scheme, the multipoint crossover, treats each string as a ring of bits divided by k crossover points into k segments. One set of alternate segments is exchanged between the pair of strings to be crossed. Uniform crossover exchanges bits of a string rather than segments. At each string position, the bits are probabilistically exchanged with some fixed probability. The exchange of bits at one string position is independent of the exchange at other positions. Recent GA literature has compared various techniques, particularly singlepoint and two-point crossover on the one hand, and uniform crossover on the other. To classify techniques, we can use the notions of positional and distributional biases. A crossover operator has positional bias if the probability that a bit is swapped depends on its position in the string. Distributional bias is related to the number of bits exchanged by the crossover operator. If the distribution of the number is nonuniform, the crossover operator has a distributional bias. Among the various crossover operators, single-point crossover exhibits the maximum positional bias and the least distributional bias. Uniform crossover, at the other end of the spectrum, has maximal distributional bias and minimal positional bias. Empirical and theoretical studies have compared the merits of various crossover operators, particularly two-point and uniform crossover. At one end, uniform crossover swaps bits irrespective of their position, but its higher disruptive nature often becomes a drawback. Two-point and single-point crossover preserve schemata because of their low disruption rates, but they become less exploratory when the population becomes homogeneous. A related issue is the interplay between the population size and the type of crossover. Empirical evidence suggests that uniform crossover is more suitable 22 -- COMPUTER Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. for small populations, while for larger populations, the less disruptive two-point crossover is better. Uniform crossover’s disruptiveness helps sustain a highly explorative search in small populations. The inherent diversity in larger populations reduces the need for exploration and makes two-point crossover more suitable. A rather controversial issue strikes at the heart of GA workings: Is crossover an essential search mechanism, or is mutation alone sufficient for efficient search? Experimental evidence shows that for some objective functions mutation alone can locate the optimal solu- Increasing the population size increases its diversity and reduces the probability that the GA will prematurely converge to a local optimum, but it also increases the time required for the population to converge to the optimal regions in the search space. We cannot choose control parameters until we consider the interactions between the genetic operators. Because they cannot be determined independently, the choice of the control parameters itself can be a complex nonlinear op- Encodings. Critical to GA performance is the choice of the underlying encoding for solutions of the optimization problem. Traditionally, binary encodings have been used because they are easy to implement and maximize the number of schemata processed. The crossover and mutation operators described in the previous sections are specific only to binary encodings. When alphabets other than [OJ] are used, the crossover and mutation operators must be tailored appropriately. A large number of optimization problems have continuous variables that assume real values. A common technique tions, while for objective functions in- for encoding continuous variables in the volving high epistaticity (nonlinear binary alphabet uses a fixed-point inteinteractions among the bits of the ger encoding - each variable is encoded strings), crossover performs a faster Nontraditional using a fixed number of binary bits. The search than mutation. On the other hand, techniques including binary codes of all the variables are concrossover has long been accepted as more catenated to obtain the strings of the useful when optimal solutions can be con- dynamic and population. A drawback of encoding structed by combining building blocks adaptive strategies variables as binary strings is the presence of Hamming cliffs: large Hamming distances between the binary codes of adja- (schemata with short defining lengths and high average fitness values), indicating which requires linear interactions among proposed to improve cent integers. For example, 01111 and the string bits. The question is whether performance. lo000 are the integer representations of the experimental evidence and the gen- 15 and 16, respectively, and have a Hamera1 consensus about the utility of ming distance of 5. For the GA to imhave also been crossover are contradictory. Or is crossover beneficial in most objective functions that have either linear or nonlinear interactions? These questions are far from being resolved, and considerable theoretical and empirical evidence must be gathered before any definite conclusions can be drawn. Control parameters. We can visualize the functioning of GAS as a balanced combination of exploration of new regions in the search space and exploitation of already sampled regions. This balance, which critically controls the performance of GAS, is determined by the right choice of control parameters: the crossover and mutation rates and the population size. The choice of the optimal control parameters has been debated in both analytical and empirical investigations. Here we point out the trade-offs that arise: Increasing the crossover probability increases recombination of building blocks, but it also increases the disruption of good strings. Increasing the mutation probability tends to transform the genetic search into a random search, but it also helps reintroduce lost genetic material. timization problem. Further, it is becoming evident that the optimal control parameters critically depend on the nature of the objective function. Although the choice of optimal control parameters largely remains an open issue, several researchers have proposed control parameter sets that guarantee good performance on carefully chosen testbeds of objective functions. Two distinct parameter sets have emerged: One has a small population size and relatively large mutation and crossover probabilities, while the other has a larger population size, but much smaller crossover and mutation probabilities. Typical of these two categories are crossover rate: 0.6, mutation rate: crossover rate: 0.9, mutation rate: 0.001, population size: and 0.01, population size: 30.8 The first set of parameters clearly gives mutation a secondary role, while the second makes it more significant. The high crossover rate of 0.9 in the second set also indicates that a high level of string disruption is desirable in small populations. prove the code of 15 to that of 16, it must alter all bits simultaneously. Such Hamming cliffs present a problem for the GA, as both mutation and crossover cannot overcome them easily. Gray codes suggested to alleviate the problem ensure that the codes for adjacent integers always have a Hamming distance of l. However, the Hamming distance does not monotonously increase with the difference in integer values, and this phenomenon introduces Hamming cliffs at other levels. Nontraditional techniques in GAS. The previous sections described selection and crossover techniques developed as natural extensions of the simple GA. Hence the techniques still have the traditional mold: binary encodings, statically defined control parameters, and fixed-length encodings. Recently, a wide spectrum of variants has broken away from the traditional setup. The motivation has been the performance criterion: to achieve better GA performance on a wide range of application problems. We refer to these as nontraditional techniques. Dynamic and adaptive strategies. In practical situations, the static configurations of control parameters and encod- June 1994 ’ 23 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. 1 ings in GAS have some drawbacks. Parameter settings optimal in the earlier stages of the search typically become inefficient during the later stages. Similarly, encodings become too coarse as the search progresses, and the fraction of the search space that the GA focuses its search on becomes progressively smaller. To overcome these drawbacks, several dynamic and adaptive strategies for varying the control parameters and encodings have been proposed. One strategy exponentially decreases mutation rates with increasing numbers of generations, to gradually decrease the search rate and disruption of strings as the population converges in the search space. Another approach considers dynamically modifying the rates at which the various genetic operators are used, based on their performance. Each operator is evaluated for the fitness values of strings it generates in subsequent generations. Very often, after a large fraction of the population has converged (the strings have become homogeneous), crossover becomes ineffective in searching for better strings. Typically, low mutation rates (0.001 to 0.01) are inadequate for continuing exploration. In such a situation, a dynamic approach for varying mutation rates based on the Hamming distance between strings to be crossed can be useful. The mutation rate increases as the Hamming distance between strings decreases. As the strings to be crossed resemble each other to a greater extent, the capacity of crossover to generate new strings decreases, but the increased mutation rate sustains the search. The dynamic encoding of variables in several implementations (DPE, Argot, and Delta Encoding) increases the search resolution as the GA converges. While strings are encoded using the same number of bits, the size of the search space in which strings are sampled is progressively reduced to achieve a higher search resolution. Another adaptive strategy of encoding (“messy” GAS) explicitly searches loworder, high-fitness value schemata in the initial stages and then juxtaposes the building blocks with a splicing operator to form optimal strings. This technique has successfully optimized deceptive functions, which can cause the Simple GA to converge to local optima. Distributed and parallel GAS. Distributed GAS and parallel GAS decentralize the processing of strings. Although they sound similar, the two approaches are basically different. Distributed GAS have a number of weakly interacting subpopulations, and each carries out an independent search. Parallel GAS are parallel implementations of the “sequential” GA on several computation engines to speed execution. Distributed GAS distribute a large population into several smaller subpopulations that evolve independently. Thus, Researchers are developing models of GA dynamics, analyzing problems difficult for GAS, and studying how GAS work. the exploration arising from a large population is evident, but the convergence rates of the subpopulations are also high. To ensure global competition among strings, the best strings of the subpopulations are exchanged. A distributed GA can be implemented on a single computation engine or in parallel with each subpopulation processed by a different engine. Parallel GAS have emerged primarily to enable execution on parallel computers. Issues such as local and global communication, synchronization, and efficacy of parallel computation have led to modifications of the GA structure. Techniques such as local-neighborhood selection have been introduced to increase computation speed. Advances in theory The emergence of new GA implementations for better performance has been accompanied by considerable theoretical research, especially in developing models of GA dynamics, analyzing problems that are hard for GAS, and, most important, gaining a deeper understanding of how GAS work. To analyze the working of the simple GA, Holland compared it with the karmed bandit problem.’ This problem discusses the optimal allocation of trials among k alternatives, each of which has a different payoff, to maximize the total payoff in a fixed number of trials. The payoff of each alternative is treated as a random variable. The distribution of payoffs from the different alternatives is not known a priori and must be characterized based on the payoffs observed during the trials. Holland demonstrated that the GA simultaneously solves a number of such k-armed bandit problems. Consider the competition among schemata of order m that have the same fixed positions. There are 2m competing schemata, and the GA allocates trials to them to locate the fittest. Totally, there are 2‘ ( I is the string length) such competitions occurring in parallel, with the GA attempting to solve all simultaneously. The exponential allocation of trials to the fittest strings by the GA is a near optimal allocation strategy, as it resembles the optimal solution to the k-armed bandit p r ~ b l e m . ~ The schema theorem’ calculates a lower bound on the expected number of schemata under the action of selection, crossover, and mutation. Although the schema theorem captures the essence of the GA mechanism, its applicability in estimating the proportions of various schemata in the population is limited. Attempts to refine the schema theorem model the effects of crossover between instances of the same schema. To make the schema theorem more useful, expressions for the percentage of schema instances generated by crossover and mutation have been derived. The additional terms have extended the inequality of the schema theorem into an equation. However, the abstract nature of the calculations involved in computing these terms reduces the applicability of the schema “equation.” A generalization of schemata defined by Holland has been proposed. It views as a predicate the condition for a string to be included as an instance of a schema. This general definition allows 22‘ predicates to exist, compared with the 3‘ Holland schemata for strings of length 1. While the schema theorem remains valid for these generalized predicates, we can study several new interesting properties regarding their stability and dominance under the action of the genetic operators. 24 COMPUTER Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. I GA dynamics. The GA’s population dynamics are controlled by the parameters population size, mutation rate, and crossover rate. Characterizing the dynamics - not a simple task - is important for understanding the conditions under which the GA converges to the global optimum. Most work related to the dynamics of GAS looks at convergence results from one of two perspectives: (1) finite versus infinite population re- (2) homogeneous versus inhomogesults, or neous convergence results. The first classification is self-explanatory. The second arises from the state-transition probabilities of the Markov processes that model the GA. If the statetransition probabilities are invariant over generations, we have a homogeneous Markov chain. For the finite population case, we can consider each distinct population as a possible state of a Markov chain, with the state-transition matrix indicating the probabilities of transitions between the populations due to the genetic operators. When the mutation probability is not zero, every population can be reached from every other population with some nonzero probability. This property guarantees the existence of a unique fixed point (a limiting distribution) for the distribution of populations. For a zero mutation probability (with only selection and crossover), any population consisting of multiple copies of a single string is a possible fixed point of the random process modeling the GA. Consider a nonstandard replacement operator after crossover that ensures the following property: For every bit position i there exist strings in the population having a 0 and a 1 at the position i. With this we can show that every population is reachable in a finite number of generations. The replacement operator substitutes one of the strings in the population with another string so the population satisfies the defined property. Further, the property also guarantees convergence of the GA to the global optimum with the probability of 1.0. While these results summarize the homogeneous case, the main inhomogeneous result for finite populations is the demonstration of an exponential annealing schedule that guarantees convergence of the GA to one of the fixed points of the homogeneous case without mutation. However, this does not mean that the population corresponding to this fixed point contains only the global optimum. Empirical evidence suggests that as the population size increases, the probability mass of the limit distributions is concentrated at the optimal populations. In infinite populations, we need model only the proportions of strings. We can model the evolution of populations as the We are faced with an important question: what problems mislead GAS to local optima? interleaving of a quadratic operator representing crossover and mutation, and a linear operator representing selection. When only selection and crossover are considered, all limit points of the probability distribution have mass only at the most fit strings. With mutation and uniform selection, the uniform distribution is the unique fixed point. Although it is important to establish the global convergence of GAS, it is equally important to have GAS with good rates of convergence to the global optimum. We believe that a major direction for future research on the dynamics of GAS is the establishment of bounds on the convergence rates of the GA under various conditions. Deception. An important control on the dynamics of GAS is the nature of the search landscape. We are immediately confronted with a question: What features in search landscapes can GAS exploit efficiently? Or more to the point: What problems mislead GAS to local optima? GAS work by recombining low-order, short schemata with above-average fitness values to form high-order schemata. If the low-order schemata contain the globally optimal solution, then the GA can potentially locate it. However, with functions for which the low-order highfitness value schemata do not contain the optimal string as an instance, the GA could converge to suboptimal strings. Such functions are called de c ept i~eR.~ecently, considerable research has focused on the analysis and design of deceptive functions. The simplest deceptive function is the minimaf deceptive problem, a two-bit function. Assuming that the string “11” represents the optimal solution, the following conditions characterize this problem: The lower order schemata O* or *O do not contain the optimal string 11 as an instance and lead the GA away from 11. The minimal deceptive problem is a partially deceptive function, as both conditions of Equation 2 are not satisfied simultaneously. In a fully deceptiveproblem, all the lower order schemata that contain the optimal string have lower average fitness values than their competitors (other schemata with the same fixed positions). The minimal deceptive problem can easily be extended to higher string lengths. GA literature abounds with analyses of deceptive functions, conditions for problems to be deceptive, and ways of transforming deceptive functions into nondeceptive ones. Some recent studies have investigated the implications of GA deceptiveness in the context of problems that are hard - that is, difficult for GAS to optimize. While it appears that a deceptive objective function offers some measure of difficulty for GAS, there has been some recent consensus that deception is neither a sufficient nor a necessary condition for a problem to be hard. At the heart of this argument is the observation that the definition of deception in GAS derives from a static hyperplane analysis which does not account for the potential difference of GAS’ dynamic behavior from static predictions. Empirical work shows that some nondeceptive functions cannot be optimized easily by GAS, while other deceptive functions are easily optimized. Essentially, other features such as improper problem representations, the disruptive nature of crossover and mutation, finite population sizes, and multimodal landscapes could be potential causes of hardness. June 1994 25 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply. 1 nvented in the early 1970s, genetic algorithms only recently have gained considerable popularity as general-purpose robust optimization and search techniques. The failure of traditional optimization techniques in searching complex, uncharted and vast-payoff landscapes riddled with multimodality and complex constraints has generated interest in alternate approaches. Genetic algorithms are particularly attractive because instead of a naive “search and select” mechanism they use crossover to exchange information among existing solutions to locate better solutions. Despite the algorithms’ success, some open issues remain: the choice of control parameters, the exact roles of crossover and mutation, the characterization of search landscapes amenable to optimization, and convergence properties. Limited empirical evidence points to the efficacy of distributed and parallel GAS and the adaptive strategies for varying control parameters. However, more experimental evidence is needed before we draw any definite conclusions about comparative performance. GAS are emerging as an independent discipline, but they demand considerable work in the practical and theoretical domains before they will be accepted at large as alternatives to traditional optimization techniques. We hope this article stimulates interest in GAS and helps in their establishment as an independent approach for optimization and search. W References 1. J.H. Holland, Adaptation in Natural and Artificial Systems, Univ. of Michigan Press, Ann Arbor, Mich., 1975. 2. S. Kirkpatrick, C.D. Gelatt, and M.P. Vecchi, “Optimization by Simulated Annealing,” Science, Vol. 220, No. 4598, May 1983, pp. 671-681. 3. I. Rechenberg, Evolutionsstrategie: Optimierung technischer Systeme nach Prinzipien der biologische Evolution [Evolutionary Strategy: Optimization of Technical Systems According IO the Principles of Biological Evolution], Frommann Holzboog Verlag, Stuttgart, Germany, 1973. 4. H.P. Schwefel, Numerical Optimization of Computer Models, Wiley, Chichester, UK, 1981. 5. K.A. DeJong, An Analysis of the Behavior of a Class of Genetic Adaptive Systems, doctoral dissertation, Univ. of Michigan, Ann Arbor, Mich., 1975. 6. S. Forrest and M. Mitchell, “What Makes a Problem Hard for a Genetic Algorithm? Some Anomalous Results and their Explanation,” in Machine Learning, Vol. 13, 1993, pp. 285-319. 7. D.E. Goldberg, Genetic Algorithms in Search, Optimization and Machine Learning, Addison-Wesley, Reading, Mass., 1989. 8. J.J. Grefenstette, “Optimization of Control Parameters for Genetic Algorithms,” IEEE Trans. Systems, Man, and Cybernetics, Vol.SMC-16, No. 1, Jan./Feb. 1986, pp. 122-128. 9. H. Muhlenbein et al., “The Parallel GA as a Function Optimizer,” Proc. Fourth Int’l Conf Genetic Algorithms, Morgan Kaufmann, San Mateo, Calif., 1991, pp. 279-288. 10. J.D. Schaffer et al., “A Study of Control Parameters Affecting On-line Performance of Genetic Algorithms for Function Optimization,” Proc. Third Znt’l Con$ Genetic Algorithms, Morgan Kdufmann, San Mateo, Calif., 1989, pp. 51-60. 1. M. Srinivas and L.M. Patnaik, “Adaptive Probabilities of Crossover and Mutation in Genetic Algorithms,” ZEEE Trans. Systems, Man, and Cybernetics, Apr. 1994. 2. M. Srinivas and L.M. Patnaik, “Binomially Distributed Populations for Modeling Genetic Algorithms,” Proc. Fifth Int’l Con$ Genetic Algorithms, Morgan Kaufmann, San Mateo, Calif., 1993, pp. 138- 145. 13. D. Whitley and T. Starkweather, “Genitor- 11: A Distributed Genetic Algorithm,” J. Experimental Theoretical Artificial Intelligence, Vol. 2,1990, pp. 189-214. 14. L. Davis, ed., Handbook of Genetic Algorithms, Van Nostrand Reinhold, New York, 1991. 15. Z. Michalewicz, Genetic Algorithms + Data Structures = Evolutionary Programs, Springer-Verlag, Berlin, 1992. 16. K.A. DeJong and W.M. Spears, “An Analysis of the Interacting Roles of Population Size and Crossover in Genetic Algorithms,” Proc. First Workshop Parallel Problem Solving from Nature, Springer- Verlag, Berlin, 1990, pp. 38-47. M. Srinivas is employed at Motorola India Electronics Ltd., where his research interests are in theory and design of genetic algorithms, neural networks, stochastic optimization, and optimization in VLSI CAD algorithms. He has also worked for the Centre for Development of Advanced Computing. Srinivas is a PhD candidate in computer science and automation at the Indian Institute of Science, Bangalore. Lalit M. Patnaik is a professor in the Electrical Sciences Division of the Indian Institute of Science, where he directs a research group in the Microprocessor Applications Laboratory. His teaching, research, and development interests are in parallel and distributed computing, computer architecture, computer-aided design of VLSI systems, computer graphics, theoretical computer science, real-time systems, neural computing, and genetic algorithms. In the areas of parallel and distributed computing and neural computing, he has been a principal investigator for government-sponsored research projects and a consultant to industry. Patnaik received his PhD for work in realtime systems in 1978 and his DSc in computer systems and architectures in 1989, both from the Indian Institute of Science. He is a fellow of the IEEE, Indian National Science Academy, Indian Academy of Sciences, National Academy of Sciences, and Indian National Academy of Engineering. For the last two years, he has served as chair of the IEEE Computer Society chapter, Bangalore section. Srinivas can be reached at Motorola India Electronics Ltd., No. 1, St. Marks Road, Bangalore 560 001, India; e-mail: msriniemaster. miel.mot.com. Patnaik can be contacted at the Microprocessor Applications Laboratory, Indian Institute of Science, Bangalore 560 012, India; e-mail: lalit@micro.iisc.ernet.in. COMPUTER Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:34 UTC from IEEE Xplore. Restrictions apply.","['genetic', 'algorithms', 'provide', 'alternative', 'traditional', 'optimization', 'techniques', 'directed', 'random', 'searches', 'locate', 'optimal', 'solutions', 'complex', 'landscapes', 'article', 'research', 'genetic', 'algorithms', 'survey', 'srinivas', 'india', 'electronics', 'patnaik', 'indian', 'institute', 'science', 'last', 'years', 'genetic', 'algorithms', 'emerged', 'practical', 'robust', 'optimization', 'search', 'methods', 'diverse', 'areas', 'generation', 'genetic', 'synthesis', 'vlsi', 'technology', 'strategy', 'planning', 'machine', 'learning', 'methods', 'popularity', 'genetic', 'algorithms', 'international', 'journal', 'increasing', 'mass', 'literature', 'devoted', 'theory', 'practice', 'applications', 'techniques', 'learn', 'genetic', 'algorithm', 'search', 'methods', 'mechanisms', 'evolution', 'natural', 'interest', 'heuristic', 'search', 'algorithms', 'natural', 'physical', 'processes', 'holland', 'genetic', 'algorithms', 'interest', 'simulated', 'annealing', 'technique', 'simulated', 'annealing', 'annealing', 'optimization', 'procedure', 'evolutionary', 'algorithm', 'hand', 'inspiration', 'natural', 'search', 'selection', 'processes', 'leading', 'survival', 'fittest', 'individuals', 'simulated', 'annealing', 'genetic', 'algorithms', 'evolutionary', 'strategies', 'similar', 'probabilistic', 'search', 'mechanism', 'directed', 'cost', 'increasing', 'payoff', 'methods', 'high', 'probability', 'global', 'solution', 'multimodal', 'search', 'landscape', 'multimodal', 'cost', 'function', 'several', 'optimal', 'solutions', 'method', 'different', 'mode', 'operation', 'simulated', 'annealing', 'generates', 'sequence', 'converge', 'global', 'optimum', 'evolutionary', 'strategies', 'mutations', 'search', 'mechanisms', 'selection', 'direct', 'search', 'regions', 'search', 'space', 'genetic', 'algorithms', 'generate', 'sequence', 'populations', 'selection', 'mechanism', 'crossover', 'mutation', 'search', 'mechanisms', 'difference', 'genetic', 'algorithms', 'evolutionary', 'strategies', 'genetic', 'algorithms', 'crossover', 'mechanism', 'probabilistic', 'useful', 'exchange', 'information', 'solutions', 'locate', 'solutions', 'evolutionary', 'strategies', 'mutation', 'primary', 'search', 'mechanism', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'simulated', 'annealing', 'evolutionary', 'strategies', 'genetic', 'algorithms', 'different', 'approaches', 'several', 'techniques', 'recent', 'literature', 'optimization', 'algorithms', 'derived', 'evolutionary', 'paradigm', 'demonstrated', 'considerable', 'success', 'article', 'introduce', 'art', 'science', 'genetic', 'algorithms', 'survey', 'current', 'issues', 'theory', 'practice', 'present', 'detailed', 'study', 'several', 'gas', 'quick', 'guide', 'research', 'start', 'genetic', 'algorithms', 'search', 'processes', 'nature', 'describe', 'genetic', 'algorithm', 'holland', 'introduced', 'gas', 'survey', 'techniques', 'improvements', 'holland', 'different', 'approaches', 'survey', 'advances', 'theory', 'related', 'modeling', 'dynamics', 'deception', 'genetic', 'algorithms', 'natural', 'selection', 'nature', 'individuals', 'best', 'competition', 'resources', 'survive', 'adapting', 'changing', 'environment', 'essential', 'survival', 'individuals', 'species', 'various', 'features', 'individual', 'determine', 'survival', 'capacity', 'features', 'turn', 'determined', 'individual', 'genetic', 'content', 'feature', 'controlled', 'basic', 'unit', 'called', 'gene', 'sets', 'genes', 'controlling', 'features', 'form', 'chromosomes', 'survival', 'individual', 'competitive', 'environment', 'evolution', 'changes', 'species', 'features', 'changes', 'species', 'genetic', 'material', 'form', 'essence', 'evolution', 'evolution', 'force', 'action', 'natural', 'selection', 'recombination', 'genetic', 'material', 'occurs', 'reproduction', 'nature', 'competition', 'individuals', 'resources', 'food', 'space', 'results', 'fittest', 'individuals', 'weaker', 'ones', 'fittest', 'individuals', 'survive', 'natural', 'phenomenon', 'called', 'survival', 'fittest', 'hence', 'genes', 'fittest', 'survive', 'genes', 'weaker', 'individuals', 'natural', 'selection', 'leads', 'survival', 'fittest', 'individuals', 'leads', 'survival', 'fittest', 'genes', 'reproduction', 'process', 'generates', 'diversity', 'gene', 'pool', 'evolution', 'genetic', 'material', 'chromosomes', 'parents', 'reproduction', 'combinations', 'learn', 'readers', 'information', 'genetic', 'algorithms', 'interested', 'following', 'applications', 'genes', 'generated', 'previous', 'ones', 'gene', 'pool', 'created', 'exchange', 'genetic', 'material', 'chromosomes', 'called', 'crossover', 'segments', 'parent', 'chromosomes', 'exchanged', 'crossover', 'creating', 'possibility', 'right', 'combination', 'genes', 'individuals', 'repeated', 'selection', 'crossover', 'cause', 'continuous', 'evolution', 'gene', 'pool', 'generation', 'individuals', 'survive', 'competitive', 'environment', 'holland', 'genetic', 'algorithms', 'computer', 'programs', 'evolutionary', 'processes', 'nature', 'genetic', 'algorithms', 'population', 'potential', 'solutions', 'optimization', 'search', 'problem', 'encoded', 'solutions', 'equivalent', 'genetic', 'material', 'individuals', 'nature', 'solutions', 'holland', 'genetic', 'algorithm', 'solutions', 'strings', 'bits', 'binary', 'nature', 'selection', 'provides', 'necessary', 'mechanism', 'solutions', 'survive', 'solution', 'associated', 'fitness', 'compared', 'solutions', 'population', 'higher', 'fitness', 'value', 'individual', 'higher', 'survival', 'reproduction', 'larger', 'representation', 'subsequent', 'generation', 'recombination', 'genetic', 'material', 'genetic', 'algorithms', 'simulated', 'crossover', 'mechanism', 'portions', 'strings', 'operation', 'called', 'mutation', 'causes', 'random', 'bits', 'strings', 'mutation', 'direct', 'nature', 'plays', 'role', 'lost', 'genetic', 'material', 'simple', 'genetic', 'algorithm', 'literature', 'holland', 'genetic', 'algorithm', 'called', 'simple', 'genetic', 'algorithm', 'sga', 'essential', 'sga', 'working', 'population', 'binary', 'strings', 'string', 'encoded', 'version', 'solution', 'optimization', 'problem', 'genetic', 'operators', 'crossover', 'mutation', 'algorithm', 'creates', 'subsequent', 'generation', 'strings', 'current', 'population', 'generational', 'cycle', 'computer', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'desired', 'termination', 'criterion', 'reached', 'example', 'predefined', 'number', 'generations', 'processed', 'figure', 'working', 'sga', 'following', 'components', 'population', 'binary', 'strings', 'control', 'parameters', 'fitness', 'function', 'genetic', 'operators', 'crossover', 'selection', 'mechanism', 'mechanism', 'encode', 'solutions', 'binary', 'strings', 'encoding', 'mechanism', 'fundamental', 'structure', 'encoding', 'mechanism', 'representing', 'optimization', 'variables', 'encoding', 'mechanism', 'depends', 'nature', 'problem', 'variables', 'example', 'solving', 'optimal', 'transportation', 'problem', 'variables', 'different', 'assume', 'continuous', 'values', 'variables', 'problem', 'binary', 'quantities', 'representing', 'inclusion', 'edge', 'case', 'encoding', 'mechanism', 'map', 'solution', 'unique', 'binary', 'string', 'large', 'number', 'optimization', 'problems', 'real', 'valued', 'continuous', 'variables', 'common', 'method', 'encoding', 'uses', 'integer', 'representation', 'variable', 'integer', 'defined', 'specified', 'range', 'integer', 'encoded', 'fixed', 'number', 'binary', 'bits', 'binary', 'codes', 'variables', 'obtain', 'binary', 'string', 'example', 'consider', 'continuous', 'variable', 'defined', 'range', 'encode', 'continuous', 'variable', 'accuracy', 'real', 'value', 'portion', 'product', 'value', 'variable', 'integers', 'range', 'binary', 'code', 'corresponding', 'integer', 'computed', 'fitness', 'function', 'objective', 'function', 'function', 'optimized', 'provides', 'mechanism', 'evaluating', 'string', 'range', 'values', 'problem', 'problem', 'maintain', 'various', 'problem', 'domains', 'function', 'objective', 'function', 'range', 'normalized', 'value', 'objective', 'function', 'string', 'selection', 'mechanism', 'uses', 'evaluate', 'strings', 'population', 'selection', 'selection', 'models', 'survival', 'fittest', 'mechanism', 'fitter', 'solutions', 'survive', 'weaker', 'ones', 'sga', 'fitter', 'string', 'higher', 'number', 'offspring', 'higher', 'chance', 'subsequent', 'generation', 'proportionate', 'selection', 'scheme', 'string', 'fitness', 'value', 'allocated', 'offspring', 'simple', 'genetic', 'algorithm', 'initialize', 'population', 'evaluate', 'population', 'average', 'fitness', 'value', 'population', 'string', 'fitness', 'value', 'higher', 'average', 'allocated', 'offspring', 'string', 'fitness', 'value', 'average', 'allocated', 'offspring', 'proportionate', 'selection', 'scheme', 'allocates', 'fractional', 'numbers', 'offspring', 'strings', 'hence', 'expected', 'number', 'offspring', 'final', 'allocation', 'strings', 'higher', 'number', 'offspring', 'allocation', 'methods', 'include', 'allocation', 'particular', 'set', 'strings', 'allocation', 'technique', 'controls', 'extent', 'actual', 'allocation', 'offspring', 'strings', 'expected', 'number', 'sga', 'uses', 'roulette', 'wheel', 'selection', 'implement', 'proportionate', 'selection', 'string', 'allocated', 'roulette', 'wheel', 'angle', 'center', 'wheel', 'string', 'allocated', 'offspring', 'generated', 'number', 'range', 'falls', 'corresponding', 'string', 'algorithm', 'strings', 'generated', 'entire', 'population', 'next', 'generation', 'roulette', 'wheel', 'selection', 'generate', 'large', 'sampling', 'errors', 'sense', 'final', 'number', 'offspring', 'allocated', 'string', 'vary', 'expected', 'number', 'allocated', 'number', 'offspring', 'approaches', 'expected', 'number', 'large', 'population', 'sizes', 'figure', 'simple', 'genetic', 'algorithm', 'structure', 'crossover', 'selection', 'comes', 'crossover', 'crucial', 'operation', 'strings', 'picked', 'random', 'population', 'subjected', 'crossover', 'sga', 'uses', 'simplest', 'approach', 'single', 'point', 'crossover', 'assuming', 'string', 'length', 'chooses', 'crossover', 'point', 'assume', 'values', 'range', 'portions', 'strings', 'crossover', 'point', 'exchanged', 'form', 'strings', 'crossover', 'point', 'assume', 'possible', 'values', 'equal', 'probability', 'crossover', 'choosing', 'pair', 'strings', 'algorithm', 'crossover', 'generated', 'number', 'range', 'greater', 'crossover', 'rate', 'literature', 'term', 'crossover', 'rate', 'used', 'denote', 'probability', 'crossover', 'strings', 'remain', 'value', 'lies', 'range', 'large', 'population', 'gives', 'fraction', 'strings', 'crossed', 'mutation', 'crossover', 'strings', 'subjected', 'mutation', 'mutation', 'bit', 'involves', 'changing', 'controls', 'probability', 'crossover', 'parameter', 'mutation', 'rate', 'gives', 'probability', 'bit', 'bits', 'string', 'mutated', 'mutation', 'bit', 'affect', 'probability', 'mutation', 'bits', 'sga', 'mutation', 'secondary', 'operator', 'role', 'lost', 'genetic', 'material', 'example', 'suppose', 'strings', 'population', 'converged', 'given', 'position', 'optimal', 'solution', 'position', 'crossover', 'cannot', 'position', 'mutation', 'june', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'population', 'string', 'fitness', 'value', 'population', 'selection', 'string', 'fitness', 'value', 'population', 'crossover', 'string', 'fitness', 'value', 'population', 'mutation', 'string', 'crossed', 'pair', 'strings', 'left', 'crossover', 'point', 'falls', 'fifth', 'bits', 'strings', 'portions', 'strings', 'fifth', 'bit', 'population', 'represents', 'set', 'strings', 'crossover', 'action', 'mutation', 'population', 'seen', 'population', 'bit', 'string', 'bit', 'string', 'bits', 'mutated', 'representing', 'effective', 'mutation', 'rate', 'population', 'represents', 'next', 'generation', 'effect', 'populations', 'represent', 'intermediate', 'stages', 'generational', 'cycle', 'example', 'figure', 'sga', 'uses', 'population', 'size', 'crossover', 'rates', 'mutation', 'rates', 'parameters', 'population', 'size', 'mutation', 'rate', 'crossover', 'rate', 'referred', 'control', 'parameters', 'sga', 'specified', 'execution', 'terminate', 'execution', 'sga', 'specify', 'stopping', 'criterion', 'fixed', 'number', 'generations', 'string', 'certain', 'high', 'fitness', 'value', 'located', 'strings', 'population', 'certain', 'degree', 'large', 'number', 'strings', 'identical', 'bits', 'positions', 'figure', 'generational', 'cycle', 'simple', 'genetic', 'algorithm', 'genetic', 'algorithms', 'generational', 'cycle', 'figure', 'shows', 'generational', 'cycle', 'genetic', 'algorithm', 'population', 'strings', 'bits', 'example', 'objective', 'function', 'assume', 'values', 'range', 'gives', 'number', 'string', 'fitness', 'function', 'performs', 'operation', 'objective', 'function', 'range', 'strings', 'fitness', 'values', 'proportional', 'selection', 'scheme', 'offspring', 'strings', 'case', 'final', 'allocation', 'offspring', 'figure', 'population', 'represents', 'selected', 'set', 'strings', 'next', 'strings', 'crossover', 'strings', 'form', 'pair', 'strings', 'form', 'pair', 'crossover', 'rate', 'pair', 'strings', 'successful', 'gas', 'large', 'number', 'optimization', 'problems', 'progress', 'theoretical', 'front', 'slow', 'clear', 'gas', 'emerged', 'theory', 'hypothesis', 'holland', 'goldberg', 'essence', 'mechanics', 'similarity', 'schema', 'similarity', 'describing', 'subset', 'strings', 'certain', 'words', 'schema', 'represents', 'subset', 'possible', 'strings', 'bits', 'certain', 'string', 'positions', 'example', 'consider', 'strings', 'bits', 'schema', 'represents', 'strings', 'last', 'positions', 'set', 'strings', 'schema', 'represents', 'strings', 'string', 'represented', 'schema', 'called', 'instance', 'schema', 'symbol', 'occur', 'corresponding', 'string', 'position', 'schema', 'represents', 'possible', 'strings', 'bits', 'fixed', 'schema', 'string', 'positions', 'third', 'fourth', 'fifth', 'positions', 'number', 'fixed', 'positions', 'schema', 'order', 'order', 'schema', 'defining', 'length', 'distance', 'fixed', 'positions', 'hence', 'defining', 'length', 'defining', 'length', 'specific', 'string', 'instance', 'schemata', 'string', 'length', 'schema', 'represents', 'subset', 'strings', 'associate', 'fitness', 'value', 'schema', 'average', 'fitness', 'schema', 'given', 'population', 'determined', 'average', 'fitness', 'instances', 'schema', 'hence', 'schema', 'average', 'fitness', 'value', 'population', 'composition', 'generation', 'competition', 'schemata', 'important', 'consider', 'schema', 'fixed', 'positions', 'schemata', 'fixed', 'positions', 'obtained', 'considering', 'positions', 'fixed', 'positions', 'distinct', 'schemata', 'generate', 'possible', 'strings', 'set', 'fixed', 'positions', 'generates', 'schema', 'competition', 'survival', 'competition', 'schemata', 'possible', 'combinations', 'fixed', 'positions', 'distinct', 'schema', 'competitions', 'possible', 'execution', 'generates', 'simultaneous', 'schema', 'competitions', 'attempts', 'solve', 'schema', 'competitions', 'locate', 'best', 'schema', 'set', 'fixed', 'positions', 'search', 'optimal', 'string', 'simultaneous', 'competition', 'schemata', 'increase', 'number', 'instances', 'population', 'describe', 'optimal', 'string', 'schemata', 'short', 'defining', 'lengths', 'high', 'average', 'fitness', 'values', 'individual', 'schema', 'competitions', 'form', 'optimal', 'string', 'schemata', 'high', 'fitness', 'values', 'small', 'defining', 'lengths', 'called', 'building', 'blocks', 'computer', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'strings', 'high', 'fitness', 'values', 'located', 'sampling', 'building', 'blocks', 'high', 'fitness', 'values', 'combining', 'building', 'blocks', 'called', 'building', 'hypothesis', 'building', 'blocks', 'genetic', 'operators', 'crossover', 'mutation', 'generate', 'promote', 'building', 'blocks', 'form', 'optimal', 'strings', 'crossover', 'tends', 'genetic', 'information', 'present', 'strings', 'crossed', 'strings', 'crossed', 'similar', 'capacity', 'generate', 'building', 'blocks', 'mutation', 'operator', 'generate', 'building', 'blocks', 'selection', 'provides', 'bias', 'building', 'blocks', 'higher', 'fitness', 'values', 'ensures', 'increase', 'representation', 'generation', 'generation', 'gas', 'crucial', 'unique', 'operation', 'building', 'blocks', 'achieved', 'crossover', 'mechanics', 'building', 'hypothesis', 'building', 'blocks', 'yields', 'strings', 'true', 'depending', 'nature', 'objective', 'function', 'bad', 'strings', 'generated', 'building', 'blocks', 'combined', 'objective', 'functions', 'referred', 'deceptive', 'functions', 'studied', 'discuss', 'detail', 'section', 'schema', 'theorem', 'consider', 'effects', 'selection', 'crossover', 'mutation', 'rate', 'instances', 'schema', 'increase', 'generation', 'generation', 'proportionate', 'selection', 'increases', 'decreases', 'number', 'relation', 'average', 'fitness', 'value', 'schema', 'crossover', 'schema', 'high', 'average', 'fitness', 'value', 'schema', 'competition', 'high', 'average', 'fitness', 'value', 'sufficient', 'high', 'rate', 'schema', 'short', 'defining', 'length', 'crossover', 'disruptive', 'higher', 'defining', 'length', 'schema', 'higher', 'probability', 'crossover', 'point', 'fall', 'fixed', 'positions', 'instance', 'schemata', 'high', 'fitness', 'values', 'small', 'defining', 'lengths', 'essence', 'schema', 'theorem', 'holland', 'fundamental', 'theorem', 'algorithms', 'following', 'equation', 'schema', 'theorem', 'average', 'fitness', 'value', 'schema', 'generation', 'average', 'fitness', 'value', 'population', 'generation', 'crossover', 'probability', 'mutation', 'probability', 'defining', 'length', 'schema', 'order', 'schema', 'expected', 'number', 'instances', 'schema', 'generation', 'number', 'bit', 'positions', 'string', 'factor', 'gives', 'probability', 'instance', 'schema', 'crossover', 'gives', 'probability', 'instance', 'mutation', 'building', 'blocks', 'high', 'rate', 'single', 'generational', 'cycle', 'processes', 'strings', 'population', 'size', 'schemata', 'capacity', 'gas', 'process', 'large', 'number', 'schemata', 'called', 'arises', 'fact', 'string', 'represents', 'different', 'schemata', 'modifications', 'sga', 'last', 'decade', 'considerable', 'research', 'focused', 'improving', 'performance', 'efficient', 'implementations', 'proportionate', 'selection', 'scheme', 'stochastic', 'remainder', 'technique', 'stochastic', 'sampling', 'technique', 'reduce', 'sampling', 'errors', 'selection', 'mechanisms', 'rank', 'selection', 'elitist', 'strategies', 'steady', 'state', 'selection', 'tournament', 'selection', 'alternatives', 'proportional', 'selection', 'crossover', 'mechanisms', 'point', 'multipoint', 'uniform', 'improvements', 'traditional', 'single', 'point', 'crossover', 'technique', 'gray', 'codes', 'dynamic', 'encoding', 'overcome', 'problems', 'associated', 'integer', 'encoding', 'traditional', 'static', 'control', 'parameters', 'adaptive', 'techniques', 'vary', 'control', 'parameters', 'crossover', 'mutation', 'rates', 'significant', 'innovations', 'include', 'distributed', 'genetic', 'algorithms', 'parallel', 'genetic', 'algorithms', 'rest', 'section', 'selection', 'mechanisms', 'scaling', 'proportionate', 'selection', 'scheme', 'allocates', 'offspring', 'ratio', 'string', 'fitness', 'value', 'population', 'average', 'fitness', 'value', 'initial', 'generations', 'population', 'low', 'average', 'fitness', 'value', 'presence', 'strings', 'high', 'fitness', 'values', 'causes', 'proportionate', 'selection', 'scheme', 'large', 'number', 'offspring', 'population', 'premature', 'convergence', 'different', 'problem', 'arises', 'stages', 'population', 'converged', 'variance', 'string', 'fitness', 'values', 'becomes', 'small', 'proportionate', 'selection', 'scheme', 'allocates', 'equal', 'numbers', 'offspring', 'strings', 'force', 'strings', 'scaling', 'mechanisms', 'selection', 'schemes', 'overcome', 'problems', 'june', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'scaling', 'fitness', 'values', 'involves', 'string', 'fitness', 'values', 'linear', 'scaling', 'scaled', 'fitness', 'value', 'fitness', 'value', 'scaled', 'fitness', 'value', 'chosen', 'calculated', 'generation', 'ensure', 'maximum', 'value', 'scaled', 'fitness', 'value', 'small', 'number', 'times', 'average', 'fitness', 'value', 'population', 'maximum', 'number', 'offspring', 'allocated', 'string', 'scaled', 'fitness', 'values', 'become', 'negative', 'strings', 'fitness', 'values', 'smaller', 'average', 'fitness', 'population', 'cases', 'avoid', 'negative', 'fitness', 'values', 'overcome', 'problem', 'negative', 'scaled', 'fitness', 'values', 'competition', 'scheme', 'considering', 'standard', 'deviation', 'fitness', 'values', 'scaling', 'hence', 'fitness', 'values', 'strings', 'determined', 'follows', 'average', 'fitness', 'value', 'population', 'standard', 'deviation', 'fitness', 'values', 'population', 'small', 'constant', 'ranging', 'strings', 'fitness', 'values', 'standard', 'deviations', 'average', 'fitness', 'value', 'discarded', 'approach', 'ensures', 'strings', 'population', 'fitness', 'values', 'standard', 'deviations', 'average', 'considered', 'selection', 'strings', 'cause', 'negative', 'scaled', 'fitness', 'values', 'discarded', 'alternate', 'avoid', 'problems', 'proportional', 'selection', 'rank', 'selection', 'uses', 'fitness', 'value', 'rank', 'strings', 'offspring', 'scaled', 'fitness', 'values', 'vary', 'rank', 'string', 'absolute', 'fitness', 'value', 'string', 'control', 'number', 'offspring', 'associate', 'string', 'unique', 'rank', 'approach', 'strings', 'according', 'fitness', 'values', 'introducing', 'drawback', 'additional', 'computation', 'mechanism', 'tournament', 'selection', 'selection', 'string', 'competition', 'selected', 'set', 'strings', 'tournament', 'best', 'strings', 'selected', 'next', 'generation', 'proportionate', 'selection', 'scaling', 'rank', 'selection', 'expected', 'number', 'offspring', 'integer', 'integer', 'numbers', 'offspring', 'allocated', 'strings', 'researchers', 'several', 'implementations', 'achieve', 'distribution', 'offspring', 'expected', 'numbers', 'offspring', 'considerable', 'research', 'focused', 'improving', 'performance', 'innovations', 'include', 'distributed', 'parallel', 'gas', 'stochastic', 'remainder', 'technique', 'offspring', 'strings', 'integer', 'part', 'expected', 'number', 'offspring', 'allocates', 'fractional', 'parts', 'roulette', 'wheel', 'selection', 'stochastic', 'selection', 'remaining', 'offspring', 'fractional', 'parts', 'expected', 'numbers', 'offspring', 'iteration', 'simple', 'creates', 'population', 'existing', 'population', 'gas', 'replace', 'entire', 'population', 'called', 'generational', 'gas', 'gas', 'replace', 'small', 'fraction', 'strings', 'called', 'steady', 'state', 'gas', 'strings', 'created', 'recombination', 'replace', 'worst', 'strings', 'strings', 'fitness', 'values', 'steady', 'state', 'gas', 'differ', 'generational', 'gas', 'elitism', 'preservation', 'best', 'strings', 'large', 'population', 'sizes', 'high', 'probabilities', 'crossover', 'mutation', 'elitist', 'selection', 'strategy', 'disruptive', 'effects', 'high', 'crossover', 'mutation', 'rates', 'crossover', 'mechanisms', 'importance', 'functioning', 'much', 'literature', 'devoted', 'different', 'crossover', 'techniques', 'analysis', 'section', 'discusses', 'important', 'techniques', 'researchers', 'set', 'number', 'crossover', 'points', 'point', 'crossover', 'scheme', 'crossover', 'points', 'chosen', 'segments', 'strings', 'exchanged', 'point', 'crossover', 'single', 'point', 'crossover', 'bias', 'bits', 'ends', 'strings', 'extension', 'point', 'scheme', 'multipoint', 'crossover', 'string', 'ring', 'bits', 'divided', 'crossover', 'points', 'segments', 'set', 'alternate', 'segments', 'exchanged', 'pair', 'strings', 'crossed', 'uniform', 'crossover', 'bits', 'string', 'segments', 'string', 'position', 'bits', 'exchanged', 'fixed', 'probability', 'exchange', 'bits', 'string', 'position', 'independent', 'exchange', 'positions', 'recent', 'literature', 'compared', 'various', 'techniques', 'point', 'crossover', 'hand', 'uniform', 'crossover', 'techniques', 'positional', 'distributional', 'crossover', 'operator', 'positional', 'bias', 'probability', 'bit', 'depends', 'position', 'string', 'distributional', 'bias', 'related', 'number', 'bits', 'exchanged', 'crossover', 'operator', 'distribution', 'number', 'crossover', 'operator', 'distributional', 'bias', 'various', 'crossover', 'operators', 'single', 'point', 'crossover', 'maximum', 'positional', 'bias', 'least', 'distributional', 'bias', 'uniform', 'crossover', 'end', 'maximal', 'distributional', 'bias', 'minimal', 'positional', 'bias', 'empirical', 'theoretical', 'studies', 'compared', 'various', 'crossover', 'operators', 'point', 'uniform', 'crossover', 'end', 'uniform', 'crossover', 'bits', 'position', 'higher', 'disruptive', 'nature', 'becomes', 'drawback', 'point', 'single', 'point', 'crossover', 'preserve', 'schemata', 'low', 'disruption', 'rates', 'become', 'population', 'becomes', 'homogeneous', 'related', 'issue', 'population', 'size', 'type', 'crossover', 'empirical', 'evidence', 'suggests', 'uniform', 'crossover', 'suitable', 'computer', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'small', 'populations', 'larger', 'populations', 'disruptive', 'point', 'crossover', 'uniform', 'crossover', 'helps', 'explorative', 'search', 'small', 'populations', 'inherent', 'diversity', 'larger', 'populations', 'reduces', 'need', 'exploration', 'makes', 'point', 'crossover', 'suitable', 'issue', 'crossover', 'essential', 'search', 'mechanism', 'mutation', 'sufficient', 'efficient', 'search', 'experimental', 'evidence', 'shows', 'objective', 'functions', 'mutation', 'locate', 'optimal', 'increasing', 'population', 'size', 'increases', 'diversity', 'reduces', 'probability', 'converge', 'local', 'optimum', 'increases', 'required', 'population', 'converge', 'optimal', 'regions', 'search', 'space', 'cannot', 'choose', 'control', 'parameters', 'consider', 'interactions', 'genetic', 'operators', 'cannot', 'determined', 'choice', 'control', 'parameters', 'complex', 'nonlinear', 'encodings', 'critical', 'performance', 'choice', 'underlying', 'encoding', 'solutions', 'optimization', 'problem', 'binary', 'encodings', 'used', 'easy', 'implement', 'maximize', 'number', 'schemata', 'processed', 'crossover', 'mutation', 'operators', 'described', 'previous', 'sections', 'specific', 'binary', 'encodings', 'used', 'crossover', 'mutation', 'operators', 'tailored', 'large', 'number', 'optimization', 'problems', 'continuous', 'variables', 'assume', 'real', 'values', 'common', 'technique', 'objective', 'functions', 'encoding', 'continuous', 'variables', 'high', 'nonlinear', 'binary', 'uses', 'fixed', 'point', 'bits', 'encoding', 'variable', 'encoded', 'strings', 'crossover', 'performs', 'faster', 'fixed', 'number', 'binary', 'bits', 'search', 'mutation', 'hand', 'techniques', 'including', 'binary', 'codes', 'variables', 'accepted', 'obtain', 'strings', 'useful', 'optimal', 'solutions', 'con', 'dynamic', 'population', 'drawback', 'encoding', 'combining', 'building', 'blocks', 'adaptive', 'strategies', 'variables', 'binary', 'strings', 'presence', 'hamming', 'large', 'hamming', 'distances', 'binary', 'codes', 'schemata', 'short', 'defining', 'lengths', 'high', 'average', 'fitness', 'values', 'indicating', 'requires', 'linear', 'interactions', 'improve', 'integers', 'example', 'string', 'bits', 'question', 'performance', 'integer', 'experimental', 'evidence', 'distance', 'crossover', 'crossover', 'objective', 'functions', 'linear', 'nonlinear', 'interactions', 'considerable', 'theoretical', 'empirical', 'evidence', 'conclusions', 'drawn', 'control', 'parameters', 'functioning', 'gas', 'combination', 'exploration', 'regions', 'search', 'space', 'exploitation', 'sampled', 'regions', 'balance', 'controls', 'performance', 'gas', 'determined', 'right', 'choice', 'control', 'parameters', 'crossover', 'mutation', 'rates', 'population', 'size', 'choice', 'optimal', 'control', 'parameters', 'analytical', 'empirical', 'point', 'increasing', 'crossover', 'probability', 'increases', 'recombination', 'building', 'blocks', 'increases', 'disruption', 'strings', 'increasing', 'mutation', 'probability', 'tends', 'genetic', 'search', 'random', 'search', 'helps', 'lost', 'genetic', 'material', 'problem', 'evident', 'optimal', 'control', 'parameters', 'depend', 'nature', 'objective', 'function', 'choice', 'optimal', 'control', 'parameters', 'remains', 'open', 'issue', 'several', 'researchers', 'control', 'parameter', 'sets', 'guarantee', 'performance', 'chosen', 'objective', 'functions', 'distinct', 'parameter', 'sets', 'emerged', 'small', 'population', 'size', 'large', 'mutation', 'crossover', 'probabilities', 'larger', 'population', 'size', 'much', 'smaller', 'crossover', 'mutation', 'probabilities', 'typical', 'categories', 'crossover', 'rate', 'mutation', 'rate', 'crossover', 'rate', 'mutation', 'rate', 'population', 'size', 'population', 'size', 'set', 'parameters', 'gives', 'mutation', 'secondary', 'role', 'second', 'makes', 'significant', 'high', 'crossover', 'rate', 'second', 'set', 'indicates', 'high', 'level', 'string', 'disruption', 'desirable', 'small', 'populations', 'code', 'bits', 'hamming', 'present', 'problem', 'mutation', 'crossover', 'cannot', 'overcome', 'gray', 'codes', 'suggested', 'problem', 'ensure', 'codes', 'adjacent', 'integers', 'hamming', 'distance', 'hamming', 'distance', 'increase', 'difference', 'integer', 'values', 'phenomenon', 'introduces', 'hamming', 'levels', 'techniques', 'gas', 'previous', 'sections', 'described', 'selection', 'crossover', 'techniques', 'developed', 'natural', 'simple', 'hence', 'techniques', 'traditional', 'binary', 'encodings', 'defined', 'control', 'parameters', 'fixed', 'length', 'encodings', 'wide', 'variants', 'traditional', 'motivation', 'performance', 'criterion', 'achieve', 'performance', 'wide', 'range', 'application', 'problems', 'refer', 'techniques', 'dynamic', 'adaptive', 'strategies', 'practical', 'situations', 'static', 'control', 'parameters', 'june', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'gas', 'drawbacks', 'parameter', 'settings', 'optimal', 'stages', 'search', 'become', 'stages', 'encodings', 'become', 'search', 'fraction', 'search', 'space', 'search', 'becomes', 'smaller', 'overcome', 'drawbacks', 'several', 'dynamic', 'adaptive', 'strategies', 'varying', 'control', 'parameters', 'encodings', 'strategy', 'decreases', 'mutation', 'rates', 'increasing', 'numbers', 'generations', 'decrease', 'search', 'rate', 'disruption', 'strings', 'population', 'converges', 'search', 'space', 'approach', 'rates', 'various', 'genetic', 'operators', 'used', 'performance', 'operator', 'evaluated', 'fitness', 'values', 'strings', 'generates', 'subsequent', 'generations', 'large', 'fraction', 'population', 'converged', 'strings', 'become', 'homogeneous', 'crossover', 'becomes', 'searching', 'strings', 'low', 'mutation', 'rates', 'exploration', 'situation', 'dynamic', 'approach', 'varying', 'mutation', 'rates', 'hamming', 'distance', 'strings', 'crossed', 'useful', 'mutation', 'rate', 'increases', 'hamming', 'distance', 'strings', 'decreases', 'strings', 'crossed', 'greater', 'extent', 'capacity', 'crossover', 'generate', 'strings', 'decreases', 'increased', 'mutation', 'rate', 'search', 'dynamic', 'encoding', 'variables', 'several', 'implementations', 'encoding', 'increases', 'search', 'converges', 'strings', 'encoded', 'number', 'bits', 'size', 'search', 'space', 'strings', 'sampled', 'reduced', 'achieve', 'higher', 'search', 'adaptive', 'strategy', 'encoding', 'gas', 'searches', 'high', 'fitness', 'value', 'schemata', 'initial', 'stages', 'building', 'blocks', 'operator', 'form', 'optimal', 'strings', 'technique', 'optimized', 'deceptive', 'functions', 'cause', 'simple', 'converge', 'local', 'optima', 'distributed', 'parallel', 'gas', 'distributed', 'gas', 'parallel', 'gas', 'processing', 'strings', 'similar', 'approaches', 'different', 'distributed', 'gas', 'number', 'subpopulations', 'independent', 'search', 'parallel', 'gas', 'parallel', 'implementations', 'several', 'computation', 'speed', 'execution', 'distributed', 'gas', 'distribute', 'large', 'population', 'several', 'smaller', 'subpopulations', 'evolve', 'researchers', 'developing', 'models', 'dynamics', 'problems', 'difficult', 'gas', 'gas', 'exploration', 'large', 'population', 'evident', 'convergence', 'rates', 'subpopulations', 'high', 'ensure', 'global', 'competition', 'strings', 'best', 'strings', 'subpopulations', 'exchanged', 'distributed', 'implemented', 'single', 'computation', 'parallel', 'subpopulation', 'processed', 'different', 'parallel', 'gas', 'emerged', 'execution', 'parallel', 'issues', 'local', 'global', 'communication', 'efficacy', 'parallel', 'computation', 'led', 'modifications', 'structure', 'techniques', 'local', 'neighborhood', 'selection', 'introduced', 'increase', 'computation', 'speed', 'advances', 'theory', 'implementations', 'performance', 'considerable', 'theoretical', 'research', 'developing', 'models', 'dynamics', 'problems', 'hard', 'gas', 'important', 'understanding', 'gas', 'working', 'simple', 'holland', 'compared', 'problem', 'problem', 'discusses', 'optimal', 'allocation', 'trials', 'alternatives', 'different', 'payoff', 'maximize', 'total', 'payoff', 'fixed', 'number', 'trials', 'payoff', 'alternative', 'random', 'variable', 'distribution', 'different', 'alternatives', 'known', 'priori', 'characterized', 'observed', 'trials', 'holland', 'demonstrated', 'solves', 'number', 'problems', 'consider', 'competition', 'schemata', 'order', 'fixed', 'positions', 'competing', 'schemata', 'allocates', 'trials', 'locate', 'fittest', 'string', 'length', 'competitions', 'parallel', 'solve', 'exponential', 'allocation', 'trials', 'fittest', 'strings', 'optimal', 'allocation', 'strategy', 'resembles', 'optimal', 'solution', 'schema', 'theorem', 'lower', 'bound', 'expected', 'number', 'schemata', 'action', 'selection', 'crossover', 'mutation', 'schema', 'theorem', 'essence', 'mechanism', 'applicability', 'various', 'schemata', 'population', 'limited', 'attempts', 'schema', 'theorem', 'model', 'effects', 'crossover', 'instances', 'schema', 'schema', 'theorem', 'useful', 'percentage', 'schema', 'instances', 'generated', 'crossover', 'mutation', 'derived', 'additional', 'terms', 'extended', 'inequality', 'schema', 'theorem', 'equation', 'abstract', 'nature', 'involved', 'computing', 'terms', 'reduces', 'applicability', 'schema', 'equation', 'generalization', 'schemata', 'defined', 'holland', 'condition', 'string', 'included', 'instance', 'schema', 'general', 'definition', 'allows', 'exist', 'compared', 'holland', 'schemata', 'strings', 'length', 'schema', 'theorem', 'remains', 'generalized', 'study', 'several', 'interesting', 'properties', 'regarding', 'stability', 'dominance', 'action', 'genetic', 'operators', 'computer', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'dynamics', 'population', 'dynamics', 'controlled', 'parameters', 'population', 'size', 'mutation', 'rate', 'crossover', 'rate', 'dynamics', 'simple', 'task', 'important', 'understanding', 'conditions', 'converges', 'global', 'optimum', 'related', 'dynamics', 'gas', 'convergence', 'results', 'finite', 'versus', 'infinite', 'population', 'homogeneous', 'versus', 'convergence', 'results', 'classification', 'self', 'second', 'arises', 'state', 'transition', 'probabilities', 'markov', 'processes', 'model', 'probabilities', 'invariant', 'generations', 'homogeneous', 'markov', 'chain', 'finite', 'population', 'case', 'consider', 'distinct', 'population', 'possible', 'state', 'markov', 'chain', 'state', 'transition', 'matrix', 'indicating', 'probabilities', 'transitions', 'populations', 'due', 'genetic', 'operators', 'mutation', 'probability', 'zero', 'population', 'reached', 'population', 'probability', 'property', 'guarantees', 'existence', 'unique', 'fixed', 'point', 'distribution', 'distribution', 'populations', 'zero', 'mutation', 'probability', 'selection', 'crossover', 'population', 'consisting', 'multiple', 'single', 'string', 'possible', 'fixed', 'point', 'random', 'process', 'modeling', 'consider', 'operator', 'crossover', 'ensures', 'following', 'property', 'bit', 'position', 'exist', 'strings', 'population', 'position', 'show', 'population', 'finite', 'number', 'generations', 'operator', 'strings', 'population', 'string', 'population', 'defined', 'property', 'property', 'guarantees', 'convergence', 'global', 'optimum', 'probability', 'results', 'homogeneous', 'case', 'main', 'result', 'finite', 'populations', 'exponential', 'annealing', 'guarantees', 'convergence', 'fixed', 'points', 'homogeneous', 'case', 'mutation', 'mean', 'population', 'corresponding', 'fixed', 'point', 'contains', 'global', 'optimum', 'empirical', 'evidence', 'suggests', 'population', 'size', 'increases', 'probability', 'mass', 'limit', 'distributions', 'optimal', 'populations', 'infinite', 'populations', 'need', 'model', 'strings', 'model', 'evolution', 'populations', 'important', 'question', 'problems', 'gas', 'local', 'optima', 'quadratic', 'operator', 'representing', 'crossover', 'mutation', 'linear', 'operator', 'representing', 'selection', 'selection', 'crossover', 'considered', 'limit', 'points', 'probability', 'distribution', 'mass', 'fit', 'strings', 'mutation', 'uniform', 'selection', 'uniform', 'distribution', 'unique', 'fixed', 'point', 'important', 'global', 'convergence', 'gas', 'important', 'gas', 'rates', 'convergence', 'global', 'optimum', 'believe', 'major', 'direction', 'future', 'research', 'dynamics', 'gas', 'bounds', 'convergence', 'rates', 'various', 'conditions', 'deception', 'important', 'control', 'dynamics', 'gas', 'nature', 'search', 'landscape', 'question', 'features', 'search', 'landscapes', 'gas', 'exploit', 'point', 'problems', 'gas', 'local', 'optima', 'gas', 'low', 'order', 'short', 'schemata', 'average', 'fitness', 'values', 'form', 'high', 'order', 'schemata', 'low', 'order', 'schemata', 'contain', 'optimal', 'solution', 'locate', 'functions', 'low', 'order', 'value', 'schemata', 'contain', 'optimal', 'string', 'instance', 'converge', 'suboptimal', 'strings', 'functions', 'called', 'considerable', 'research', 'focused', 'analysis', 'design', 'deceptive', 'functions', 'simplest', 'deceptive', 'function', 'deceptive', 'problem', 'bit', 'function', 'assuming', 'string', 'represents', 'optimal', 'solution', 'following', 'conditions', 'problem', 'lower', 'order', 'schemata', 'contain', 'optimal', 'string', 'instance', 'lead', 'minimal', 'deceptive', 'problem', 'deceptive', 'function', 'conditions', 'equation', 'satisfied', 'lower', 'order', 'schemata', 'contain', 'optimal', 'string', 'lower', 'average', 'fitness', 'values', 'schemata', 'fixed', 'positions', 'minimal', 'deceptive', 'problem', 'extended', 'higher', 'string', 'lengths', 'literature', 'deceptive', 'functions', 'conditions', 'problems', 'deceptive', 'ways', 'deceptive', 'functions', 'ones', 'recent', 'studies', 'investigated', 'context', 'problems', 'hard', 'difficult', 'gas', 'optimize', 'appears', 'deceptive', 'objective', 'function', 'offers', 'measure', 'difficulty', 'gas', 'recent', 'deception', 'sufficient', 'necessary', 'condition', 'problem', 'hard', 'observation', 'definition', 'deception', 'gas', 'static', 'hyperplane', 'analysis', 'account', 'potential', 'difference', 'gas', 'dynamic', 'behavior', 'static', 'empirical', 'shows', 'functions', 'cannot', 'optimized', 'gas', 'deceptive', 'functions', 'optimized', 'features', 'problem', 'disruptive', 'nature', 'crossover', 'mutation', 'finite', 'population', 'sizes', 'multimodal', 'landscapes', 'potential', 'causes', 'june', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'genetic', 'algorithms', 'gained', 'considerable', 'popularity', 'general', 'purpose', 'robust', 'optimization', 'search', 'techniques', 'failure', 'traditional', 'optimization', 'techniques', 'searching', 'complex', 'payoff', 'landscapes', 'complex', 'constraints', 'generated', 'interest', 'alternate', 'approaches', 'genetic', 'algorithms', 'attractive', 'search', 'select', 'mechanism', 'crossover', 'exchange', 'information', 'existing', 'solutions', 'locate', 'solutions', 'algorithms', 'success', 'open', 'issues', 'remain', 'choice', 'control', 'parameters', 'exact', 'crossover', 'mutation', 'search', 'landscapes', 'optimization', 'convergence', 'properties', 'limited', 'empirical', 'evidence', 'points', 'efficacy', 'distributed', 'parallel', 'gas', 'adaptive', 'strategies', 'varying', 'control', 'parameters', 'experimental', 'evidence', 'needed', 'conclusions', 'comparative', 'performance', 'gas', 'independent', 'demand', 'considerable', 'practical', 'theoretical', 'domains', 'accepted', 'large', 'alternatives', 'traditional', 'optimization', 'techniques', 'article', 'interest', 'gas', 'helps', 'independent', 'approach', 'optimization', 'search', 'references', 'holland', 'adaptation', 'natural', 'artificial', 'systems', 'univ', 'michigan', 'press', 'ann', 'arbor', 'optimization', 'simulated', 'annealing', 'science', 'vol', 'rechenberg', 'evolutionsstrategie', 'evolution', 'evolutionary', 'strategy', 'optimization', 'technical', 'systems', 'according', 'principles', 'biological', 'evolution', 'verlag', 'stuttgart', 'germany', 'schwefel', 'numerical', 'optimization', 'computer', 'models', 'wiley', 'analysis', 'behavior', 'class', 'genetic', 'adaptive', 'systems', 'univ', 'michigan', 'ann', 'arbor', 'makes', 'problem', 'hard', 'genetic', 'algorithm', 'results', 'machine', 'learning', 'vol', 'goldberg', 'genetic', 'algorithms', 'search', 'optimization', 'machine', 'learning', 'addison', 'wesley', 'mass', 'grefenstette', 'optimization', 'control', 'parameters', 'genetic', 'algorithms', 'ieee', 'trans', 'systems', 'man', 'cybernetics', 'vol', 'smc', 'jan', 'feb', 'parallel', 'function', 'optimizer', 'proc', 'fourth', 'int', 'conf', 'genetic', 'algorithms', 'morgan', 'kaufmann', 'san', 'mateo', 'schaffer', 'study', 'control', 'parameters', 'line', 'performance', 'genetic', 'algorithms', 'function', 'optimization', 'proc', 'third', 'con', 'genetic', 'algorithms', 'morgan', 'san', 'mateo', 'srinivas', 'patnaik', 'adaptive', 'probabilities', 'crossover', 'mutation', 'genetic', 'algorithms', 'trans', 'systems', 'man', 'cybernetics', 'apr', 'srinivas', 'patnaik', 'distributed', 'populations', 'modeling', 'genetic', 'algorithms', 'proc', 'fifth', 'int', 'con', 'genetic', 'algorithms', 'morgan', 'kaufmann', 'san', 'mateo', 'distributed', 'genetic', 'algorithm', 'experimental', 'theoretical', 'artificial', 'intelligence', 'vol', 'davis', 'handbook', 'genetic', 'algorithms', 'van', 'york', 'michalewicz', 'genetic', 'algorithms', 'data', 'structures', 'evolutionary', 'programs', 'springer', 'verlag', 'berlin', 'analysis', 'population', 'size', 'crossover', 'genetic', 'algorithms', 'proc', 'workshop', 'parallel', 'problem', 'solving', 'nature', 'springer', 'verlag', 'berlin', 'srinivas', 'employed', 'india', 'electronics', 'research', 'interests', 'theory', 'design', 'genetic', 'algorithms', 'neural', 'networks', 'stochastic', 'optimization', 'optimization', 'vlsi', 'algorithms', 'worked', 'development', 'computing', 'srinivas', 'candidate', 'computer', 'science', 'indian', 'institute', 'science', 'bangalore', 'patnaik', 'professor', 'electrical', 'sciences', 'indian', 'institute', 'science', 'research', 'group', 'applications', 'laboratory', 'research', 'development', 'interests', 'parallel', 'distributed', 'computing', 'computer', 'architecture', 'computer', 'design', 'vlsi', 'systems', 'computer', 'theoretical', 'computer', 'science', 'real', 'systems', 'neural', 'computing', 'genetic', 'algorithms', 'areas', 'parallel', 'distributed', 'computing', 'neural', 'computing', 'research', 'projects', 'patnaik', 'received', 'systems', 'computer', 'systems', 'indian', 'institute', 'science', 'fellow', 'ieee', 'indian', 'national', 'science', 'academy', 'indian', 'academy', 'sciences', 'national', 'academy', 'sciences', 'indian', 'national', 'academy', 'engineering', 'last', 'years', 'ieee', 'computer', 'society', 'chapter', 'bangalore', 'section', 'srinivas', 'reached', 'india', 'electronics', 'bangalore', 'india', 'mail', 'com', 'patnaik', 'applications', 'laboratory', 'indian', 'institute', 'science', 'bangalore', 'india', 'mail', 'micro', 'computer', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply']"
3,1,1,"IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS, VOL. SMC-16, NO, 1, JANUARY/FEBRUARY 1986 Optimization of Control Parameters for Genetic Algorithms JOHN J. GREFENSTETTE, MEMBER, IEEE Abstract-The task of optimizing a complex system presents at least two levels of problems for the system designer. First, a class of optimization algorithms must be chosen that is suitable for application to the system. Second, various parameters of the optimization algorithm need to be tuned for efficiency. A class of adaptive search procedures called genetic algorithms (GA) has been used to optimize a wide variety of complex systems. GA's are applied to the second level task of identifying efficient GA's for a set of numerical optimization problems. The results are validated on an image registration problem. GA's are shown to be effective for both levels of the systems optimization problem. I. INTRODUCTION THE PROBLEM of dynamically controlling a complex process often reduces to a numerical function optimization problem. Each task environment for the process defines a performance response surface which must be explored in general by direct search techniques in order to locate high performance control inputs (see Fig. 1). If the response surface is fairly simple, conventional nonlinear optimization or control theory techniques may be suitable. However, for many processes of interest, e.g. computer operating systems or system simulation programs, the response surface is difficult to search, e.g., a high-dimensional, multimodal, discontinuous, or noisy function of the control inputs. In such cases, the choice of optimization technique may not be obvious. Even when an appropriate class of optimization algorithms is available, there are usually various parameters that must be tuned, e.g., the step size in a variable metric technique. Often the choice of parameters can have significant impact on the effectiveness of the optimization algorithm [8]. The problem of tuning the primary algorithm represents a secondary, or metalevel, optimization problem (see Fig. 2). This work attempts to determine the optimal control parameters for a class of global optimization procedures called genetic algorithms (GA's). The class of GA's is distinguished from other optimization techniques by the use of concepts from population genetics to guide the search. However, like other classes of algorithms, GA's differ from one another with respect to several parameters and strategies. This paper describes experiments that search Manuscript received March 21, 1984; revised August 28, 1985. This work was supported in part by a Fellowship from the Vanderbilt University Research Council and by the National Science Foundation under Grant MCS-8305693. The author is with the Computer Science Department, Vanderbilt University, Nashville, TN 37235, USA. IEEE Log Number 8406073. Environment E Performance Measure u Control Input c Feedback f Adaptive Strategy Fig. 1 One-level adaptive system model. a parameterized space of GA's in order to identify efficient GA's for the task of optimizing a set of numerical functions. This search is performed by a metalevel GA. Thus GA's are shown to be suitable for both levels of the system optimization problem. The remainder of this paper is organized as follows: Section II contains a brief overview of GA's and a summary of previous work. Section III describes the design of experiments which test the performance of GA's as meta-level optimization strategies. The experimental results appear in Section IV. A validation study is presented in Section V. The conclusions are summarized in Section VI. II. OVERVIEW OF GENETIC ALGORITHMS Suppose we desire to optimize a process having a response surface u, which depends on some input vector x. It is assumed that no initial information is available concerning the surface u, but that a black box evaluation procedure can be invoked to compute the scalar function u(x). The state of the art in such situations is to perform some sort of random search, perhaps combined with local hillclimbing procedures [5], [9]. Genetic algorithms are global optimization techniques that avoid many of the shortcomings exhibited by local search techniques on difficult search spaces. A GA is an iterative procedure which maintains a constant- size population P(t) of candidate solutions. During each iteration step, called a generation, the structures in the current population are evaluated, and, on the basis of those evaluations, a new population of candidate solutions is formed (see Fig. 3.) The initial population P(O) can be chosen heuristically or at random. The structures of the population P(t + 1) are chosen from P(t) by a randomized selection procedure that ensures that the expected number of times a structure is chosen is approximately proportional to that structure's 0018-9472/86/0100-0122$01.00 (©1986 IEEE 122 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:09 UTC from IEEE Xplore. Restrictions apply. GREFENSTETTE: GENETIC ALGORITHMS FOR MULTILEVEL ADAPTIVE SYSTEMS Parameters x _-------------- St Fig. 2 Two-lev t <- 0; initialize P(t); -- P(t) is the population at time t evaluate P(t); while (termination condition not satisfied) do begin t <- t+l; select P(t); recombine P(t); evaluate P(t); end; Fig. 3 Skeleton of a genetic algorithm. performance relative to the rest of the population. In order to search other points in the search space, some variation is introduced into the new population by means of idealized genetic recombination operators. The most important recombination operator is called crossover. Under the crossover operator, two structures in the new population exchange portions of their internal representation. For example, if the structures are represented as binary strings, crossover can be implemented by choosing a point at random, called the crossover point, and exchanging the segments to the right of this point. Let xl = 100:01010 and x2= 010:10100, and suppose that the crossover point has been chosen as indicated. The resulting structures would be Yi = 100:10100 and Y2 = 010:01010. Crossover serves two complementary search functions. First, it provides new points for further testing within the hyperplanes already represented in the population. In the above example, both xl and Yi are representatives of the hyperplane 100# # # # #, where the # is a `don't care` symbol. Thus, by evaluating Yl, the GA gathers further knowledge about this hyperplane. Second, crossover introduces representatives of new hyperplanes into the population. In the previous example, Y2 is a representative of the hyperplane #1001.###, which is not represented by either parent structure. If this hyperplane is a high-performance area of the search space, the evaluation of Y2 will lead to further exploration in this subspace. Each evaluation of a structure of length L contributes knowledge about the performance of the 2L hyperplanes represented by that structure. The power of GA's derives largely from their ability to exploit efficiently this vast amount of accumulating knowledge by means of relatively simple selection mechanisms [17]. Termination of the GA may be triggered by finding an acceptable approximate solution, vel adaptive system model. by fixing the total number of structure evaluations, or some other application dependent criterion. For a more thorough introduction to GA's [7], [17]. As stated above, GA's are essentially unconstrained search procedures within the given representation space. Constraints may be handled indirectly through penalty functions. A more direct way to incorporate constraints has been proposed by Fourman [12], who treats the structures in the population as lists of consistent constraints for VLSI layout problems. Genetic algorithms have not enjoyed wide recognition, possibly due to a misconception that GA's are similar to early `evolutionary programming` techniques [11], which rely on random mutation and local hill-climbing. The basic concepts of GA's were developed by Holland [17] and his students [1], [2], [4], [6], [13], [15], [19]. These studies have produced the beginnings of a theory of genetic adaptive search. For example, an application of gambler's ruin theory to the allocation of trials to the hyperplanes of the search space shows that genetic techniques provide a nearoptimal heuristic for information-gathering in complex search spaces [6], [17]. Bethke [1] provides theoretical characterizations of problems which may be especially wellsuited or especially difficult for GA's [1]. In addition, a number of experimental studies show that GA's exhibit impressive efficiency in practice. While classical gradient search techniques are more efficient for problems which satisfy tight constraints, GA's consistently outperform both gradient techniques and various forms of random search on more difficult (and more common) problems, such as optimizations involving discontinuous, noisy, high-dimensional, and multimodal objective functions. GA's have been applied to various domains, including combinatorial optimization [12], [16], image processing [10], pipeline control systems [15], and machine learning [2], [18], [25]. III. EXPERIMENTAL DESIGN We now describe experiments which attempted to optimize the performance of GA's on a given set of function optimization problems. These experiments were designed to search the space of GA's defined by six control parameters, and to identify the optimal parameter settings with 123 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:09 UTC from IEEE Xplore. Restrictions apply. IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS, VOL. SMC-16, NO. 1, JANUARY/FEBRUARY 1986 respect to two different performance measures. The searches for the optimal GA's were performed by GA's, which demonstrates the efficiency and power of GA's as metalevel optimization techniques. A metalevel GA could similarly search any other space of parameterized optimization procedures. A. The Space of Genetic Algorithms Holland [17] describes a fairly general framework for the class of GA's. There are many possible elaborations of GA's involving variations such as other genetic operators, variable sized populations, etc. This study is limited to a particular subclass of GA's characterized by the following six parameters. 1) Population Size (N): The population size affects both the ultimate performance and the efficiency of GA's. GA s generally do poorly with very small populations [22], because the population provides an insufficient sample size for most hyperplanes. A large population is more likely to contain representatives from a large number of hyperplanes. Hence, the GA's can perform a more informed search. As a result, a large population discourages premature convergence to suboptimal solutions. On the other hand, a large population requires more evaluations per generation, possibly resulting in an unacceptably slow rate of convergence. In the current experiments, the population size ranged from 10 to 160 in increments of 10. 2) Crossover Rate (C): The crossover rate controls the frequency with which the crossover operator is applied. In each new population, C * N structures undergo crossover. The higher the crossover rate, the more quickly new structures are introduced into the population. If the crossover rate is too high, high-performance structures are discarded faster than selection can produce improvements. If the crossover rate is too low, the search may stagnate due to the lower exploration rate. The current experiments allowed 16 different crossover rates, varying from 0.25 to 1.00 in increments of 0.05. 3) Mutation Rate (M): Mutation is a secondary search operator which increases the variability of the population. After selection, each bit position of each structure in the new population undergoes a random change with a probability equal to the mutation rate M. Consequently, approximately M * N * L mutations occur per generation. A low level of mutation serves to prevent any given bit position from remaining forever converged to a single value in- the entire population. A high level of mutation yields an essentially random search. The current experiments allowed eight values for the mutation rate, increasing exponentially from 0.0 to 1.0. 4) Generation Gap (G): The generation gap controls the percentage of the population to be replaced during each generation. That is N * (1 G) structures of P(t) are chosen (at random) to survive intact in P(t + 1). A value of G = 1.0 means that the entire population is replaced during each generation. A value of G = 0.5 means that half of the structures in each population survive into the next generation. The current experiments allowed G to vary between 0.30 and 1.00, in increments of 0.10. 5) Scaling Window (W): When maximizing a numerical function f(x) with a GA, it is common to define the performance value u(x) of a structure x as u(x) = f(x) - fmin, where fmin is the minimum value that f(x) can assume in the given search space. This transformation guarantees that the performance u(x) is positive, regardless of the characteristics of f(x). Often, fmin is not available a priori, in which case it is reasonable to define u(x) = f(x) - f(xmin), where f(xmin) is the minimum value of any structure evaluated so far. Either definition of u(x) has the unfortunate effect of making good values of x hard to distinguish. For example, suppose fmin = 0. After several generations, the current population might contain only structures x for which 105 <f(x) < 110. At this point, no structure in the population has a performance which deviates much from the average. This reduces the selection pressure toward the better structures, and the search stagnates. One solution is to define a new parameter fm,1in with a value of say, 100, and rate each structure against this standard. For example, if f(xi)= 110 and f(x;) - 105, then U(Xi) = f(xi) - fmin = 10, and u(xj) = f(xj) - fmin 5; the performance of xi now appears to be twice as good as the performance of xi. Our experiments investigated three scaling modes, based on a parameter called the scaling window W. If W = 0, then scaling was performed as follows: fmin was set to the minimum f(x) in the first generation. For each succeeding generation, those structures whose evaluations were less than fmin were ignored in the selection procedure. The fmin was updated whenever all the structures in a given population had evaluations greater than fm. If 0 < W < 7, then we set fmin to the least value of f(x) which occurred in the last W generations. A value of W = 7 indicated an infinite window (i.e., no scaling was performed). 6) Selection Strategy (S): The experiments compared two selection strategies. If S = P, a pure selection procedure was used, in which each structure in the current population is reproduced a number of times proportional to that structure's performance. If S = E, an elitist strategy was employed. First, pure selection is performed. In addition, the elitist strategy stipulates that the structure with the best performance always survives intact into the next generation. In the absence of such a strategy, it is possible for the best structure to disappear, due to sampling error, crossover, or mutation. We denote a particular GA by indicating its respective values for the parameters N, C, M, G, W, and S. Early work by De Jong [6] suggests parameter settings which have been used in a number of implementations of genetic algorithms. Based on De Jong's work, we define the standard GA as GAS = GA(50, 0.6,, 0.001, 1.0, 7, E). The Cartesian product of the indicated ranges for the six parameters (N, C, M, G, W, S) defines a space of 218 GA's. In some cases, it is possible to predict how variations of a single parameter will affect the performance of the GA's, assuming that all other parameters are kept fixed [6]. 124 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:09 UTC from IEEE Xplore. Restrictions apply. GREFENSTETTE: GENETIC ALGORITHMS FOR MULTILEVEL ADAPTIVE SYSTEMS However, it is difficult to predict how the various parameters interact. For example, what is the effect of increasing the population size, while lowering the crossover rate? The analytic -optimization of this space is well beyond our current understanding of GA's. It is also clear that an exhaustive enumeration of the space is infeasible. Our approach was to apply a metalevel GA's to the problem of identifying high-performance GA's. Each structure in the population of the meta-level GA consisted of an 18-bit vector which identified a particular GA. The performance of each GA was measured during the performance of a series of function optimization tasks. The meta-level GA used this information to conduct a search for high-performance algorithms. B. Task Environment Each GA was evaluated by using it to perform five optimization tasks, one for each of five carefully selected numerical test functions. As a results of these optimization tasks, the GA was assigned a value according to one of the performance measures explained below. The functions comprising the task environment have been studied in previous studies of GA's [3], [6] and included functions with various characteristics, including discontinuous, multidimensional, and noisy functions. Table I gives a brief description of the test functions. C. Performance Measures Two performance metrics for adaptive search strategies were considered, online performance and offline performance [6]. The on-line performance of a search strategy s on a response surface e is defined as follows: Ue(s, T) = avet(Ue(t)), t = 0,1, *, T where ue(t) is the performance of the structure evaluated at time t. That is, online performance is the average performance of all tested structures over the course of the search. The offline performance of a search strategy s on a response surface e is defined as follows: Ue*(s, T) = avej(u*(t)), t = 0, 1, T where u*(t) is the best performance achieved in the time interval [0, t]. Offline performance is the relevant measure when the search can- be performed offline (e.g., via a simulation model), while the best structure so far is used to control the online system. In order to measure global robustness, corresponding performance measures are defined for the entire set of response surfaces E: UE(s, T) = 100.0* avee(Ue(s, T)/Ue(rand, T)), e in E UE (S, T) = 1000* avee(Ue*(s, T)/Ue*(rand, T)), e in E where U, (rand, T) and U,*(rand, T) are on-line and offline performance, respectively, of pure random search on TABLE I FUNCTIONS COMPRISING THE TEST ENVIRONMENT Function Dimensions Size of Space Description fl 3 1.0 x 109 parabola f2 2 1.7 x 106 Rosenbrock's saddle [23] f3 5 1.0 X 1015 step function f4 30 1.0 X 1072 quartic with noise f5 2 1.6 X 1010 Shekel's foxholes [241 response surface e. As normalized, UE and UE for random search will be 100.0, while UE and UE* for more effective search strategies will be correspondingly lower (for minimization problems). D. Experimental Procedures Two experiments were performed, one to optimize on-line performance and one to optimize offline performance. For each experiment, the procedure for obtaining the optimum GA was as follows. 1) One thousand GA's were evaluated, using a metalevel GA to perform the search through the space of GA's defined by the six GA parameters. Each evaluation comprised running one GA against each of the five test functions for 5000 function evaluations and normalizing the result with respect to the performance of random search on the same function. The metalevel GA started with a population of 50 randomly chosen GA's and used the standard parameter settings, i.e., GA(50, 0.6, 0.001, 1.0, 7, E). Past experience has shown that these parameters yield a fairly good search for a variety of problems, and so this was the natural choice for the meta-level. 2) Since GA's are randomized algorithms, the performance of a GA during a single trial in the metalevel experiment represents a sample from a distribution of performances. Therefore, it was decided that the GA's showing the best performances during step 1 would be subjected to more extensive testing. Each of the 20 best GA's in step 1 was again run against the task environment, this time for five trials for each test function, using different random number seeds for each trial. The GA which exhibited the best performance in this step was declared the winner of the experiment. IV. RESULTS A. Experiment 1-Online Performance The first experiment was designed to search for the optimal GA with respect to online performance on the task environment. Fig. 4 shows the average online performance for the 50 GA's in each of the 20 generations of experiment 1. Recall that the overall scores for random search on the task environment is 100.0. From the initial data point in Fig. 4, we can estimate that the average online performance of all GA's in our search space is approximately 56.6, or about 43.4 percent better than random search. Fig. 4 shows that the final population of GA's had significantly better performance than the average GA. 125 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:09 UTC from IEEE Xplore. Restrictions apply. IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS, VOL. SMC-16, NO. 1, JANUARY/FEBRUARY 1986 so 50 ¢D uJ zzaCl:; a: 040 U- tr: hi aL hi Z30 -J z0 hi 020 aa:: 10 250k z c: 200 a: 0CC U- 06150 z -J U- IL100 C: a: i 5 at: -0 4 e 12 GENERRTIONS 16 20 -0 4 8 12 16 20 GENERAT I ONS Fig. 4 Experiment 1. This experiment identified GA1 = GA(30, 0.95, 0.01, 1.0, 1, E) as the optimal GA with respect to online performance. In an extended comparison, GA1 showed a 3.09 percent improvement (with respect to the baseline performance of random search) over GAs on the task environment. This represents a small but statistically significant improvement over the expected online performance of GAS. The performance improvement between GAS and GA1 can be attributed to an interaction among a number of factors. First, GA1 uses a smaller population, which allows many more generations within a given number of trials. For example, on functions in the task environment, GA1 iterated through an average of twice as many generations as GAS. Second, GAS uses an infinite window, i.e., no scaling is performed. GA1 uses a small window (one generation), which resulted in a more directed search. These two factors are apparently balanced by the significantly increased crossover rate and mutation rate in GA1. A higher crossover rate tends to disrupt the structures selected for reproduction at a high rate, which is important in a small population, since high performance individuals are more likely to quickly dominate the population. The higher mutation rate also helps prevent premature convergence to local optima. B. Experiment 2-Offline Performance The second experiment was designed to search for the optimal GA with respect to offline performance on the task environment. Fig. 5 shows that the average offline performance of all GA's (214.8) appears to be much worse than the average offline performance of random search (100.0). This finding verifies the experience of many practitioners that GA's can prematurely converge to suboptimal solutions when given the wrong control parameters. For example, if a very small population size is used (i.e., N = 10), the number of representatives from any given hyperplane is so small that the selection procedure has insufficient information to properly apportion credit to the hyperplanes Fig. 5 Experiment 2. represented in the population. As a result, a relatively good structure may overrun the entire population in a few generations. Unless the mutation rate is high, the GA will quickly converge to a suboptimal solution. In contrast, random search will usually locate at least one high performance point within the first thousand trials, leading to relatively good offline performance. That is, random search is a fairly tough competitor for search strategies when the goal is good offline performance. It is encouraging that many GA's perform significantly better than random search with respect to the offline performance measure. This experiment identified GA2= GA(80, 0.45, 0.01, 0.9, 1, P) as the optimal GA with respect to offline performance. In an extended comparison, GA2 showed a 3.0 percent performance improvement over GAS on the task environment. Because of the high variance shown by GA's with respect to offline performance, this does not represent a statistically significant difference between GA2 and GAS. There are several interesting difference between GA2 and GA'. With a larger population and higher mutation rate, the population will tend to contain more variety, thus increasing the random aspects of the GA. The slightly lower generation gap also tends to reduce the effects of selection, resulting in a less focused search. These aspects are balanced by the lower crossover rate and the small scaling window which tend to enhance the selective pressure. C. General Observations Besides suggesting optimal GA's, the above experiments also provide performance data for 2000 GA's with various parameter settings. Given that these are not independent samples from the space of GA's, it is rather difficult to make valid statistical inferences from this data. Nevertheless the data does suggest some regularities that might warrant further studies. The experimental data confirms several observations first made by De Jong on the basis of a relatively small number of experiments [6]. For example, mutation rates above 0.05 are generally harmful with respect to online performance, 126 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:09 UTC from IEEE Xplore. Restrictions apply. GREFENSTETTE: GENETIC ALGORITHMS FOR MULTILEVEL ADAPTIVE SYSTEMS 30~ -20 -j 10 -u n_3Au . Au0 so u 120 IS POPULATION SIZE Fig. 6 Average online performance of various population sizes according to Experiment 1. with performance approaching that of random search with rates above 0.1 regardless of the other parameter settings. The absence of mutation is also associated with poorer performance, which suggests that mutation performs an important service in refreshing lost values. Best on-line performance can be obtained with a population size in the range of 30-100 structures as shown by Fig. 6, which plots the average online performance as a function of population size, ignoring those GA's with mutation rates above 0.05. A similar graph can be obtained for offline performance except that range for the best population size is 60-110 structures. A large generation gap generally improves performance, as does the elitist selection strategy. The performance data also suggests other regularities that have not been previously noted. First, the adoption of a small scaling window (1-5 generations) is associated with a slight improvement in both online and offline performance. This is reasonable since scaling enhances the pressure of selection in later stages of the search. In small populations (20 to 40) structures, good online performance is associated with either a high crossover rate combined with a low mutation rate or a low crossover rate combined with a high mutation rate. For mid-sized populations (30 to 90 structures), the optimal crossover rate appears to decrease as the population size increases. For example, among the best 10 percent of all GA's with population size 30, the average crossover rate was 0.88. The best crossover rate decreases to 0.50 for population size 50 and to 0.30 for population size 80. This is reasonable since, in smaller populations, crossover plays an important role in preventing premature convergence. In summary, the performance of GA's appear to be a nonlinear function of the control parameters. However, the available data is too limited to confirm or disconfirm the existence of discontinuities or multiple local optima in the performance space of GA's. It would be interesting to compare the performance of other nonlinear search techniques in optimizing the performance of GA's. V. VALIDATION In order to validate the experimental results, the three algorithms GAS, GA1 and GA2 were applied to an optimization problem which was not included in the experimental -j 0i a: GA1 0 100oo O2000 300-0 4000 5000 TRIALS Fig. 7 Online performance of GA1 and GAS on an image registration task. 8 zLu CC 6 w - - G u.i GAS c: 10 1000 2000 3000 4000 5000 TRIALS Fig. 8 Offline performance of GA2 and GAs on an image registration task. task environment. The validation task was the following image registration problem: In order to compare'two graylevel images of a scene taken at different times or from different vantage points, it is often necessary to determine a transformation, or registration, which will map one image, the original image, into another, the target image. This registration problem is important in such diverse fields as aerial photography and medical imaging [20], [21]. One approach to the image registration problem [10] is to define a parameterized class of transformations and to apply a GA to the task of searching this class for an optimal transformation, i.e., a transformation which maps the original image into the target image. The response surface for a given pair of images is a function of the transformation and corresponds to the average gray-level differences between corresponding pixels in the transformed original image and the target image. This class of problems appears to be difficult for conventional nonlinear programming algorithms due to the inevitable presence of many local minima [14]. Experiments were conducted to compare the effectiveness of the algorithms GAs, GA1, and GA2 for a sample registration problem consisting of a pair of carotid artery images in which patient motion produced significant mo- 127 )DI, 'IO, -0. - 10- -0-. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:09 UTC from IEEE Xplore. Restrictions apply. IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS, VOL. SMC-16, NO. 1, JANUARY/FEBRUARY 1986 tion artifacts. Each experiment consisted of five runs of a GA on the pair of images, each run evaluating 5000 candidate transformations. Fig. 7 compares the online performance of GAS with GA1. GA1 shows a small but statistically significant improvement in online performance over GAS on this problem. Fig. 8 shows that GA2 produces no significant difference in offline performance over GAS. These results are consistent with the results in Experiments 1 and 2, and indicate that those results may be generally applicable to other optimization problems. VI. CONCLUSION Experiments were performed to search for the optimal GA's for a given set of numerical optimization problems. Previous experiments show that the standard GA, GAS, outperforms several classical optimization techniques on the task environment. Thus, one goal of our experiments was to identify GA's which are at least as good as GAS. Both experiments succeeded in identifying control parameters settings that optimize GA's with respect to the described performance metrics. The experimental data also suggests that, while it is possible to optimize GA control parameters, very good performance can be obtained with a range of GA control parameter settings. The present approach is limited in several ways. First, it was necessary to choose a particular parameterized subclass of GA's to explore. In particular, we have neglected other recombination operators such as multipoint crossover and inversion and other strategies such as the inclusion of a `crowding factor` [6]. Second, the GA's we considered were essentially unconstrained optimization procedures. As previously noted, there are ways to incorporate constraints into GA's but it remains for future research to determine how the presence of constraints affects the optimal control parameters. Finally, the metalevel experiments represent a sizable number of CPU hours. It is encouraging that the results appear to be applicable to a wide class of optimization problems. An alternative approach to the optimization of GA's would be to enable the GA to modify its own parameters dynamically during the search. However, for many optimization problems the number of evaluations which can be performed in a reasonable amount of time would not allow the GA enoughb evaluations to modify its search techniques to any significant degree. Therefore, the experiments described above are important in that they identify approximately optimal parameter settings for the two performance measures considered. The data also suggests several new tradeoffs among the control parameters which may lead to further theoretical insights concerning the behavior of genetic algorithms. REFERENCES [1] A. D. Bethke, `Genetic algorithms as function optimizers,` Ph. D. thesis, Dept. Computer and Communication Sciences, Univ. of Michigan, 1981. [2] L. B. Booker, `Intelligent behavior as an adaptation to the task environment,` Ph. D. thesis, Dept. Computer and Communication Sciences, Univ. of Michigan, Feb. 1982. [3] A. Brindle, `Genetic algorithms for function optimization,` Ph. D. thesis, Computer Science Dept., Univ. of Alberta, 1981. [4] D. J. Cavicchio, `Adaptive search using simulated evolution,` Ph.D. thesis, Dept. Computer and Communication Sciences, Univ. of Michigan, 1970. [5] L. Cooper and D. Steinberg, Methods of Optimization. Philadelphia: W. B. Saunders, 1970. [6] K. A. DeJong, A nalysis of the behavior of a class of genetic adaptive systems, Ph.D. thesis, Dept. Computer and Communication Sciences, Univ. of Michigan, 1975. [7] , `Adaptive system design: A genetic approach,` IEEE Trans. Syst., Man, Cyber. vol. SMC-10, no. 9, pp. 566-574, Sept. 1980. [8] L. C. W. Dixon, `The choice of step length, a crucial factor in the performance of variable metric algorithms,` in Numerical Methods for Nonlinear Optimization, F. A. Lootsma, Ed. New York: Academic, 1972. [9] W. Farrell, Optimization Techniques for Computerized Simulation. Los Angeles: CACI, 1975. [10] J. M. Fitzpatrick, J. J. Grefenstette, and D. Van Gucht, `Image registration by genetic search,` in Proc. of IEEE Southeastcon '84, pp. 460-464, Apr. 1984. [11] L. J. Fogel, A. J. Owens, and M. J. Walsh, Artificial Intelligence Through Simulated Evolution. New York: Wiley and Sons, 1966. [12] M. P. Fourman, `Compaction of symbolic layout using genetic algorithms,` Proc. Intl. Conf. on Genetic Algorithms and their Applications, pp. 141-153, July 1985. [13] D). R. Frantz, Non-linearities in genetic adaptive search, Ph.D. thesis, Dept. Computer and Communication Sciences, Univ. of Michigan, 1972. [14] W. Frei, T. Shibata, and C. C. Chen, `Fast matching of non-stationary images with false fix protection,` Proc. 5th Intl. Conif. Patt. Recog., vol. 1, pp. 208-212, IEEE, 1980. [15] D. Goldberg, `Computer-aided gas pipeline operation using genetic algorithms and rule learning,` Ph.D. thesis, Dept. Civil Eng., Univ. of Michigan, 1983. [16] J. J. Grefenstette, R. Gopal, B. J. Rosmaita, and D. Van Gucht, `Genetic algorithms for the traveling salesman problem,` in Proc. Intl. Conf. Genetic Algorithms and their Applications, pp. 160-168, July 1985. [17] J. H. Holland, Adaptation in Natural and Artificial Systems, Univ. Michigan, Ann Arbor, MI, 1975. [18] `Escaping brittleness,` in Proc. Int. Machine Learning Workshop, pp. 92-95, June 1983. [19] R. B. Hollstien, Artificial Genetic Adaptation in Computer Control Systems, Ph.D. Thesis, Dept., Computer and Communication Sci ences, Univ. of Michigan, 1971. [20] R. A. Kruger and S. J. Riederer, Basic Concepts of Digital Subtraction Angiography. Boston: G. K. Hall, 1984. [21] James J. Little, `Automatic registration of landsat MSS images to digital elevation models,` in Proc. IEEE Workshop Computer Vision: Representation and Control, pp. 178-184, 1982. [22] E. Pettit and K. M. Swigger, `An analysis of genetic-based pattern tracking,' in Proc. National Conf. on Al, AAAI 83, pp. 327-332, 1983. [23] H. H. Rosenbrock, `An automatic method for finding the greatest or least value of a function,` Computer J., vol. 3, pp. 175-184, Oct. 1960. [24] J. Shekel, `Test functions for multimodal search techniques,` in Fifth Ann. Princeton Conf. Inform. Sci. Syst., 1971. [25] S. F. Smith, `Flexible learning of problem solving heuristics through adaptive search,` in Proc. of 8th IJCAI 1983. 128 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:26:09 UTC from IEEE Xplore. Restrictions apply.","['ieee', 'transactions', 'systems', 'man', 'cybernetics', 'vol', 'smc', 'january', 'february', 'optimization', 'control', 'parameters', 'genetic', 'algorithms', 'grefenstette', 'member', 'ieee', 'abstract', 'task', 'optimizing', 'complex', 'system', 'presents', 'least', 'levels', 'problems', 'system', 'class', 'optimization', 'algorithms', 'chosen', 'suitable', 'application', 'system', 'second', 'various', 'parameters', 'optimization', 'algorithm', 'need', 'tuned', 'efficiency', 'class', 'adaptive', 'search', 'procedures', 'called', 'genetic', 'algorithms', 'used', 'optimize', 'wide', 'variety', 'complex', 'systems', 'applied', 'second', 'level', 'task', 'identifying', 'efficient', 'set', 'numerical', 'optimization', 'problems', 'results', 'image', 'registration', 'problem', 'shown', 'effective', 'levels', 'systems', 'optimization', 'problem', 'introduction', 'problem', 'controlling', 'complex', 'process', 'reduces', 'numerical', 'function', 'optimization', 'problem', 'task', 'environment', 'process', 'performance', 'response', 'surface', 'explored', 'general', 'direct', 'search', 'techniques', 'order', 'locate', 'high', 'performance', 'control', 'inputs', 'fig', 'response', 'surface', 'simple', 'conventional', 'nonlinear', 'optimization', 'control', 'theory', 'techniques', 'suitable', 'many', 'processes', 'interest', 'computer', 'systems', 'system', 'simulation', 'programs', 'response', 'surface', 'difficult', 'search', 'high', 'dimensional', 'multimodal', 'discontinuous', 'noisy', 'function', 'control', 'inputs', 'cases', 'choice', 'optimization', 'technique', 'obvious', 'appropriate', 'class', 'optimization', 'algorithms', 'available', 'various', 'parameters', 'tuned', 'step', 'size', 'variable', 'metric', 'technique', 'choice', 'parameters', 'significant', 'impact', 'effectiveness', 'optimization', 'algorithm', 'problem', 'tuning', 'primary', 'algorithm', 'represents', 'secondary', 'metalevel', 'optimization', 'problem', 'fig', 'attempts', 'determine', 'optimal', 'control', 'parameters', 'class', 'global', 'optimization', 'procedures', 'called', 'genetic', 'algorithms', 'class', 'optimization', 'techniques', 'concepts', 'population', 'guide', 'search', 'classes', 'algorithms', 'differ', 'respect', 'several', 'parameters', 'strategies', 'describes', 'experiments', 'search', 'manuscript', 'received', 'revised', 'august', 'supported', 'part', 'university', 'research', 'national', 'science', 'grant', 'author', 'computer', 'science', 'department', 'university', 'usa', 'ieee', 'number', 'environment', 'performance', 'measure', 'control', 'input', 'feedback', 'adaptive', 'strategy', 'fig', 'level', 'adaptive', 'system', 'model', 'parameterized', 'space', 'order', 'identify', 'efficient', 'task', 'optimizing', 'set', 'numerical', 'functions', 'search', 'performed', 'metalevel', 'shown', 'suitable', 'levels', 'system', 'optimization', 'problem', 'remainder', 'organized', 'follows', 'section', 'contains', 'brief', 'overview', 'summary', 'previous', 'section', 'iii', 'describes', 'design', 'experiments', 'test', 'performance', 'meta', 'level', 'optimization', 'strategies', 'experimental', 'results', 'appear', 'section', 'study', 'presented', 'section', 'conclusions', 'summarized', 'section', 'overview', 'genetic', 'algorithms', 'suppose', 'optimize', 'process', 'response', 'surface', 'depends', 'input', 'vector', 'assumed', 'initial', 'information', 'available', 'concerning', 'surface', 'box', 'evaluation', 'procedure', 'compute', 'function', 'state', 'art', 'situations', 'perform', 'sort', 'random', 'search', 'combined', 'local', 'procedures', 'genetic', 'algorithms', 'global', 'optimization', 'techniques', 'avoid', 'many', 'local', 'search', 'techniques', 'difficult', 'search', 'spaces', 'procedure', 'maintains', 'constant', 'size', 'population', 'candidate', 'solutions', 'iteration', 'step', 'called', 'generation', 'structures', 'current', 'population', 'evaluated', 'basis', 'evaluations', 'population', 'candidate', 'solutions', 'formed', 'fig', 'initial', 'population', 'chosen', 'random', 'structures', 'population', 'chosen', 'selection', 'procedure', 'ensures', 'expected', 'number', 'times', 'structure', 'chosen', 'proportional', 'ieee', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'grefenstette', 'genetic', 'algorithms', 'adaptive', 'systems', 'parameters', 'fig', 'initialize', 'population', 'evaluate', 'termination', 'condition', 'satisfied', 'select', 'evaluate', 'end', 'fig', 'genetic', 'algorithm', 'performance', 'relative', 'rest', 'population', 'order', 'search', 'points', 'search', 'space', 'variation', 'introduced', 'population', 'means', 'genetic', 'recombination', 'operators', 'important', 'recombination', 'operator', 'called', 'crossover', 'crossover', 'operator', 'structures', 'population', 'exchange', 'portions', 'representation', 'example', 'structures', 'represented', 'binary', 'strings', 'crossover', 'implemented', 'choosing', 'point', 'random', 'called', 'crossover', 'point', 'segments', 'right', 'point', 'let', 'suppose', 'crossover', 'point', 'chosen', 'indicated', 'resulting', 'structures', 'crossover', 'serves', 'search', 'functions', 'provides', 'points', 'testing', 'hyperplanes', 'represented', 'population', 'example', 'representatives', 'hyperplane', 'symbol', 'evaluating', 'knowledge', 'hyperplane', 'second', 'crossover', 'introduces', 'representatives', 'hyperplanes', 'population', 'previous', 'example', 'representative', 'hyperplane', 'represented', 'parent', 'structure', 'hyperplane', 'high', 'performance', 'area', 'search', 'space', 'evaluation', 'lead', 'exploration', 'evaluation', 'structure', 'length', 'knowledge', 'performance', 'hyperplanes', 'represented', 'structure', 'power', 'ability', 'exploit', 'amount', 'knowledge', 'means', 'simple', 'selection', 'mechanisms', 'termination', 'finding', 'approximate', 'solution', 'adaptive', 'system', 'model', 'total', 'number', 'structure', 'evaluations', 'application', 'dependent', 'criterion', 'introduction', 'stated', 'unconstrained', 'search', 'procedures', 'given', 'representation', 'space', 'constraints', 'penalty', 'functions', 'direct', 'incorporate', 'constraints', 'structures', 'population', 'lists', 'consistent', 'constraints', 'vlsi', 'layout', 'problems', 'genetic', 'algorithms', 'wide', 'recognition', 'due', 'similar', 'evolutionary', 'programming', 'techniques', 'random', 'mutation', 'local', 'hill', 'climbing', 'basic', 'concepts', 'developed', 'holland', 'studies', 'produced', 'theory', 'genetic', 'adaptive', 'search', 'example', 'application', 'theory', 'allocation', 'trials', 'hyperplanes', 'search', 'space', 'shows', 'genetic', 'techniques', 'provide', 'heuristic', 'information', 'complex', 'search', 'spaces', 'provides', 'theoretical', 'problems', 'difficult', 'addition', 'number', 'experimental', 'studies', 'show', 'efficiency', 'practice', 'classical', 'gradient', 'search', 'techniques', 'efficient', 'problems', 'constraints', 'outperform', 'gradient', 'techniques', 'various', 'forms', 'random', 'search', 'difficult', 'common', 'problems', 'involving', 'discontinuous', 'noisy', 'high', 'dimensional', 'multimodal', 'objective', 'functions', 'applied', 'various', 'domains', 'including', 'combinatorial', 'optimization', 'image', 'processing', 'control', 'systems', 'machine', 'learning', 'iii', 'experimental', 'design', 'describe', 'experiments', 'attempted', 'optimize', 'performance', 'given', 'set', 'function', 'optimization', 'problems', 'experiments', 'designed', 'search', 'space', 'defined', 'control', 'parameters', 'identify', 'optimal', 'parameter', 'settings', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'vol', 'smc', 'january', 'february', 'respect', 'different', 'performance', 'measures', 'searches', 'optimal', 'performed', 'demonstrates', 'efficiency', 'power', 'metalevel', 'optimization', 'techniques', 'metalevel', 'search', 'space', 'parameterized', 'optimization', 'procedures', 'space', 'genetic', 'algorithms', 'holland', 'describes', 'general', 'framework', 'class', 'many', 'possible', 'involving', 'variations', 'genetic', 'operators', 'variable', 'sized', 'populations', 'etc', 'study', 'limited', 'particular', 'characterized', 'following', 'parameters', 'population', 'size', 'population', 'size', 'affects', 'performance', 'efficiency', 'small', 'populations', 'population', 'provides', 'sample', 'size', 'hyperplanes', 'large', 'population', 'likely', 'contain', 'representatives', 'large', 'number', 'hyperplanes', 'hence', 'perform', 'search', 'result', 'large', 'population', 'premature', 'convergence', 'suboptimal', 'solutions', 'hand', 'large', 'population', 'requires', 'evaluations', 'generation', 'resulting', 'slow', 'rate', 'convergence', 'current', 'experiments', 'population', 'size', 'increments', 'crossover', 'rate', 'crossover', 'rate', 'controls', 'frequency', 'crossover', 'operator', 'applied', 'population', 'structures', 'undergo', 'crossover', 'higher', 'crossover', 'rate', 'structures', 'introduced', 'population', 'crossover', 'rate', 'high', 'high', 'performance', 'structures', 'discarded', 'faster', 'selection', 'produce', 'improvements', 'crossover', 'rate', 'low', 'search', 'due', 'lower', 'exploration', 'rate', 'current', 'experiments', 'allowed', 'different', 'crossover', 'rates', 'varying', 'increments', 'mutation', 'rate', 'mutation', 'secondary', 'search', 'operator', 'increases', 'population', 'selection', 'bit', 'position', 'structure', 'population', 'random', 'change', 'probability', 'equal', 'mutation', 'rate', 'mutations', 'occur', 'generation', 'low', 'level', 'mutation', 'serves', 'given', 'bit', 'position', 'remaining', 'converged', 'single', 'value', 'entire', 'population', 'high', 'level', 'mutation', 'yields', 'random', 'search', 'current', 'experiments', 'allowed', 'values', 'mutation', 'rate', 'increasing', 'generation', 'gap', 'generation', 'gap', 'controls', 'percentage', 'population', 'replaced', 'generation', 'structures', 'chosen', 'random', 'survive', 'value', 'means', 'entire', 'population', 'replaced', 'generation', 'value', 'means', 'half', 'structures', 'population', 'survive', 'next', 'generation', 'current', 'experiments', 'allowed', 'vary', 'increments', 'scaling', 'window', 'numerical', 'function', 'common', 'define', 'performance', 'value', 'structure', 'fmin', 'fmin', 'minimum', 'value', 'assume', 'given', 'search', 'space', 'transformation', 'guarantees', 'performance', 'positive', 'characteristics', 'fmin', 'available', 'priori', 'case', 'reasonable', 'define', 'xmin', 'xmin', 'minimum', 'value', 'structure', 'evaluated', 'definition', 'effect', 'making', 'values', 'hard', 'example', 'suppose', 'fmin', 'several', 'generations', 'current', 'population', 'contain', 'structures', 'point', 'structure', 'population', 'performance', 'much', 'average', 'reduces', 'selection', 'pressure', 'structures', 'search', 'solution', 'define', 'parameter', 'value', 'rate', 'structure', 'standard', 'example', 'fmin', 'fmin', 'performance', 'appears', 'performance', 'experiments', 'investigated', 'scaling', 'parameter', 'called', 'scaling', 'window', 'scaling', 'performed', 'follows', 'fmin', 'set', 'minimum', 'generation', 'generation', 'structures', 'evaluations', 'fmin', 'selection', 'procedure', 'fmin', 'updated', 'whenever', 'structures', 'given', 'population', 'evaluations', 'greater', 'set', 'fmin', 'least', 'value', 'last', 'generations', 'value', 'indicated', 'infinite', 'window', 'scaling', 'performed', 'selection', 'strategy', 'experiments', 'compared', 'selection', 'strategies', 'pure', 'selection', 'procedure', 'used', 'structure', 'current', 'population', 'number', 'times', 'proportional', 'performance', 'elitist', 'strategy', 'employed', 'pure', 'selection', 'performed', 'addition', 'elitist', 'strategy', 'structure', 'best', 'performance', 'next', 'generation', 'absence', 'strategy', 'possible', 'best', 'structure', 'due', 'sampling', 'error', 'crossover', 'mutation', 'denote', 'particular', 'indicating', 'values', 'parameters', 'suggests', 'parameter', 'settings', 'used', 'number', 'implementations', 'genetic', 'algorithms', 'define', 'standard', 'gas', 'product', 'indicated', 'ranges', 'parameters', 'space', 'cases', 'possible', 'variations', 'single', 'parameter', 'affect', 'performance', 'assuming', 'parameters', 'kept', 'fixed', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'grefenstette', 'genetic', 'algorithms', 'adaptive', 'systems', 'difficult', 'various', 'parameters', 'example', 'effect', 'increasing', 'population', 'size', 'crossover', 'rate', 'optimization', 'space', 'current', 'understanding', 'clear', 'space', 'infeasible', 'approach', 'apply', 'metalevel', 'problem', 'identifying', 'high', 'performance', 'structure', 'population', 'meta', 'level', 'bit', 'vector', 'identified', 'particular', 'performance', 'measured', 'performance', 'series', 'function', 'optimization', 'tasks', 'meta', 'level', 'used', 'information', 'search', 'high', 'performance', 'algorithms', 'task', 'environment', 'evaluated', 'perform', 'optimization', 'tasks', 'selected', 'numerical', 'test', 'functions', 'results', 'optimization', 'tasks', 'assigned', 'value', 'according', 'performance', 'measures', 'explained', 'functions', 'comprising', 'task', 'environment', 'studied', 'previous', 'studies', 'included', 'functions', 'various', 'characteristics', 'including', 'discontinuous', 'multidimensional', 'noisy', 'functions', 'table', 'gives', 'brief', 'description', 'test', 'functions', 'performance', 'measures', 'performance', 'metrics', 'adaptive', 'search', 'strategies', 'considered', 'online', 'performance', 'offline', 'performance', 'line', 'performance', 'search', 'strategy', 'response', 'surface', 'defined', 'follows', 'performance', 'structure', 'evaluated', 'online', 'performance', 'average', 'performance', 'tested', 'structures', 'course', 'search', 'offline', 'performance', 'search', 'strategy', 'response', 'surface', 'defined', 'follows', 'best', 'performance', 'achieved', 'interval', 'offline', 'performance', 'measure', 'search', 'performed', 'offline', 'simulation', 'model', 'best', 'structure', 'used', 'control', 'online', 'system', 'order', 'measure', 'global', 'robustness', 'corresponding', 'performance', 'measures', 'defined', 'entire', 'set', 'response', 'rand', 'rand', 'rand', 'rand', 'line', 'offline', 'performance', 'pure', 'random', 'search', 'table', 'functions', 'comprising', 'test', 'environment', 'function', 'dimensions', 'size', 'space', 'description', 'saddle', 'step', 'function', 'noise', 'response', 'surface', 'normalized', 'random', 'search', 'effective', 'search', 'strategies', 'lower', 'minimization', 'problems', 'experimental', 'procedures', 'experiments', 'performed', 'optimize', 'line', 'performance', 'optimize', 'offline', 'performance', 'experiment', 'procedure', 'obtaining', 'optimum', 'follows', 'evaluated', 'metalevel', 'perform', 'search', 'space', 'defined', 'parameters', 'evaluation', 'running', 'test', 'functions', 'function', 'evaluations', 'result', 'respect', 'performance', 'random', 'search', 'function', 'metalevel', 'started', 'population', 'chosen', 'used', 'standard', 'parameter', 'settings', 'past', 'experience', 'shown', 'parameters', 'yield', 'search', 'variety', 'problems', 'natural', 'choice', 'meta', 'level', 'algorithms', 'performance', 'single', 'trial', 'metalevel', 'experiment', 'represents', 'sample', 'distribution', 'performances', 'decided', 'showing', 'best', 'performances', 'step', 'subjected', 'extensive', 'testing', 'best', 'step', 'run', 'task', 'environment', 'trials', 'test', 'function', 'different', 'random', 'number', 'trial', 'best', 'performance', 'step', 'experiment', 'results', 'experiment', 'online', 'performance', 'experiment', 'designed', 'search', 'optimal', 'respect', 'online', 'performance', 'task', 'environment', 'fig', 'shows', 'average', 'online', 'performance', 'generations', 'experiment', 'overall', 'random', 'search', 'task', 'environment', 'initial', 'data', 'point', 'fig', 'estimate', 'average', 'online', 'performance', 'search', 'space', 'percent', 'random', 'search', 'fig', 'shows', 'final', 'population', 'performance', 'average', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'vol', 'smc', 'january', 'february', 'fig', 'experiment', 'experiment', 'identified', 'optimal', 'respect', 'online', 'performance', 'extended', 'comparison', 'showed', 'percent', 'improvement', 'respect', 'performance', 'random', 'search', 'gas', 'task', 'environment', 'represents', 'small', 'significant', 'improvement', 'expected', 'online', 'performance', 'gas', 'performance', 'improvement', 'gas', 'interaction', 'number', 'factors', 'uses', 'smaller', 'population', 'allows', 'many', 'generations', 'given', 'number', 'trials', 'example', 'functions', 'task', 'environment', 'iterated', 'average', 'many', 'generations', 'gas', 'second', 'gas', 'uses', 'infinite', 'window', 'scaling', 'performed', 'uses', 'small', 'window', 'generation', 'resulted', 'directed', 'search', 'factors', 'increased', 'crossover', 'rate', 'mutation', 'rate', 'higher', 'crossover', 'rate', 'tends', 'structures', 'selected', 'reproduction', 'high', 'rate', 'important', 'small', 'population', 'high', 'performance', 'individuals', 'likely', 'dominate', 'population', 'higher', 'mutation', 'rate', 'helps', 'premature', 'convergence', 'local', 'optima', 'experiment', 'offline', 'performance', 'second', 'experiment', 'designed', 'search', 'optimal', 'respect', 'offline', 'performance', 'task', 'environment', 'fig', 'shows', 'average', 'offline', 'performance', 'appears', 'much', 'worse', 'average', 'offline', 'performance', 'random', 'search', 'finding', 'experience', 'many', 'converge', 'suboptimal', 'solutions', 'given', 'control', 'parameters', 'example', 'small', 'population', 'size', 'used', 'number', 'representatives', 'given', 'hyperplane', 'small', 'selection', 'procedure', 'information', 'hyperplanes', 'fig', 'experiment', 'represented', 'population', 'result', 'structure', 'entire', 'population', 'generations', 'mutation', 'rate', 'high', 'converge', 'suboptimal', 'solution', 'random', 'search', 'locate', 'least', 'high', 'performance', 'point', 'trials', 'leading', 'offline', 'performance', 'random', 'search', 'search', 'strategies', 'goal', 'offline', 'performance', 'encouraging', 'many', 'perform', 'random', 'search', 'respect', 'offline', 'performance', 'measure', 'experiment', 'identified', 'optimal', 'respect', 'offline', 'performance', 'extended', 'comparison', 'showed', 'percent', 'performance', 'improvement', 'gas', 'task', 'environment', 'high', 'variance', 'shown', 'respect', 'offline', 'performance', 'represent', 'significant', 'difference', 'gas', 'several', 'interesting', 'difference', 'larger', 'population', 'higher', 'mutation', 'rate', 'population', 'tend', 'contain', 'variety', 'increasing', 'random', 'aspects', 'lower', 'generation', 'gap', 'tends', 'reduce', 'effects', 'selection', 'resulting', 'focused', 'search', 'aspects', 'lower', 'crossover', 'rate', 'small', 'scaling', 'window', 'tend', 'enhance', 'selective', 'pressure', 'general', 'observations', 'optimal', 'experiments', 'provide', 'performance', 'data', 'various', 'parameter', 'settings', 'given', 'independent', 'space', 'difficult', 'statistical', 'data', 'data', 'suggest', 'studies', 'experimental', 'data', 'several', 'observations', 'made', 'basis', 'small', 'number', 'experiments', 'example', 'mutation', 'rates', 'respect', 'online', 'performance', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'grefenstette', 'genetic', 'algorithms', 'adaptive', 'systems', 'population', 'size', 'fig', 'average', 'online', 'performance', 'various', 'population', 'sizes', 'according', 'experiment', 'performance', 'random', 'search', 'rates', 'parameter', 'settings', 'absence', 'mutation', 'associated', 'performance', 'suggests', 'mutation', 'performs', 'important', 'lost', 'values', 'best', 'line', 'performance', 'obtained', 'population', 'size', 'range', 'structures', 'shown', 'fig', 'plots', 'average', 'online', 'performance', 'function', 'population', 'size', 'mutation', 'rates', 'similar', 'graph', 'obtained', 'offline', 'performance', 'range', 'best', 'population', 'size', 'structures', 'large', 'generation', 'gap', 'improves', 'performance', 'elitist', 'selection', 'strategy', 'performance', 'data', 'suggests', 'noted', 'small', 'scaling', 'window', 'generations', 'associated', 'improvement', 'online', 'offline', 'performance', 'reasonable', 'scaling', 'pressure', 'selection', 'stages', 'search', 'small', 'populations', 'structures', 'online', 'performance', 'associated', 'high', 'crossover', 'rate', 'combined', 'low', 'mutation', 'rate', 'low', 'crossover', 'rate', 'combined', 'high', 'mutation', 'rate', 'sized', 'populations', 'structures', 'optimal', 'crossover', 'rate', 'appears', 'decrease', 'population', 'size', 'increases', 'example', 'best', 'percent', 'population', 'size', 'average', 'crossover', 'rate', 'best', 'crossover', 'rate', 'decreases', 'population', 'size', 'population', 'size', 'reasonable', 'smaller', 'populations', 'crossover', 'plays', 'important', 'role', 'premature', 'convergence', 'summary', 'performance', 'appear', 'nonlinear', 'function', 'control', 'parameters', 'available', 'data', 'limited', 'existence', 'multiple', 'local', 'optima', 'performance', 'space', 'interesting', 'compare', 'performance', 'nonlinear', 'search', 'techniques', 'optimizing', 'performance', 'order', 'experimental', 'results', 'algorithms', 'gas', 'applied', 'optimization', 'problem', 'included', 'experimental', 'trials', 'fig', 'online', 'performance', 'gas', 'image', 'registration', 'task', 'gas', 'trials', 'fig', 'offline', 'performance', 'gas', 'image', 'registration', 'task', 'task', 'environment', 'task', 'following', 'image', 'registration', 'problem', 'order', 'images', 'taken', 'different', 'times', 'different', 'points', 'necessary', 'determine', 'transformation', 'registration', 'map', 'image', 'original', 'image', 'target', 'image', 'registration', 'problem', 'important', 'diverse', 'fields', 'approach', 'image', 'registration', 'problem', 'define', 'parameterized', 'class', 'transformations', 'apply', 'task', 'searching', 'class', 'optimal', 'transformation', 'transformation', 'original', 'image', 'target', 'image', 'response', 'surface', 'given', 'pair', 'images', 'function', 'transformation', 'average', 'gray', 'level', 'differences', 'corresponding', 'original', 'image', 'target', 'image', 'class', 'problems', 'appears', 'difficult', 'conventional', 'nonlinear', 'programming', 'algorithms', 'due', 'presence', 'many', 'local', 'minima', 'experiments', 'conducted', 'compare', 'effectiveness', 'algorithms', 'gas', 'sample', 'registration', 'problem', 'consisting', 'pair', 'images', 'produced', 'significant', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'vol', 'smc', 'january', 'february', 'experiment', 'runs', 'pair', 'images', 'run', 'evaluating', 'candidate', 'transformations', 'fig', 'compares', 'online', 'performance', 'gas', 'shows', 'small', 'significant', 'improvement', 'online', 'performance', 'gas', 'problem', 'fig', 'shows', 'produces', 'significant', 'difference', 'offline', 'performance', 'gas', 'results', 'consistent', 'results', 'experiments', 'indicate', 'results', 'applicable', 'optimization', 'problems', 'conclusion', 'experiments', 'performed', 'search', 'optimal', 'given', 'set', 'numerical', 'optimization', 'problems', 'previous', 'experiments', 'show', 'standard', 'gas', 'outperforms', 'several', 'classical', 'optimization', 'techniques', 'task', 'environment', 'goal', 'experiments', 'identify', 'least', 'gas', 'experiments', 'identifying', 'control', 'parameters', 'settings', 'optimize', 'respect', 'described', 'performance', 'metrics', 'experimental', 'data', 'suggests', 'possible', 'optimize', 'control', 'parameters', 'performance', 'obtained', 'range', 'control', 'parameter', 'settings', 'present', 'approach', 'limited', 'several', 'ways', 'necessary', 'choose', 'particular', 'parameterized', 'explore', 'particular', 'recombination', 'operators', 'multipoint', 'crossover', 'strategies', 'inclusion', 'crowding', 'factor', 'second', 'considered', 'unconstrained', 'optimization', 'procedures', 'noted', 'ways', 'incorporate', 'constraints', 'remains', 'future', 'research', 'determine', 'presence', 'constraints', 'affects', 'optimal', 'control', 'parameters', 'metalevel', 'experiments', 'represent', 'number', 'encouraging', 'results', 'appear', 'applicable', 'wide', 'class', 'optimization', 'problems', 'alternative', 'approach', 'optimization', 'modify', 'parameters', 'search', 'many', 'optimization', 'problems', 'number', 'evaluations', 'performed', 'reasonable', 'amount', 'allow', 'evaluations', 'modify', 'search', 'techniques', 'significant', 'degree', 'experiments', 'described', 'important', 'identify', 'optimal', 'parameter', 'settings', 'performance', 'measures', 'considered', 'data', 'suggests', 'several', 'control', 'parameters', 'lead', 'theoretical', 'concerning', 'behavior', 'genetic', 'algorithms', 'references', 'genetic', 'algorithms', 'function', 'optimizers', 'thesis', 'dept', 'computer', 'communication', 'sciences', 'univ', 'michigan', 'intelligent', 'behavior', 'adaptation', 'task', 'environment', 'thesis', 'dept', 'computer', 'communication', 'sciences', 'univ', 'michigan', 'feb', 'genetic', 'algorithms', 'function', 'optimization', 'thesis', 'computer', 'science', 'dept', 'univ', 'adaptive', 'search', 'simulated', 'evolution', 'thesis', 'dept', 'computer', 'communication', 'sciences', 'univ', 'michigan', 'methods', 'optimization', 'behavior', 'class', 'genetic', 'adaptive', 'systems', 'thesis', 'dept', 'computer', 'communication', 'sciences', 'univ', 'michigan', 'adaptive', 'system', 'design', 'genetic', 'approach', 'ieee', 'trans', 'syst', 'man', 'vol', 'smc', 'choice', 'step', 'length', 'crucial', 'factor', 'performance', 'variable', 'metric', 'algorithms', 'numerical', 'methods', 'nonlinear', 'optimization', 'york', 'optimization', 'techniques', 'simulation', 'grefenstette', 'van', 'image', 'registration', 'genetic', 'search', 'proc', 'ieee', 'apr', 'fogel', 'artificial', 'intelligence', 'simulated', 'evolution', 'york', 'wiley', 'layout', 'genetic', 'algorithms', 'proc', 'conf', 'genetic', 'algorithms', 'applications', 'july', 'non', 'genetic', 'adaptive', 'search', 'thesis', 'dept', 'computer', 'communication', 'sciences', 'univ', 'michigan', 'chen', 'fast', 'matching', 'non', 'images', 'proc', 'vol', 'ieee', 'goldberg', 'computer', 'gas', 'operation', 'genetic', 'algorithms', 'rule', 'learning', 'thesis', 'dept', 'eng', 'univ', 'michigan', 'grefenstette', 'van', 'genetic', 'algorithms', 'traveling', 'salesman', 'problem', 'proc', 'conf', 'genetic', 'algorithms', 'applications', 'july', 'holland', 'adaptation', 'natural', 'artificial', 'systems', 'univ', 'michigan', 'ann', 'arbor', 'proc', 'int', 'machine', 'learning', 'workshop', 'june', 'artificial', 'genetic', 'adaptation', 'computer', 'control', 'systems', 'thesis', 'dept', 'computer', 'communication', 'sci', 'univ', 'michigan', 'basic', 'concepts', 'digital', 'automatic', 'registration', 'images', 'digital', 'models', 'proc', 'ieee', 'workshop', 'computer', 'representation', 'control', 'analysis', 'genetic', 'pattern', 'proc', 'national', 'conf', 'rosenbrock', 'automatic', 'method', 'finding', 'least', 'value', 'function', 'computer', 'vol', 'oct', 'test', 'functions', 'multimodal', 'search', 'techniques', 'fifth', 'ann', 'conf', 'inform', 'sci', 'syst', 'flexible', 'learning', 'problem', 'solving', 'heuristics', 'adaptive', 'search', 'proc', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply']"
4,2,1,"An Evolution Strategy for Multiobjective Optimization Lino Costa and Pedro Oliveira Departamento de Produsk e Sistemas Escola de Engenharia, Universidade do Minho Campus de Gualtar, 4710 Braga, Portugal { 1aqpno)Qdps. uminho.pt Abstract - Almost all approaches to multiobjective optimization are based on Genetic Algorithms, and implementations based on Evolution Strategies (ESs) are very rare. In this paper, a new approach to multiobjective optimization, based on ESs, is presented. The comparisons with other algorithms indicate a good performance of the Multiobjective Elitist Evolution Strategy. I. INTRODUCTION Solving multiobjective engineering problems is a very difficult task due to, in general, for this class of problems, the objectives conflict across a high-dimensional problem space. Thus, the interaction between the multiple objectives gives rise to a set of efficient solutions, known as the Pareteoptimal solutions. During the past decade, the application of evolutionary algorithms to multiobjective optimization has been investigated by several authors, such as Schaffer [lo], Fonseca and Fleming [5], Horn et al. (41, Srinivas and Deb [12] and Zitzler and Thiele [14]. Almost all approaches are based on Genetic Algorithms (GAS) [2] which were extended in order to track multiobjective problems. On the other hand, implementations based on Evolution Strategies (ESs) [8] are very rare, such as the algorithm proposed by Knowles and Corne [7]. However, the latter approach does not use some traditional features of ESs, namely, the real coding of decision variables and the adaptation of step sizes for mutation. Thus, it is crucial to investigate how to extend ESs to multiobjective optimization, since, in the past, they prove to be powerful single objective optimizers. In this paper, a new approach to multiobjective optimization, based on ESs, is presented. In the new algorithm, an effort was made in order to maintain the main features of traditional ESs as single objective optimizers. Several mechanisms, like elitism, have been introduced in order to improve the algorithm performance, as previously suggested by Zitzler et al. [15] and Van Veldhuizen and Lamont [13]. In section 2, a short introduction to ES is presented. Section 3 describes the Multiobjective Elitist Evolution Strategy (MEES) implemented. Next, the results of the application to several problems are presented. Finally, some conclusions and future work are addressed. Figure I The (p + A) Evolution Strategy Current Next Generation .Generation p Parents 1 Offspring p+1 Offspring p Parents 4 11. EVOLUTION STRATEGIES Evolution Strategies are search procedures that mimic the natural evolution of the species in the natural systems. They were first reported by Rechenberg [8][9] and later by Schwefel [ll]. ESs were developed to solve single objective optimization problems. Like GAS, they work with populations of candidate solutions, requiring only data based on the objective function and constraints, and no derivatives or other auxiliary knowledge. However, ESs work directly with the real representation of the decision variables and the transitions rules are deterministic (in particular, selection is a deterministic procedure). In spite of, traditionally, the search of new points was based on one single operator, the mutation operator, more recently, a recombination operator was introduced. One of the most promising features of ESs is that they use adaptive step sizes for mutation. Figure I illustrates the (p+X)-ES. The (p, X)-ES is similar differing, basically, on the selection procedure. Thus, in (p + X)-ES, at a given generation, there are p parents, and X offspring generated by mutation. Mutation creates new points by adding random normal distributed quantities with mean zero and variance u:. It is important to note that, for each decision variable, an individual standard deviation ui is used (controlling the step sizes). Then, the p+A members are sorted according to their objective function values. Finally, the best p of all the p+X members become the parents of the next generation (i.e., the selection takes place between the p+X members). On the other hand, in (p,X)-ES, the p best of the X members generated become the parents of the next generation (i.e., the selection takes place between the X members). 0-7803-7282402/$10.W0 2 2 IE EE 97 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:51 UTC from IEEE Xplore. Restrictions apply. For many problems, X/p x 7 is suggested. During the search, the step sizes for mutation are adapted. Several self-adaptation schemes are possible. One possibility is to actualize the standard deviations oi (for each decision variable) according to the equation: where zi N N(0, Ao2), z N N(0, Ad2) and Ao and Ad are parameters of the algorithm. Schwefel [ll] has reported a remarkable acceleration in the search process, as well as, the facilitation of selfadaptation of parameters by introducing a recombination operator. Basically, the recombination operator consists on, before mutation, to recombine a set of ch+ sen parents to find a new solution. A given number p (1 5 p 5 p) of parents are randomly chosen for recombination. When p = 1 then there is no recombination. Thus, the nomenclature for ESs can now be extended, and ESs with recombination are usually referred as (p/p + X)-ES or (p/p, X)-ES. Two types of recombination are, mainly, considered: intermediate and discrete recombination. In the intermediate recombination, the components of the offspring are obtained by calculating the average of the corresponding components of parents (randomly selected from the population). In the discrete recombination, each component of the offspring is chosen from one of the p parents at random. This procedure allows different combinations of the values of the decision variables from existing solutions in the population. 111. A MULTIOBJECTIVE ELITIST EVOLUTION STRATEGY The MEES approach to multiobjective optimization differs from conventional ESs with respect to the selection operator emphasizing the non-domination of solutions. Non-domination is tested at each generation in the selection phase, thus defining an approximation to the Pareto optimal set. On the other hand, a sharing method is used to distribute the solutions in the population over the Pareto-optimal region. The usual deterministic selection was also modified in order to track multiobjective optimization. The real representation of the decision variables, mutation and recombination operators remain as usual. The step sizes for mutation were adapted with a non-isotropic self-adaptation scheme as in equation 1. A. Fitness Assignment For each generation, all non-dominated solutions of the X or p + X solutions will constitute the 1st front. To these solutions a fitness value of 1 is assigned. In order to maintain diversity, a sharing scheme is then applied to the fitness values of these solutions [l]. Thus, the fitness value of each solution is divided by a quantity, called niche count, proportional to the number of solutions having a distance inferior to a parameter, the u&ore. All distances are measured in objective space. Thereafter, the solutions of the 1st front are ignored temporarily, and the rest of solutions are processed. To the second level of non-dominated solutions is assigned a fitness value equal to 1 plus the worst computed fitness value from the solutions in 1st front. Next, the fitness value of each solution in the 2nd front is divided by the respective niche count value. This process is repeated till all the X or p+X solutions are assigned a fitness value. This fitness assignment process will emphasize the non-domination of solutions, since the fitness values of all solutions in the 1st front will have a value inferior to all the fitness values of solutions in the 2nd front, and so on. Moreover, the co-existence of multiple non-dominated solutions is encouraged by the sharing scheme. B. Selection Operator In the simplest form, at each generation, only p from the X or p + X solutions are selected for next generation. Two situations were considered: if the number of solutions in 1st front, 711, is not greater than p, then a deterministic selection is performed; Otherwise, if nl is greater than p, then a tournament selection is performed. The deterministic selection consists on, after sorting the X or p + X offspring according to their fitness values, to select the p best (the ones with lower fitness values). This selection is obviously similar to the traditional selection of ESs, in the sense that only the best individuals will be present on the next generation. On the other hand, when the number of solutions in the 1st front is high (greater than p) then a selection scheme guaranteing that all nondominated solutions have a possibility of being present in the next generation is adopted. This selection consists on, after sorting the X or p + X offspring, performing a tournament between solutions of the 1st front. The tournament consists on picking two individuals from the offspring and then the best one is selected. C. Elitist Scheme The elitist technique is based on a separate population, the secondary population (SP) composed of all (or a part of) potential Pareto optimal solutions found so far during the search process. In this sense, SP is completely 0-7803-72824OZ$l0.00Q 2002 IEEE 98 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:51 UTC from IEEE Xplore. Restrictions apply. independent of the main population and, at the end of the entire search, it contains the set of all non-dominated solutions generated so far. A parameter 0 is introduced in order to control the elitism level. This parameter states the maximum number of non-dominated solutions of SP, the so-called elite, that will be introduced in main population. These nondominated solutions will effectively participate in the search process. If the number of solutions in SP (nsp) is greater or equal than 8, then 0 non-dominated solutions are randomly selected from SP to constitute the elite. Otherwise, only nsp non-dominated solutions are selected from SP to constitute the elite. In the latter case, the elite will only have nsp members. In its simplest form, for all generations, the new potential Pareto optimal solutions found are stored in SP. The SP update implies the determination of Pareto optimality of all solution stored so far, in order to eliminate those that became dominated. As the size of SP grows, the time to complete this operation may become significant. So, in order to prevent the growing computation times, in general, a maximum SP size is imposed. Thus, the algorithm consists on, for all generations, to store, in SP, each Pareto optimal solution 2nd found in the main population if 1. all solutions in SP are different of 2nd; 2. none of the solutions in SP dominates xnd. Next, all solutions in SP that became dominated are eliminated. As mentioned, as the size of SP increases, the execution time and memory requirements also increase. So, it is convenient to keep relatively small sizes of SP. In this sense, the previous algorithm can be modified accordingly. A new parameter d is introduced, stating the minimum desirable distance in objective space between potential Pareto optimal solutions in SP. So, the algorithm is modified by the introduction of the following step: 3. the distance from 2nd to any of the non-dominated solutions in SP is greater than d (euclidean distance measured on objective space). IV. RESULTS Several experiments were carried out in order to study the effect of the parameters of the elitist scheme, as well as, to compare its performance with some other evolutionary multiobjective approaches. ZDT6 (n = 10) x, E [O, 11 i = 1, ..., n A. Test Problems The multiobjective problems were chosen from Zitzler et al. [15]. All problems have two objective functions, no fl(z) = 1 - exp(-4x1)sin6(4xx1) TABLE I MULTIOBJECTIVE PROBLEMS I Problem 1 Objective functions I ZDTl (n = 30) I constraints and the Pareto-optimal solutions are known. Table I describes these problems, showing the number of variables and their bounds. The MEES was applied to each problem with a reasonable set of values for the parameters (no effort was made in finding the best parameter setting for each problem). The initial values for standard deviations (step sizes) and parameters for its self adaptation during the search were the suggested for ESs in single objective optimization. The points in the initial population were generated randomly. Several scenarios were considered in order to study the effects of the recombination operator, the selection mechanism, the elitism and d parameter. Thus, for each scenario all parameters values were kept constant except the feature under study (interaction between parameters was not studied in this phase). B. Metrics of Performance Comparing different multiobjective optimization algorithms is substantially more complex than for the case of single objective optimizers, because the optimization goal itself consists on finding a non-dominated set of solutions that is: a good approximation to the true Pareto optimal set (the distance between the approximation and the true sets should be minimized); e a well distributed set in the objective space. Several attempts can be found in literature to express the above statements by means of quantitative metrics. The metric here considered is described by Knowles and Corne [7] and is based on a statistical method proposed by Fonseca and Fleming [6]. For several executions of the algorithms, a statistical test based on the Mann-Whitney 0-7803-7282402/$10.00 02002 IEEE 99 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:51 UTC from IEEE Xplore. Restrictions apply. Figure I1 Results for ZDT2 problem with 5 and 30 variables 1 B \ rank-sum test is applied to the previous collected data. The results of a comparison can be presented in a pair [a, b], where a is the percentage of the objective space on which algorithm A was found statistically superior to B, and b gives the similar percentage for algorithm B. Thus, a is the percentage of the objective space where algorithm A is 'unbeaten' and, b is the percentage of the objective space where algorithm B is 'unbeaten'. So, typically, if a x b x 100% then the algorithms A and B have similar results. For all results presented in the paper the statistical significance is at the 5% level and 1000 sampling lines were used. C. Influence of Recombination The MEES without the recombination operator seems to have difficulties in obtaining a well distributed set of non-dominated solutions when applied to multiobjective problems with a high number of variables. This is illustrated by Figure 11, which represents the non-dominated solutions obtained, in one single run, for ZDT2 problem with 5 and 30 variables for an (100+150)-ES without any recombination and, with a,ha,,=0.027, d = 0 and 8 = 0. The stopping criterion was to terminate the execution after 250 generations. It is clear that a good definition of the approximation to the Pareto-optimal set was obtained for the ZDT2 problem with 5 variables. However, for 30 variables, the results are poor, in the sense, that the solutions are far from the true Pareto-optimal front and, they are not uniformly distributed in the objective space. Since MEES without recombination seems to perform poorly for large dimensional multiobjective problems, several scenarios of MEES with recombination were tested. Scenarios that combine the most popular recombination schemes were considered: without any recombination (NOrec scenario); intermediate recombination on variables and stan- TABLE I1 INFLUENCE OF RECOMBINATION (ZDT1 PROBLEM) Figure 111 Results for ZDT2 problem with and without recombination I i ')i 1 nbl dard deviations (IIrec scenario); intermediate recombination on variables and discrete recombination on standard deviations (IDrec scenario); discrete recombination on variables and intermediate recombination on standard deviations (DIrec scenario); discrete recombination on variables and standard deviations (DDrec scenario). For scenarios with recombination, an (100/100,25O)-ES was applied (obviously, an (100,25O)-ES was considered when no recombination exists) with a,ha,,=0.027, d = 0 and 8 = 0. As before, the stopping criterion was to terminate the execution after 250 generations. For each scenario, the MEES was executed 30 times. Table I1 presents the results obtained for all scenarios for the ZDTl problem. All scenarios were compared in pairs using the statistical technique as previously described. It is clear that the best results were obtained for DDrec scenario, i.e., when discrete recombination is applied to decision variables and standard deviations. The MEES with discrete recombination on variables and standard deviations (an (100/100,25O)-ES) can now be compared with the performance of MEES without any recombination for the ZDT2 problem. The comparison is illustrated by Figure 111, which represents the non-dominated solutions obtained in one single run after 250 generations. The approximation to the Pareto-optimal front obtained with the MEES with recombination, was far better than the obtained without any recombination. 0-7803-7282402/$10.00 02002 IEEE 100 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:51 UTC from IEEE Xplore. Restrictions apply. TABLE 111 INFLUENCE OF ELITISM (ZDT1 PROBLEM) ZDTl HLGA VEGA NSGA MEESo [100,8.3] [lOO,ll.4] [100,1.3] HLGA - [75.2,77.5] [8.8,100] VEGA [ l Z . O , l O O ] NSGA S P E A Figure IV Results for ZDTZ problem for 0 = 0 and 0 = 10 .___ .____ LDRPm` (1wloollWKs 0- = QSQ7 d V oax . O B X = SPEA MEESlo [1.7,100] [1.7,100] [8.3,100] [8.3,100] [11.3,100] (11.2,100] [1.3,100] [1.3.100] II inn1 u ` ` I*) -. ZDT2 MEESo HLGA VEGA NSGA SPEA D. Influence of Elitism In order to study the influence of the elitism level, an (100/100,25O)-ES with discrete recombination on variables and standard deviations was applied to the ZDTl problem. The same values for the parameters were considered with the exception of 8, which was varied from 0 to 100 as in Table 111. The d parameter was fixed equal to 0 in order to guarantee that in SP all non-dominated solutions found during the search are present. This table shows that for increasing values of 8 there is a degradation of the performance of the algorithm, due to the lack of diversity in main population. However, it is also clear that, for the values of 8 tested, the best results were obtained with elitism. Furthermore, consistently, the best results were obtained with 8 = 10. The comparison between different levels of elitism is illustrated by Figure IV, which represents the non-dominated solutions obtained in one single run, after 250 generations for the ZDT2 problem, with 8 = 0 and 8 = 10. It is clear that the approximation to the Pareto-optimal front obtained with 8 = 10 was far better than with 8 = 0. HLGA VEGA NSGA SPEA MEESln [100,16.3] [100,3.3] [100,3.5] 117.8.97.31 [1.5,100] -~ E. Comparison with other algorithms The elitist ES was compared with four algorithms for the test problems (ZDT1 to ZDT6 problems). These results were published by Ziztler et al. [15]. The algorithms considered here are: HLGA: Hajela and Link weighted-sum based a p VEGA: Vector Evaluated Genetic Algorithm [lo]; proach [3]; ZDT3 MEESo HLGA VEGA NSGA HLGA VEGA NSGA SPEA MEESln [100,13.7] [100,6.6] [100,2.4] [2.4,100] [2.7,100] [55.9,82.9] [14.3,100] [13.7,100] 115.6,lOOI [6.9,100] [6.6,100] [7.3,100] [2.4,100] [2.7,100] TABLE V COMPARISON BETWEEN ALGORITHMS (ZDTZ PROBLEM) ZDT4 HLGA VEGA NSGA SPEA MEES~ HLGA VEGA NSGA SPEA MEESln [87.6,47.4] [33.1,100] [33.1,100] [32.7,100] [82.2,100] [16.7,100] (13.7,lOOI [i00,32.7] [i00.9.8] [100,16.7] [ino,i3.7] [ioo,z7.9] [10.6,1001 [10.6,100] [9.8,100] NSGA: Nondominated Sorting Genetic Algorithm [12]; SPEA: Strength Pareto Evolutionary Algorithm [14]. For MEES, an (100/100,150)-ES with discrete recombination in variables and standard deviations was considered. The MEES was applied without and with elitism (MEESo and MEESlo, respectively). The d and gshare parameters were fixed equal to 0 and 0.027, respectively. The stopping criterion was to terminate the search after 100 generations. As described with more detail in [15], for algorithms HLGA, VEGA, NSGA and SPEA, the population size was 100 (for SPEA the population size was 80 with an external non-dominated set of 20 points). The crossover and mutation rates were 0.8 and 0.01, respectively. The maximum number of generations was 250. The niching parameter was fixed in 0.48862. All algorithms were executed 30 times for each test problem and, for each run, the set of all non-dominated solutions generated during the entire search was taken as the outcome of one optimization run (off-line performance). The number of objective function evaluations was the same for algorithms HLGA, VEGA, NSGA and SPEA (approximately, 25000 evaluations). The number of objective function evaluations required by MEES was inferior than the other algorithms (approximately, 15000 evaluations). Tables IV to VI11 present the results of compari- TABLE VI COMPARISON BETWEEN ALGORITHMS (ZDTI PROBLEM) I SPEA I - I I - I - [ [0.9,100] J 0-7803-7282-4/02/s10.00 02002 IEEE 101 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:51 UTC from IEEE Xplore. Restrictions apply. TABLE VI11 COMPARISON BETWEEN ALGORITHMS (ZDTG PROBLEM) TABLE IX GLOBAL PERFORMANCE son of these algorithms with MEES. Two classes of algorithms can be distinguished, those that do not use elitism (HLGA, VEGA NSGA and MEESo) and, those that use, explicitly, elitism in the search (SPEA and MEESlo) . Thus, considering only the results obtained with non elitist algorithms, the best results were obtained by MEESo for all test problems considered. Moreover, MEESo has outperformed the elitist approaches SPEA in two problems (ZDT4 and ZDTG problems) and MEESlo in one problem (ZDT4 problem). However, MEESlo has beaten SPEA in all the problems considered. Table IX resumes the results obtained by different algorithms for all problems. The values in the table, for each algorithm, are the median percentage of the objective space that is ’unbeaten’ when compared with the remaining algorithms. From this table, it is clear that, in general, the elitism is useful in guiding the search. The best non elitist algorithm seems to be MEESo. SPEA, globally, outperformed MEESlo on ZDTG problem. V. CONCLUSIONS AND FUTURE WORK In this work, a new Elitist Evolution Strategy for multiobjective optimization was presented. This approach incorporates the main features of traditional single objective Evolution Strategies, like real representation of the decision variables and self-adaptation of step sizes. The algorithm was tested on several test problems in order to investigate the influence of some factors on its performance, as well as, to compare its performance with other multiobjective evolutionary approaches. As expected, the results indicated that recombination and elitism are essential for obtaining good approximations to the Pareto-optimal front. The Multiobjective Elitist Evolution Strategy without elitism (MEESo) outperformed the other non elitist approaches (HLGA, VEGA and NSGA) for all the test problems considered. The results of the Multiobjective Elitist Evolution Strategy with elitism (MEESlo) and SPEA were similar. It should be noted that the number of function evaluations required by MEES is inferior than the others algorithms being compared. Future work will concentrate on the study of parameters like population sizes, initial step sizes and selfadaptation schemes. The influence of the parameter that controls the density of points in the approximation set to the Pareto-optimal front will also be investigated. References [l] K. Deb and D. Goldberg. ”An investigation of niche and species formation in genetic function optimization”. Proceedings of the Third International Conference on Genetic Algorithms, pp. 42-50, 1989. D. Goldberg. Genetic Algorithms in Search,Optimization, and Machine Learning. Addison-Wesley,l989. P. Hajela and C.-Y. Lin. ”Genetic search strategies in multicriterion optimal design”. Structural Optimization, 4, pp. J. Horn, N. Nafploitis and D. Goldberg. “A niched Pareto genetic Algorithm for multi-objective optimization”. Proceedings of the First IEEE Conference on Evolutionary Computation, pp. 82-87, 1994. [5] C. M. Fonseca and P. J. Fleming. ”Genetic Algorithms for multi-objective optimization: Formulation, discussion and generalization”. Proceedings of the Fifth International Conference on Genetic Algorithms, s. Forrest, Ed. San Mateo, CA: Morgan Kauffman, pp. 416423, 1993. C. M. Fonseca and P. J. Fleming. ”On the Performance Assessment and Comparison of Stochastic Multiobjective Op timizers” Parallel Problem Solving from Nature IV, H.-M. Voigt, W. Ebeling, I. Rechenberg, H.-P. Schwefel, Eds Berlin: Germany: Springer, pp. 584-593, 1995. J. D. Knowles and D. W. Corne. ”Approximating the Nondominated Front Using the Pareto Archived Evolution Strategy”. Evolutionary Computation, Vol. 8(2), pp. 149-172, 2OOO. I. Rechenberg. Evolutionsstrategie ’94. Fkommann-Holzboog, Stuttgart, 1994. I. Rechenberg. Cybernetic Solution Path of an Experimental Problem. Royal Aircraft Establishment, Library Tkanslation No. 1122, Farnborough, England, 1964. [lo] J. D. SchafTer. ”Multiple objective optimization with vector evaluated genetic algorithms”. Proceedings of the First International Conference on Genetic Algorithms, J. J Grefensttete, Ed. Hillsdale, pp.93-100, 1985. [ll] H-P. Schwefel. Evolution and Optimal Seeking. John Wiley and Sons, 1995. [12] N. Srinivas and K. Deb. ”Multi-Objective function optimization using non-dominated sorting genetic algorithms”. Evolutionary Computation, Vol. 2, pp. 221-248, 1995. [13] D. Van Veldhuizen and G. Lamont. ”MultiObjective Evolutionary Algorithms: Analysing the State-of-the-Art”. Evolutionary Computation, Vol. 8(2), pp. 125-147, 2000. [14] E. Zitzler and L. Thiele. ”Multiobjective evolutionary algorithms: a comparative case study and the strength pareto a p proxh” . IEEE %nsactions on Evolutionary Computation, 3(4), pp. 257-271, 1999. [15] E. Zitzler, K. Deb and L. Thiele. ”Comparison of multiobjective evolutionary algorithms: Empirical results”. Evolutionary Computation, Vol. 8, pp. 173-195, 2000. (21 [3] 99-107, 1992. [4] [6] [7] [8] [9] 0-7803-7282-4/02/$10.00 02002 IEEE 102 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:51 UTC from IEEE Xplore. Restrictions apply.","['evolution', 'strategy', 'multiobjective', 'optimization', 'abstract', 'approaches', 'multiobjective', 'optimization', 'genetic', 'algorithms', 'implementations', 'evolution', 'strategies', 'ess', 'approach', 'multiobjective', 'optimization', 'ess', 'presented', 'comparisons', 'algorithms', 'indicate', 'performance', 'multiobjective', 'elitist', 'evolution', 'strategy', 'introduction', 'solving', 'multiobjective', 'engineering', 'problems', 'difficult', 'task', 'due', 'general', 'class', 'problems', 'objectives', 'high', 'dimensional', 'problem', 'space', 'interaction', 'multiple', 'objectives', 'gives', 'set', 'efficient', 'solutions', 'known', 'solutions', 'past', 'decade', 'application', 'evolutionary', 'algorithms', 'multiobjective', 'optimization', 'investigated', 'several', 'authors', 'schaffer', 'fonseca', 'fleming', 'horn', 'srinivas', 'deb', 'zitzler', 'thiele', 'approaches', 'genetic', 'algorithms', 'gas', 'extended', 'order', 'track', 'multiobjective', 'problems', 'hand', 'implementations', 'evolution', 'strategies', 'ess', 'algorithm', 'knowles', 'corne', 'latter', 'approach', 'traditional', 'features', 'ess', 'real', 'decision', 'variables', 'adaptation', 'step', 'sizes', 'mutation', 'crucial', 'investigate', 'extend', 'ess', 'multiobjective', 'optimization', 'past', 'powerful', 'single', 'objective', 'optimizers', 'approach', 'multiobjective', 'optimization', 'ess', 'presented', 'algorithm', 'effort', 'made', 'order', 'maintain', 'main', 'features', 'traditional', 'ess', 'single', 'objective', 'optimizers', 'several', 'mechanisms', 'elitism', 'introduced', 'order', 'improve', 'algorithm', 'performance', 'suggested', 'zitzler', 'van', 'veldhuizen', 'section', 'short', 'introduction', 'presented', 'section', 'describes', 'multiobjective', 'elitist', 'evolution', 'strategy', 'mees', 'implemented', 'next', 'results', 'application', 'several', 'problems', 'presented', 'conclusions', 'future', 'figure', 'evolution', 'strategy', 'current', 'next', 'generation', 'generation', 'parents', 'offspring', 'offspring', 'parents', 'evolution', 'strategies', 'evolution', 'strategies', 'search', 'procedures', 'natural', 'evolution', 'species', 'natural', 'systems', 'reported', 'rechenberg', 'schwefel', 'ess', 'developed', 'solve', 'single', 'objective', 'optimization', 'problems', 'gas', 'populations', 'candidate', 'solutions', 'data', 'objective', 'function', 'constraints', 'knowledge', 'ess', 'real', 'representation', 'decision', 'variables', 'transitions', 'rules', 'deterministic', 'particular', 'selection', 'deterministic', 'procedure', 'search', 'points', 'single', 'operator', 'mutation', 'operator', 'recombination', 'operator', 'introduced', 'promising', 'features', 'ess', 'adaptive', 'step', 'sizes', 'mutation', 'figure', 'illustrates', 'similar', 'selection', 'procedure', 'given', 'generation', 'parents', 'offspring', 'generated', 'mutation', 'mutation', 'creates', 'points', 'adding', 'random', 'normal', 'distributed', 'quantities', 'mean', 'zero', 'variance', 'important', 'note', 'decision', 'variable', 'individual', 'standard', 'deviation', 'used', 'controlling', 'step', 'sizes', 'members', 'sorted', 'according', 'objective', 'function', 'values', 'best', 'members', 'become', 'parents', 'next', 'generation', 'selection', 'takes', 'place', 'members', 'hand', 'best', 'members', 'generated', 'become', 'parents', 'next', 'generation', 'selection', 'takes', 'place', 'members', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'many', 'problems', 'suggested', 'search', 'step', 'sizes', 'mutation', 'adapted', 'several', 'self', 'adaptation', 'schemes', 'possible', 'possibility', 'standard', 'deviations', 'decision', 'variable', 'according', 'equation', 'parameters', 'algorithm', 'schwefel', 'reported', 'acceleration', 'search', 'process', 'parameters', 'introducing', 'recombination', 'operator', 'recombination', 'operator', 'consists', 'mutation', 'set', 'parents', 'find', 'solution', 'given', 'number', 'parents', 'chosen', 'recombination', 'recombination', 'ess', 'extended', 'ess', 'recombination', 'referred', 'types', 'recombination', 'considered', 'intermediate', 'discrete', 'recombination', 'intermediate', 'recombination', 'components', 'offspring', 'obtained', 'calculating', 'average', 'corresponding', 'components', 'parents', 'selected', 'population', 'discrete', 'recombination', 'component', 'offspring', 'chosen', 'parents', 'random', 'procedure', 'allows', 'different', 'combinations', 'values', 'decision', 'variables', 'existing', 'solutions', 'population', 'multiobjective', 'elitist', 'evolution', 'strategy', 'mees', 'approach', 'multiobjective', 'optimization', 'differs', 'conventional', 'ess', 'respect', 'selection', 'operator', 'non', 'domination', 'solutions', 'non', 'domination', 'tested', 'generation', 'selection', 'phase', 'defining', 'approximation', 'pareto', 'optimal', 'set', 'hand', 'sharing', 'method', 'used', 'distribute', 'solutions', 'population', 'pareto', 'optimal', 'region', 'usual', 'deterministic', 'selection', 'modified', 'order', 'track', 'multiobjective', 'optimization', 'real', 'representation', 'decision', 'variables', 'mutation', 'recombination', 'operators', 'remain', 'usual', 'step', 'sizes', 'mutation', 'adapted', 'non', 'isotropic', 'self', 'adaptation', 'scheme', 'equation', 'fitness', 'assignment', 'generation', 'non', 'dominated', 'solutions', 'solutions', 'constitute', 'front', 'solutions', 'fitness', 'value', 'assigned', 'order', 'maintain', 'diversity', 'sharing', 'scheme', 'applied', 'fitness', 'values', 'solutions', 'fitness', 'value', 'solution', 'divided', 'quantity', 'called', 'niche', 'count', 'proportional', 'number', 'solutions', 'distance', 'inferior', 'parameter', 'distances', 'measured', 'objective', 'space', 'solutions', 'front', 'rest', 'solutions', 'processed', 'second', 'level', 'non', 'dominated', 'solutions', 'assigned', 'fitness', 'value', 'equal', 'worst', 'computed', 'fitness', 'value', 'solutions', 'front', 'next', 'fitness', 'value', 'solution', 'front', 'divided', 'niche', 'count', 'value', 'process', 'repeated', 'solutions', 'assigned', 'fitness', 'value', 'fitness', 'assignment', 'process', 'non', 'domination', 'solutions', 'fitness', 'values', 'solutions', 'front', 'value', 'inferior', 'fitness', 'values', 'solutions', 'front', 'moreover', 'existence', 'multiple', 'non', 'dominated', 'solutions', 'sharing', 'scheme', 'selection', 'operator', 'simplest', 'form', 'generation', 'solutions', 'selected', 'next', 'generation', 'situations', 'considered', 'number', 'solutions', 'front', 'greater', 'deterministic', 'selection', 'performed', 'greater', 'tournament', 'selection', 'performed', 'deterministic', 'selection', 'consists', 'sorting', 'offspring', 'according', 'fitness', 'values', 'select', 'best', 'ones', 'lower', 'fitness', 'values', 'selection', 'similar', 'traditional', 'selection', 'ess', 'sense', 'best', 'individuals', 'present', 'next', 'generation', 'hand', 'number', 'solutions', 'front', 'high', 'greater', 'selection', 'scheme', 'nondominated', 'solutions', 'possibility', 'present', 'next', 'generation', 'adopted', 'selection', 'consists', 'sorting', 'offspring', 'performing', 'tournament', 'solutions', 'front', 'tournament', 'consists', 'individuals', 'offspring', 'best', 'selected', 'elitist', 'scheme', 'elitist', 'technique', 'separate', 'population', 'secondary', 'population', 'composed', 'part', 'potential', 'pareto', 'optimal', 'solutions', 'found', 'search', 'process', 'sense', 'ieee', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'independent', 'main', 'population', 'end', 'entire', 'search', 'contains', 'set', 'non', 'dominated', 'solutions', 'generated', 'parameter', 'introduced', 'order', 'control', 'elitism', 'level', 'parameter', 'maximum', 'number', 'non', 'dominated', 'solutions', 'called', 'elite', 'introduced', 'main', 'population', 'nondominated', 'solutions', 'participate', 'search', 'process', 'number', 'solutions', 'greater', 'equal', 'non', 'dominated', 'solutions', 'selected', 'constitute', 'elite', 'non', 'dominated', 'solutions', 'selected', 'constitute', 'elite', 'latter', 'case', 'elite', 'members', 'simplest', 'form', 'generations', 'potential', 'pareto', 'optimal', 'solutions', 'found', 'stored', 'update', 'implies', 'pareto', 'optimality', 'solution', 'stored', 'order', 'eliminate', 'became', 'dominated', 'size', 'complete', 'operation', 'become', 'significant', 'order', 'growing', 'computation', 'times', 'general', 'maximum', 'size', 'algorithm', 'consists', 'generations', 'store', 'pareto', 'optimal', 'solution', 'found', 'main', 'population', 'solutions', 'different', 'none', 'solutions', 'dominates', 'next', 'solutions', 'became', 'dominated', 'eliminated', 'mentioned', 'size', 'increases', 'execution', 'memory', 'requirements', 'increase', 'keep', 'small', 'sizes', 'sense', 'previous', 'algorithm', 'modified', 'parameter', 'introduced', 'minimum', 'desirable', 'distance', 'objective', 'space', 'potential', 'pareto', 'optimal', 'solutions', 'algorithm', 'modified', 'introduction', 'following', 'step', 'distance', 'non', 'dominated', 'solutions', 'greater', 'euclidean', 'distance', 'measured', 'objective', 'space', 'results', 'several', 'experiments', 'carried', 'order', 'study', 'effect', 'parameters', 'elitist', 'scheme', 'compare', 'performance', 'evolutionary', 'multiobjective', 'approaches', 'test', 'problems', 'multiobjective', 'problems', 'chosen', 'zitzler', 'problems', 'objective', 'functions', 'exp', 'table', 'multiobjective', 'problems', 'problem', 'objective', 'functions', 'zdtl', 'constraints', 'pareto', 'optimal', 'solutions', 'known', 'table', 'describes', 'problems', 'showing', 'number', 'variables', 'bounds', 'mees', 'applied', 'problem', 'reasonable', 'set', 'values', 'parameters', 'effort', 'made', 'finding', 'best', 'parameter', 'setting', 'problem', 'initial', 'values', 'standard', 'deviations', 'step', 'sizes', 'parameters', 'self', 'adaptation', 'search', 'suggested', 'ess', 'single', 'objective', 'optimization', 'points', 'initial', 'population', 'generated', 'several', 'scenarios', 'considered', 'order', 'study', 'effects', 'recombination', 'operator', 'selection', 'mechanism', 'elitism', 'parameter', 'scenario', 'parameters', 'values', 'kept', 'constant', 'feature', 'study', 'interaction', 'parameters', 'studied', 'phase', 'metrics', 'performance', 'comparing', 'different', 'multiobjective', 'optimization', 'algorithms', 'complex', 'case', 'single', 'objective', 'optimizers', 'optimization', 'goal', 'consists', 'finding', 'non', 'dominated', 'set', 'solutions', 'approximation', 'true', 'pareto', 'optimal', 'set', 'distance', 'approximation', 'true', 'sets', 'minimized', 'distributed', 'set', 'objective', 'space', 'several', 'attempts', 'found', 'literature', 'means', 'metrics', 'metric', 'considered', 'described', 'knowles', 'corne', 'statistical', 'method', 'fonseca', 'fleming', 'several', 'algorithms', 'statistical', 'test', 'ieee', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'figure', 'results', 'problem', 'variables', 'rank', 'sum', 'test', 'applied', 'previous', 'collected', 'data', 'results', 'comparison', 'presented', 'pair', 'percentage', 'objective', 'space', 'algorithm', 'found', 'superior', 'gives', 'similar', 'percentage', 'algorithm', 'percentage', 'objective', 'space', 'algorithm', 'percentage', 'objective', 'space', 'algorithm', 'algorithms', 'similar', 'results', 'results', 'presented', 'statistical', 'level', 'sampling', 'lines', 'used', 'influence', 'recombination', 'mees', 'recombination', 'operator', 'seems', 'difficulties', 'obtaining', 'distributed', 'set', 'non', 'dominated', 'solutions', 'applied', 'multiobjective', 'problems', 'high', 'number', 'variables', 'illustrated', 'figure', 'represents', 'non', 'dominated', 'solutions', 'obtained', 'single', 'run', 'problem', 'variables', 'recombination', 'stopping', 'criterion', 'terminate', 'execution', 'generations', 'clear', 'definition', 'approximation', 'pareto', 'optimal', 'set', 'obtained', 'problem', 'variables', 'variables', 'results', 'poor', 'sense', 'solutions', 'true', 'pareto', 'optimal', 'front', 'distributed', 'objective', 'space', 'mees', 'recombination', 'seems', 'perform', 'large', 'dimensional', 'multiobjective', 'problems', 'several', 'scenarios', 'mees', 'recombination', 'tested', 'scenarios', 'combine', 'popular', 'recombination', 'schemes', 'considered', 'recombination', 'scenario', 'intermediate', 'recombination', 'variables', 'table', 'influence', 'recombination', 'problem', 'figure', 'results', 'problem', 'recombination', 'deviations', 'scenario', 'intermediate', 'recombination', 'variables', 'discrete', 'recombination', 'standard', 'deviations', 'scenario', 'discrete', 'recombination', 'variables', 'intermediate', 'recombination', 'standard', 'deviations', 'scenario', 'discrete', 'recombination', 'variables', 'standard', 'deviations', 'scenario', 'scenarios', 'recombination', 'applied', 'considered', 'recombination', 'exists', 'stopping', 'criterion', 'terminate', 'execution', 'generations', 'scenario', 'mees', 'executed', 'times', 'table', 'presents', 'results', 'obtained', 'scenarios', 'zdtl', 'problem', 'scenarios', 'compared', 'statistical', 'technique', 'described', 'clear', 'best', 'results', 'obtained', 'scenario', 'discrete', 'recombination', 'applied', 'decision', 'variables', 'standard', 'deviations', 'mees', 'discrete', 'recombination', 'variables', 'standard', 'deviations', 'compared', 'performance', 'mees', 'recombination', 'problem', 'comparison', 'illustrated', 'figure', 'represents', 'non', 'dominated', 'solutions', 'obtained', 'single', 'run', 'generations', 'approximation', 'pareto', 'optimal', 'front', 'obtained', 'mees', 'recombination', 'obtained', 'recombination', 'ieee', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'table', 'influence', 'elitism', 'problem', 'zdtl', 'hlga', 'vega', 'nsga', 'meeso', 'hlga', 'vega', 'nsga', 'figure', 'results', 'problem', 'spea', 'meeslo', 'meeso', 'hlga', 'vega', 'nsga', 'spea', 'influence', 'elitism', 'order', 'study', 'influence', 'elitism', 'level', 'discrete', 'recombination', 'variables', 'standard', 'deviations', 'applied', 'zdtl', 'problem', 'values', 'parameters', 'considered', 'exception', 'table', 'parameter', 'fixed', 'equal', 'order', 'guarantee', 'non', 'dominated', 'solutions', 'found', 'search', 'present', 'table', 'shows', 'increasing', 'values', 'performance', 'algorithm', 'due', 'lack', 'diversity', 'main', 'population', 'clear', 'values', 'tested', 'best', 'results', 'obtained', 'elitism', 'best', 'results', 'obtained', 'comparison', 'different', 'levels', 'elitism', 'illustrated', 'figure', 'represents', 'non', 'dominated', 'solutions', 'obtained', 'single', 'run', 'generations', 'problem', 'clear', 'approximation', 'pareto', 'optimal', 'front', 'obtained', 'hlga', 'vega', 'nsga', 'spea', 'comparison', 'algorithms', 'elitist', 'compared', 'algorithms', 'test', 'problems', 'problems', 'results', 'published', 'algorithms', 'considered', 'hlga', 'weighted', 'sum', 'vega', 'vector', 'evaluated', 'genetic', 'algorithm', 'meeso', 'hlga', 'vega', 'nsga', 'hlga', 'vega', 'nsga', 'spea', 'table', 'comparison', 'algorithms', 'problem', 'hlga', 'vega', 'nsga', 'spea', 'mees', 'hlga', 'vega', 'nsga', 'spea', 'nsga', 'nondominated', 'sorting', 'genetic', 'algorithm', 'spea', 'strength', 'pareto', 'evolutionary', 'algorithm', 'mees', 'discrete', 'recombination', 'variables', 'standard', 'deviations', 'considered', 'mees', 'applied', 'elitism', 'meeso', 'meeslo', 'parameters', 'fixed', 'equal', 'stopping', 'criterion', 'terminate', 'search', 'generations', 'described', 'detail', 'algorithms', 'hlga', 'vega', 'nsga', 'spea', 'population', 'size', 'spea', 'population', 'size', 'external', 'non', 'dominated', 'set', 'points', 'crossover', 'mutation', 'rates', 'maximum', 'number', 'generations', 'niching', 'parameter', 'fixed', 'algorithms', 'executed', 'times', 'test', 'problem', 'run', 'set', 'non', 'dominated', 'solutions', 'generated', 'entire', 'search', 'taken', 'outcome', 'optimization', 'run', 'line', 'performance', 'number', 'objective', 'function', 'evaluations', 'algorithms', 'hlga', 'vega', 'nsga', 'spea', 'evaluations', 'number', 'objective', 'function', 'evaluations', 'required', 'mees', 'inferior', 'algorithms', 'evaluations', 'tables', 'present', 'results', 'table', 'comparison', 'algorithms', 'problem', 'spea', 'ieee', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'table', 'comparison', 'algorithms', 'problem', 'table', 'global', 'performance', 'algorithms', 'mees', 'classes', 'algorithms', 'elitism', 'hlga', 'vega', 'nsga', 'meeso', 'elitism', 'search', 'spea', 'meeslo', 'considering', 'results', 'obtained', 'non', 'elitist', 'algorithms', 'best', 'results', 'obtained', 'meeso', 'test', 'problems', 'considered', 'moreover', 'meeso', 'outperformed', 'elitist', 'approaches', 'spea', 'problems', 'problems', 'meeslo', 'problem', 'problem', 'meeslo', 'spea', 'problems', 'considered', 'table', 'results', 'obtained', 'different', 'algorithms', 'problems', 'values', 'table', 'algorithm', 'median', 'percentage', 'objective', 'space', 'compared', 'remaining', 'algorithms', 'table', 'clear', 'general', 'elitism', 'useful', 'search', 'best', 'non', 'elitist', 'algorithm', 'seems', 'meeso', 'spea', 'outperformed', 'meeslo', 'problem', 'conclusions', 'future', 'elitist', 'evolution', 'strategy', 'multiobjective', 'optimization', 'presented', 'approach', 'incorporates', 'main', 'features', 'traditional', 'single', 'objective', 'evolution', 'strategies', 'real', 'representation', 'decision', 'variables', 'self', 'adaptation', 'step', 'sizes', 'algorithm', 'tested', 'several', 'test', 'problems', 'order', 'investigate', 'influence', 'factors', 'performance', 'compare', 'performance', 'multiobjective', 'evolutionary', 'approaches', 'expected', 'results', 'indicated', 'recombination', 'elitism', 'essential', 'obtaining', 'pareto', 'optimal', 'front', 'multiobjective', 'elitist', 'evolution', 'strategy', 'elitism', 'meeso', 'outperformed', 'non', 'elitist', 'approaches', 'hlga', 'vega', 'nsga', 'test', 'problems', 'considered', 'results', 'multiobjective', 'elitist', 'evolution', 'strategy', 'elitism', 'meeslo', 'spea', 'similar', 'noted', 'number', 'function', 'evaluations', 'required', 'mees', 'inferior', 'others', 'algorithms', 'compared', 'future', 'study', 'parameters', 'population', 'sizes', 'initial', 'step', 'sizes', 'schemes', 'influence', 'parameter', 'controls', 'density', 'points', 'approximation', 'set', 'pareto', 'optimal', 'front', 'investigated', 'references', 'deb', 'goldberg', 'investigation', 'niche', 'species', 'genetic', 'function', 'optimization', 'proceedings', 'third', 'international', 'conference', 'genetic', 'algorithms', 'goldberg', 'genetic', 'algorithms', 'search', 'optimization', 'machine', 'learning', 'addison', 'wesley', 'lin', 'genetic', 'search', 'strategies', 'multicriterion', 'optimal', 'design', 'optimization', 'horn', 'goldberg', 'pareto', 'genetic', 'algorithm', 'multi', 'objective', 'optimization', 'proceedings', 'ieee', 'conference', 'evolutionary', 'computation', 'fonseca', 'fleming', 'genetic', 'algorithms', 'multi', 'objective', 'optimization', 'formulation', 'discussion', 'generalization', 'proceedings', 'fifth', 'international', 'conference', 'genetic', 'algorithms', 'san', 'mateo', 'morgan', 'kauffman', 'fonseca', 'fleming', 'performance', 'assessment', 'comparison', 'stochastic', 'multiobjective', 'parallel', 'problem', 'solving', 'nature', 'rechenberg', 'schwefel', 'eds', 'berlin', 'germany', 'springer', 'knowles', 'corne', 'nondominated', 'front', 'pareto', 'archived', 'evolution', 'strategy', 'evolutionary', 'computation', 'vol', 'rechenberg', 'evolutionsstrategie', 'stuttgart', 'rechenberg', 'solution', 'path', 'experimental', 'problem', 'multiple', 'objective', 'optimization', 'vector', 'evaluated', 'genetic', 'algorithms', 'proceedings', 'international', 'conference', 'genetic', 'algorithms', 'schwefel', 'evolution', 'optimal', 'wiley', 'srinivas', 'deb', 'multi', 'objective', 'function', 'optimization', 'non', 'dominated', 'sorting', 'genetic', 'algorithms', 'evolutionary', 'computation', 'vol', 'van', 'veldhuizen', 'multiobjective', 'evolutionary', 'algorithms', 'state', 'art', 'evolutionary', 'computation', 'vol', 'zitzler', 'thiele', 'multiobjective', 'evolutionary', 'algorithms', 'comparative', 'case', 'study', 'strength', 'pareto', 'ieee', 'evolutionary', 'computation', 'zitzler', 'deb', 'thiele', 'comparison', 'multiobjective', 'evolutionary', 'algorithms', 'empirical', 'results', 'evolutionary', 'computation', 'vol', 'ieee', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply']"
5,2,1,"1171 D-3 Arithmetical crossover A Evolution Strategy : A New Time-Variant Mutation for Fine Local Tuning M.M.A. Hashem, Keigo Watanabe and Kiyotaka Izumi Department of Production and Control Technology Faculty of Engineering Systems and Technology Saga University, 1-Honjomachi, Saga 840, .Japan E-mail : wat anab e@me .saga-u .ac. j p Abstract: The inherent strength of the Evolution Strategy (ES) algorithm lies in the mutation operation. In this paper, a new Time-Variant Mutation (TVh4) operator is proposed for fine local tuning and high precision solutions. Its action depends upon the age of the populations and its performance is quite different from the Uniform Mutation (UM) operation. The proposed approach makes it possible that the size of mutation steps (i.e., standard deviations) can be dynamically adjusted to the so called `Evolution Window`. The efficacy of the proposed TVM operator is illustrated by solving the dynamic linear-quadratic control problem (a discrete time optimal control model). Key Words: Evolution Strategy; Evolutionary Computation; Linear-quadratic Control Problem; Discrete-Time Optimal Control; Mutation; Arithmetical Crossover; Intelligent Systems. 1. Introduction The Evolution Strategy (ES) imitates the effects of natural evolution as to solve parameter optimization problems numerically. The basic difference between evolution strategy and Genetic Algorithm (GL4) lies in their domains (i.e., the representation of individuals). ES generally uses to represent an individual as float-valued vectors instead of a binary string. The main objective behind such implementations is to move the algorithm closer to the problem space. Such a move forces, but also allows, the operators to be more problem specific - by utilizing some specific characteristics of real space. Moreover, this type of representation reduces the burden of converting genotype to phenotype during evolution process. ESs started with integer variables as an experimental optimum-seeking method, but turned to real variables when used on computers I). solutions for a particular problem. TJnlike GA, the ES produces a higher precision However, Generation of I initial population I 1 End I Fig. 1 The structure of an evolution strategy both ES and GA are evolution programs. They could be termed as probabilistic algorithms which maintain a population of individuals, II(t) = SICE '97 July 29-31, Tokushima - 1099 PR0001-3/97/0000-1099 $4.00 0 1997 SICE Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:30 UTC from IEEE Xplore. Restrictions apply. {+;, . . . , +ct`,} for generation t. Each individual represents a potential solution to the problem at hand, and, in any evolution program, is implemented as some (possibly complex) data structure 6 (chromosome representation). Each solution +F is evaluated to produce some measure of its 'Yitness`. Then, a new population (generation t + 1) is formed by selection (reproduction), crossover and mutation (as only recombination operator). The members of the new population undergo transformations by means of `genetic` operators to form new solutions. There are higher order transformations C; (crossover type), which create new individuals ([; : <X [ H 6) and a unary transformations, [i (mutation type), which create new individuals with a small change by zero-mean Gaussian noise in a single individual ([: : [ ~--r [). After some number of generations the program converges - it is hoped that the best individual represents a near optimum (reasonable) solution. The structure of an evolution strategy is shown in Fig. 1. However, further studies on various factors affecting the ability of evolutionary techniques to solve optimization problems are necessary '1. Generally, a Uniform Mutation (UM) is used throughout the evolutionary process. But the frequency of success and the degree of progress of the search by ES largely depends upon the mutatuon steps. By the study on UM steps (standard deviations); the authors observed that with the larger mutation steps cause to the fast convergence with low precision results, and the smaller mutation steps take too much generations to converge and sometimes it falls into the local minima. So, it is very difficult task to set up an optimum mutation step for the problem at hand. However, the theory of ES led to the discovery of the so called `Evolution Window`. The meaning of this term is that changes (mutational jumps) lead to evolutionary progress only when they lie within a narrowly confined and calculable step-width band. Mutation steps and recombination steps which fall outside the evolution window are ineffective '1. Thus, it is apparent that an optimal compromise must exists between the frequency of success and the degree of progress in the mutation of the evolutionary process. Therefore, the choice of a suitable mutation step, especially in the presence of many variables, becomes a decisive factor for the convergence of the evolution strategy 3). The objective of this paper is to find a suitable dynamic mutation strategy which can make a balance between the success and progress of the ES search. Therefore, we proposed a Tinie- Variant Mutation (TVM) whose performance is quite different from the UM. Its action depends upon the age of the populations. Moreover, it can produce such a mutation step (standard deviation) that falls within the evolution window. This type of mutation operator causes to search the problem space uniformly initially and very locally at the later stages. Thus, it possesses the fine local tuning property and produces very high precision solutions. This immensely important approach makes it possible that, in the process of optimization, the size of the mutations (standard deviations) can be dynamically adjusted to the evolution window. To test the efficacy of the proposed TVM operator, we solved the dynamic linear-quadratic control problem (a discrete time optimal control model) 2, for different controlled steps. The simulation results indicate that the proposed TVM operator outperforms the UM in convergence and fine local tuning within specified generations. 2. The Evolution Strategy 2.1 Initial Population The initial population will be generated by using a uniform random numbers (URN). If we would like to generate a variable u1 within the rage -100 5 u1 5 100, then we must use the URN[-100,100]. Thus, for other variable 212 with an altenative rage, we should use other URN. Thus, the first individual for the population = [u12,1 2,. . . , un]* is generated. Similarly, the remaining individuals for the population $2, - , +, are generated using the same manner, where p denotes the number of individuals in the population. 1100 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:30 UTC from IEEE Xplore. Restrictions apply. Optimal 212 t Subpopulation 1 a- point Fig. 2 Max-mean arithmetical crossover with subpopulation’s elite 2.2 Subpopulation- based Arithmetical Crossover The authors already have developed a method in which the competing subpopulation’s (subgroup’s) elite and the mean strength of that subpopulation except the elite are used in the crossover technique ‘). This technique has a very strong directivity to the elite as shown in Fig. 2. Among these competing subpopulations (subgroups), there are different directivity towards the optimum. So, there is less possibility to be trapped into local minima to attain the optimal point. The method is described below vividly. We devide the p populations into the equal sized 1 competing subpopulations. We define as an elite individual that maximizes a coljt function within the j-th subpopulation and 4, as a mean strength of the j-th subpopulation except the +,,max, we define the crossover for the competing subpopulation j as follows : c1 = Q+J” + (1 - Q)4] c z = (1 - Q)+],“ + Q& (1) (‘2) where Q is selected from URN[O,l]. Note that the children are generated for each subpopulation by using ( I t I)-ES. 2.3 Mutation ‘The mutation; recombination operator, plays a significant role in global search and fine tuning for the ESs. It is observed that the smaller changes occur more often than larger ones in biological evolutions. According to this observation, ES uses Gaussian noise with zero-mean to perturb all object variables of a child. The mutation for a child i, is made as where N ( . ) is a zero-mean Gaussian random number vector and a denotes the standard deviation, a = [ L T ~, . . . ,a,] T . When a is kept fixed throughout the evolution process, we call this type of mutation as uniform mutation. 2.4 Evaluation After mutation operation, each child is evaluated to its cost function (fitness) for a possible solution in each generation. These evaluations are preserved for creating a new generation. 2.5 Alternation of Generation In the alternation of generation, (p + p)-ES is used. That is, among p parents, which were evaluated at the former generation, and p children which are evaluated in the current generation, the p t p individuals are ordered in proportional to the amount of the cost function, and the best p individuals are selected for the next generation. 3.. The Time-Variant Mutation The inherent strength of the ES algorithm, towards convergence and high precision results, lies in the choice of the mutation steps (standard deviations). A special dynamic Time-Variant Mutation (TVM) operator is proposed aiming at both improving the fine local tuning and reducing the disadvantage of uniform mutation in the ES algorithm. The TVM is defined for a child i, as e: = c; + iv(o,~z(t)) (4) where a( t )= [a( t ) ,.. . , a(t)lTi s the time-variant standard deviation vector at the generation t , and g ( t ) is defined as - 1101 - Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:30 UTC from IEEE Xplore. Restrictions apply. Fig. 3 Characteristics of the a(t) with y = 6.0 and T = '200 where T is selected from the URN[O,l], T is the maximal generation number, y is a real-valued parameter determining the degree of dependency on the progress and success of the evolution. Normally, the value of y should be selected as greater than unity. However, using the value of y more than unity can produce high precision final results in presence of many variables. With the value of y less than unity, it may not be able to converge to the final results in presence of many variables and this may cause to decrease the success and progress of the evolution process. The function a(t) returns a value in the range [O: 11: which falls within the evolution tvindow such that the probability of a(t) being close to 0 increases as age of the population, t increases. This property of a(t) causes to search the problem space uniformly initially (when t is small) and very locally at t larger stages. Thus, it increases the probability of generating the new mutation step very closer to its successor mutation step than a uniform mutation choice for the whole evolution process. The generation of a typical time-variant standard deviation with y = 6.0 is shown in Fig. 3. 4. Simulations In general, it is very difficult task to design and implement the algorithms for the solution of optimal control problems, especially for nonlinear or large-scale systems. There exists some algorithms in the literature for these class of problems. However, these algorithiiis break down on problems of moderate size and complexity, suffering from what is called `the curse of diniensionality`. Optimal control problems are quite difficult to deal with numerically, even though the system is linear. So, the following linear discrete-time optimal control model has been chosen as the test bed for our proposed method. 4.1 The Test Bed For the siiiiulation, we have selected the following dynamic one-dimensional linear-quadratic control problem '). The problem is to niinimize the following cost function: N-I iv=o subject to ~ k + 1 U X +~ 6 ~ k , k = 0,1 , .. . , (iV - 1) (7) where 20 is a given initial state, a, 6, q, s, T are given constants, Xk E R is the state, and uk E R is the control input of the system. iV is the total number of control steps involved in the system. The optimal value of (6) subject to (7) can be analytically expressed as where K k is the solution of the Riccati equation: In what follows, the problem (6) subject to (7) will be solved for the sets of parameters given in the Table 1. The exact solutions with these sets of parameters are 16179.775281, 16180.339850, 16180.339887 and 16180.339887 for the control step sizes, iW = 5, 10, 15 and 20 respectively. - 1102 - Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:30 UTC from IEEE Xplore. Restrictions apply. Table 1 The simulation cases 4. '2 Imp 1 em en t a t i o n 'The proposed algorithm is implemented by using a population size of 60. The competing subpopulation size, I is selected as 6. An individual is represented by + = [U(O), U( l), . . . , U ( N - 1)) (10) The chromosomes, the control inputs U , are represented by floating-point vectors. Each element of the chromosome is initially generated randomly but within desired domain, and the operators are carefully designed to preserve this domain during evolution process. For the comparison with TVM, the mutation steps (standard deviations) for UrVl is chosen as 1.0 and 0.1. To observe the effects of the degree of dependency on the evolution process, the parameter, y is selected as '2.0,4 .0 and 6.0. The maximal generation number, T is selected as 300, 700, 1000 and 1500 for the control steps, N = 5, 10, 15 and 20 respectively. When the cost (fitness) function (6) subject to (7) is minimized, the desired control inputs, U are found. 4.3 Results The linear-quadratic control problem is solved for different control steps, N = 5, 10, 15 and 20 using the proposed TVM operator as well as UM operator with competing subpopulation size. 6. The presented results are the outcome of the average of the 10 independent runs with different sample paths. These results are shown in Figs. 4-7. In all the test cases, we used G = 1.0 and 0.1 for the UM. The intuitive reason behind it was, to observe the progress and success of TVM against the UP1 operator. The results, in Figs. L. Ll I I I 0 100 200 300 Generations Fig. 4 The evolution history with N = 5 4-7, indicate that with B = 0.1. the UM operator can't cause to converge within specified generations but when B = 1.0, it causes to converge merely with poor results which is undesirable for the high precisioned problems. 0 therwise, the TVM operator causes to converge successfully with very accurate results within specified generations. With the increasing control step sizes, the behavior of the TVM operator is almost same but the UM operator produces much more poor results, compared to the TVSI. As expected earlier, the TVM operator causes to search very globally initially and very locally at the final stages. The evolution histories (Figs. 4-7) shows that the effects on the selection of the value of y is obvoius. When y is selected as '2.0 and -1.0,it took more generations to converge but when y is selected as 6.0, it converged relatively faster to the optimal point. Moreover, with the increasing value of y causes to search the problem space uniformly initially and very locally at the final stages. For the most optimaization problems. the time necessary for an algorithm to converge to the optimum depends on the number of decision variables. The evolution histories (Figs. 4-71 of the problem indicate that the TVM operator causes to converge before 300, 700, 1000 and 1.500 generations for the control step sizes. N = 5. 10, 1.5 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:32:30 UTC from IEEE Xplore. Restrictions apply. € 1 I I I I I 1 I lo--$ 1 t l I I I I I I 0 200 400 600 Generations Fig. 5 The evolution history with A T = 10 E w I ' 3 Fig. 6 The evolution history with N = 1.5 and 20 respectively. This type of computation efforts are quite reasonable for the problem in the test bed. 5. Conclusions In this paper, we have studied a new mutation operator, TVM to improve the fine local tuning capabilities of the ES algorithm. Its performance is evaluated with the discrete-time optimal control problem against the UM. The simulation results indicate that the ES algorithm using the TVM operator clearly outperforms the Ghl with respect to the accuracy of the found F I I I 0 500 1000 1500 Generations Fig. 7 The evolution history with fV = 20 optimal solution. Moreover, it also converged reasonably faster to that solution indicating the capacity of local fine tuning. So, an encouraging agreement was found between the success and progress of the evolution process. Thus, the inherent strength of the ES algorithm is increased substantially. References 1) Schwefel, Hans-Paul, `On the Evolution of Evo- 1 u t ion ary Comp ut at ion ,` In Computational Intelligence: Imitating Life, IEEE Press, New York, pp.116-124, 1994. Michalewicz, Zbigniew, `Genetic Algorithms + Data Structures = Evolution Programs,`-3rd. rev.. and extended edition, Springer-Verlag, Berlin, 1996. 2) 3 ) Rechenberg, Ingo, `Evolution Strategy,` In Computational Intelligence: Imitating Life, IEEE Press, New York, pp.147-159, 1994. Izumi, K.,H ashem, M.M.A. and Watanabe, K., `An Evolution Strategy with Competing Subpopulations,` Submitted in 1997 IEEE International Symposium on Computational Intelligence in Robotics and Automation (CIRA '97), Itlonterey, California, USA, 1997. 4)","['arithmetical', 'crossover', 'evolution', 'strategy', 'variant', 'mutation', 'fine', 'local', 'tuning', 'department', 'control', 'technology', 'faculty', 'engineering', 'systems', 'technology', 'university', 'japan', 'mail', 'abstract', 'inherent', 'strength', 'evolution', 'strategy', 'algorithm', 'lies', 'mutation', 'operation', 'variant', 'mutation', 'operator', 'fine', 'local', 'tuning', 'high', 'precision', 'solutions', 'action', 'depends', 'age', 'populations', 'performance', 'different', 'uniform', 'mutation', 'operation', 'approach', 'makes', 'possible', 'size', 'mutation', 'steps', 'standard', 'deviations', 'adjusted', 'called', 'evolution', 'window', 'efficacy', 'tvm', 'operator', 'illustrated', 'solving', 'dynamic', 'linear', 'quadratic', 'control', 'problem', 'discrete', 'optimal', 'control', 'model', 'key', 'words', 'evolution', 'strategy', 'evolutionary', 'computation', 'linear', 'quadratic', 'control', 'problem', 'discrete', 'optimal', 'control', 'mutation', 'arithmetical', 'crossover', 'intelligent', 'systems', 'introduction', 'evolution', 'strategy', 'imitates', 'effects', 'natural', 'evolution', 'solve', 'parameter', 'optimization', 'problems', 'basic', 'difference', 'evolution', 'strategy', 'genetic', 'algorithm', 'lies', 'domains', 'representation', 'individuals', 'uses', 'represent', 'individual', 'valued', 'vectors', 'binary', 'string', 'main', 'objective', 'implementations', 'move', 'algorithm', 'closer', 'problem', 'space', 'move', 'allows', 'operators', 'problem', 'specific', 'specific', 'characteristics', 'real', 'space', 'moreover', 'type', 'representation', 'reduces', 'evolution', 'process', 'ess', 'started', 'integer', 'variables', 'experimental', 'optimum', 'method', 'turned', 'real', 'variables', 'used', 'solutions', 'particular', 'problem', 'produces', 'higher', 'precision', 'generation', 'initial', 'population', 'end', 'fig', 'structure', 'evolution', 'strategy', 'evolution', 'programs', 'probabilistic', 'algorithms', 'maintain', 'population', 'individuals', 'july', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'generation', 'individual', 'represents', 'potential', 'solution', 'problem', 'hand', 'evolution', 'program', 'implemented', 'complex', 'data', 'structure', 'chromosome', 'representation', 'solution', 'evaluated', 'produce', 'measure', 'population', 'generation', 'formed', 'selection', 'reproduction', 'crossover', 'mutation', 'recombination', 'operator', 'members', 'population', 'undergo', 'transformations', 'means', 'genetic', 'operators', 'form', 'solutions', 'higher', 'order', 'transformations', 'crossover', 'type', 'create', 'individuals', 'transformations', 'mutation', 'type', 'create', 'individuals', 'small', 'change', 'zero', 'mean', 'gaussian', 'noise', 'single', 'individual', 'number', 'generations', 'program', 'converges', 'best', 'individual', 'represents', 'optimum', 'reasonable', 'solution', 'structure', 'evolution', 'strategy', 'shown', 'fig', 'studies', 'various', 'factors', 'ability', 'evolutionary', 'techniques', 'solve', 'optimization', 'problems', 'necessary', 'uniform', 'mutation', 'used', 'evolutionary', 'process', 'frequency', 'success', 'degree', 'progress', 'search', 'depends', 'steps', 'study', 'steps', 'standard', 'deviations', 'authors', 'observed', 'larger', 'mutation', 'steps', 'cause', 'fast', 'convergence', 'low', 'precision', 'results', 'smaller', 'mutation', 'steps', 'much', 'generations', 'converge', 'falls', 'local', 'minima', 'difficult', 'task', 'set', 'optimum', 'mutation', 'step', 'problem', 'hand', 'theory', 'led', 'called', 'evolution', 'window', 'term', 'changes', 'lead', 'evolutionary', 'progress', 'lie', 'step', 'mutation', 'steps', 'recombination', 'steps', 'fall', 'evolution', 'window', 'optimal', 'exists', 'frequency', 'success', 'degree', 'progress', 'mutation', 'evolutionary', 'process', 'choice', 'suitable', 'mutation', 'step', 'presence', 'many', 'variables', 'becomes', 'factor', 'convergence', 'evolution', 'strategy', 'objective', 'find', 'suitable', 'dynamic', 'mutation', 'strategy', 'balance', 'success', 'progress', 'search', 'variant', 'mutation', 'tvm', 'performance', 'different', 'action', 'depends', 'age', 'populations', 'moreover', 'produce', 'mutation', 'step', 'standard', 'deviation', 'falls', 'evolution', 'window', 'type', 'mutation', 'operator', 'causes', 'search', 'problem', 'space', 'stages', 'possesses', 'fine', 'local', 'tuning', 'property', 'produces', 'high', 'precision', 'solutions', 'important', 'approach', 'makes', 'possible', 'process', 'optimization', 'size', 'mutations', 'standard', 'deviations', 'adjusted', 'evolution', 'window', 'test', 'efficacy', 'tvm', 'operator', 'solved', 'dynamic', 'linear', 'quadratic', 'control', 'problem', 'discrete', 'optimal', 'control', 'model', 'different', 'controlled', 'steps', 'simulation', 'results', 'indicate', 'tvm', 'operator', 'outperforms', 'convergence', 'fine', 'local', 'tuning', 'specified', 'generations', 'evolution', 'strategy', 'initial', 'population', 'initial', 'population', 'generated', 'uniform', 'random', 'numbers', 'urn', 'generate', 'variable', 'urn', 'variable', 'urn', 'individual', 'population', 'generated', 'remaining', 'individuals', 'population', 'generated', 'manner', 'denotes', 'number', 'individuals', 'population', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'optimal', 'subpopulation', 'point', 'fig', 'max', 'mean', 'arithmetical', 'crossover', 'subpopulation', 'elite', 'subpopulation', 'arithmetical', 'crossover', 'authors', 'developed', 'method', 'competing', 'subpopulation', 'elite', 'mean', 'strength', 'subpopulation', 'elite', 'used', 'crossover', 'technique', 'technique', 'strong', 'elite', 'shown', 'fig', 'competing', 'subpopulations', 'different', 'towards', 'optimum', 'possibility', 'local', 'minima', 'optimal', 'point', 'method', 'described', 'populations', 'equal', 'sized', 'competing', 'subpopulations', 'define', 'elite', 'individual', 'function', 'subpopulation', 'mean', 'strength', 'subpopulation', 'max', 'define', 'crossover', 'competing', 'subpopulation', 'follows', 'selected', 'urn', 'note', 'children', 'generated', 'subpopulation', 'mutation', 'mutation', 'recombination', 'operator', 'plays', 'significant', 'role', 'global', 'search', 'fine', 'tuning', 'ess', 'observed', 'smaller', 'changes', 'occur', 'larger', 'ones', 'biological', 'according', 'observation', 'uses', 'gaussian', 'noise', 'zero', 'mean', 'perturb', 'object', 'variables', 'child', 'mutation', 'child', 'made', 'zero', 'mean', 'gaussian', 'random', 'number', 'vector', 'denotes', 'standard', 'deviation', 'kept', 'fixed', 'evolution', 'process', 'call', 'type', 'mutation', 'uniform', 'mutation', 'evaluation', 'mutation', 'operation', 'child', 'evaluated', 'cost', 'function', 'fitness', 'possible', 'solution', 'generation', 'evaluations', 'creating', 'generation', 'generation', 'generation', 'used', 'parents', 'evaluated', 'former', 'generation', 'children', 'evaluated', 'current', 'generation', 'individuals', 'proportional', 'amount', 'cost', 'function', 'best', 'individuals', 'selected', 'next', 'generation', 'variant', 'mutation', 'inherent', 'strength', 'algorithm', 'towards', 'convergence', 'high', 'precision', 'results', 'lies', 'choice', 'mutation', 'steps', 'standard', 'deviations', 'special', 'dynamic', 'variant', 'mutation', 'tvm', 'operator', 'improving', 'fine', 'local', 'tuning', 'reducing', 'uniform', 'mutation', 'algorithm', 'tvm', 'defined', 'child', 'variant', 'standard', 'deviation', 'vector', 'generation', 'defined', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'fig', 'characteristics', 'selected', 'urn', 'maximal', 'generation', 'number', 'real', 'valued', 'parameter', 'degree', 'progress', 'success', 'evolution', 'value', 'selected', 'greater', 'value', 'produce', 'high', 'precision', 'final', 'results', 'presence', 'many', 'variables', 'value', 'able', 'converge', 'final', 'results', 'presence', 'many', 'variables', 'cause', 'decrease', 'success', 'progress', 'evolution', 'process', 'function', 'value', 'range', 'falls', 'evolution', 'probability', 'increases', 'age', 'population', 'increases', 'property', 'causes', 'search', 'problem', 'space', 'small', 'larger', 'stages', 'increases', 'probability', 'generating', 'mutation', 'step', 'closer', 'mutation', 'step', 'uniform', 'mutation', 'choice', 'whole', 'evolution', 'process', 'generation', 'typical', 'variant', 'standard', 'deviation', 'shown', 'fig', 'simulations', 'general', 'difficult', 'task', 'design', 'implement', 'algorithms', 'solution', 'optimal', 'control', 'problems', 'nonlinear', 'large', 'scale', 'systems', 'exists', 'algorithms', 'literature', 'class', 'problems', 'problems', 'size', 'complexity', 'called', 'optimal', 'control', 'problems', 'difficult', 'deal', 'system', 'linear', 'following', 'linear', 'discrete', 'optimal', 'control', 'model', 'chosen', 'test', 'method', 'test', 'selected', 'following', 'dynamic', 'dimensional', 'linear', 'quadratic', 'control', 'problem', 'problem', 'following', 'cost', 'function', 'subject', 'given', 'initial', 'state', 'given', 'state', 'control', 'input', 'system', 'total', 'number', 'control', 'steps', 'involved', 'system', 'optimal', 'value', 'subject', 'expressed', 'solution', 'equation', 'follows', 'problem', 'subject', 'solved', 'sets', 'parameters', 'given', 'table', 'exact', 'solutions', 'sets', 'parameters', 'control', 'step', 'sizes', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'table', 'simulation', 'cases', 'algorithm', 'implemented', 'population', 'size', 'competing', 'subpopulation', 'size', 'selected', 'individual', 'represented', 'chromosomes', 'control', 'inputs', 'represented', 'point', 'vectors', 'element', 'chromosome', 'generated', 'desired', 'domain', 'operators', 'designed', 'preserve', 'domain', 'evolution', 'process', 'comparison', 'tvm', 'mutation', 'steps', 'standard', 'deviations', 'chosen', 'observe', 'effects', 'degree', 'evolution', 'process', 'parameter', 'selected', 'maximal', 'generation', 'number', 'selected', 'control', 'steps', 'cost', 'fitness', 'function', 'subject', 'minimized', 'desired', 'control', 'inputs', 'found', 'results', 'linear', 'quadratic', 'control', 'problem', 'solved', 'different', 'control', 'steps', 'tvm', 'operator', 'operator', 'competing', 'subpopulation', 'size', 'presented', 'results', 'outcome', 'average', 'independent', 'runs', 'different', 'sample', 'paths', 'results', 'shown', 'figs', 'test', 'cases', 'used', 'reason', 'observe', 'progress', 'success', 'tvm', 'operator', 'results', 'figs', 'generations', 'fig', 'evolution', 'history', 'indicate', 'operator', 'cause', 'converge', 'specified', 'generations', 'causes', 'converge', 'poor', 'results', 'high', 'problems', 'tvm', 'operator', 'causes', 'converge', 'results', 'specified', 'generations', 'increasing', 'control', 'step', 'sizes', 'behavior', 'tvm', 'operator', 'operator', 'produces', 'much', 'poor', 'results', 'compared', 'expected', 'tvm', 'operator', 'causes', 'search', 'final', 'stages', 'evolution', 'figs', 'shows', 'effects', 'selection', 'value', 'selected', 'took', 'generations', 'converge', 'selected', 'converged', 'faster', 'optimal', 'point', 'moreover', 'increasing', 'value', 'causes', 'search', 'problem', 'space', 'final', 'stages', 'problems', 'necessary', 'algorithm', 'converge', 'optimum', 'depends', 'number', 'decision', 'variables', 'evolution', 'figs', 'problem', 'indicate', 'tvm', 'operator', 'causes', 'converge', 'generations', 'control', 'step', 'sizes', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'generations', 'fig', 'evolution', 'history', 'fig', 'evolution', 'history', 'type', 'computation', 'reasonable', 'problem', 'test', 'conclusions', 'studied', 'mutation', 'operator', 'tvm', 'improve', 'fine', 'local', 'tuning', 'capabilities', 'algorithm', 'performance', 'evaluated', 'discrete', 'optimal', 'control', 'problem', 'simulation', 'results', 'indicate', 'algorithm', 'tvm', 'operator', 'outperforms', 'respect', 'accuracy', 'found', 'generations', 'fig', 'evolution', 'history', 'optimal', 'solution', 'moreover', 'converged', 'faster', 'solution', 'indicating', 'capacity', 'local', 'fine', 'tuning', 'encouraging', 'found', 'success', 'progress', 'evolution', 'process', 'inherent', 'strength', 'algorithm', 'increased', 'references', 'schwefel', 'evolution', 'computational', 'intelligence', 'life', 'ieee', 'press', 'york', 'michalewicz', 'genetic', 'algorithms', 'data', 'structures', 'evolution', 'programs', 'extended', 'springer', 'verlag', 'berlin', 'rechenberg', 'evolution', 'strategy', 'computational', 'intelligence', 'life', 'ieee', 'press', 'york', 'evolution', 'strategy', 'competing', 'subpopulations', 'ieee', 'international', 'symposium', 'computational', 'intelligence', 'robotics', 'usa']"
6,2,1,"This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. IEEE TRANSACTIONS ON CYBERNETICS 1 Evolution Strategy-Based Many-Objective Evolutionary Algorithm Through Vector Equilibrium Kai Zhang, Zhiwei Xu , Shengli Xie , Fellow, IEEE, and Gary G. Yen , Fellow, IEEE Abstract.In recent years, numerous many-objective evolutionary algorithms (MaOEAs) have been developed to search for well-diversified and well-converged Pareto optimal solutions for high-dimensional many-objective optimization problems (MaOPs). However, existing MaOEAs have to tackle some daunting challenges, including the emergence of dominance resistance solutions, effective diversity preservation scheme, management of a large population size, extremely high computational complexity, sensitivity to the shape of Pareto front (PF), and overly relying on high-quality reference points. In this article, we present an evolution strategy (ES) for solving MaOPs, called MaOES, which can solve these challenges efficiently and effectively. Inspired by the Vector Equilibrium phenomenon in magnetic fields, isotropic magnetic particles would automatically repel from each other, keep the uniform distance from the nearest neighbors, and extend the entire magnetic fields as far as possible, all at the same time. In the proposed algorithm, an efficient self-adaptive Precision-Controllable Mutation operator is designed for individuals to explore and exploit the decision space. In addition, the Maximum Extension Distance strategy, which emulates the isotropic magnetic particle behavior in a magnetic field, is developed to guide individuals to keep uniform distance and extension to approximate the entire PF. As a result, the MaOES can obtain a well-converged and well-diversified PF with much less population size and far lower computational complexity. The larger the number of individuals, the sharper the contour the resulting approximate PF will be. Finally, the proposed algorithm is evaluated by the scalable MaOPs test suites on DTLZ and WFG. The experimental results have been demonstrated to provide a competitive and oftentimes better performance when compared against some chosen state-of-the-art MaOEAs. Manuscript received August 5, 2019; accepted December 12, 2019. This work was supported by the National Natural Science Foundation of China under Grant 61472293, Grant 61702383, Grant U1803262, and Grant 61602350. This article was recommended by Associate Editor Q. Zhang. (Corresponding author: Gary G. Yen.) Kai Zhang is with the School of Computer Science and Technology, Wuhan University of Science and Technology, Wuhan 430065, China (e-mail: zhangkai@wust.edu.cn). Zhiwei Xu is with the Hubei Province Key Laboratory of Intelligent Information Processing and Real-Time Industrial System, Wuhan University of Science and Technology, Wuhan 430065, China (e-mail: kenxucn95@gmail.com). Shengli Xie is with the Key Laboratory of Intelligent Detection and The Internet of Things in Manufacturing, Ministry of Education, Guangzhou 510006, China, and also with the Guangdong-Hong Kong-Macao Joint Laboratory for Smart Discrete Manufacturing, Guangdong University of Technology, Guangzhou 510006, China (e-mail: shlxie@gdut.edu.cn). Gary G. Yen is with the School of Electrical and Computer Engineering, Oklahoma State University, Stillwater, OK 74078 USA (e-mail: gyen@okstate.edu). Color versions of one or more of the figures in this article are available online at http://ieeexplore.ieee.org. Digital Object Identifier 10.1109/TCYB.2019.2960039 Index Terms.Evolution strategy (ES), many-objective evolutionary algorithm (MaOEAs), many-objective optimization problem (MaOPs). I. INTRODUCTION MANY real-world problems involve multiple conflicting objectives that need to be optimized simultaneously. In the last decades, some of the carefully crafted multiobjective evolutionary algorithms (MOEAs), such as NSGA-II [1] and SPEA2 [2], have shown an extraordinary ability to search for a set of well-converged and welldiversified nondominated solutions in two- or three-objective optimization problems. However, these effective MOEAs fail in tackling real-world applications involving four or many more objectives optimization, such as engineering design [3], air traffic control [4], auto controller [5], and nursing staff scheduling [6]. In recent years, some state-of-the-art designs on manyobjective evolutionary algorithms (MaOEAs) have been proposed for solving many-objective optimization problems (MaOPs), including improved diversity-based approaches (e.g., GrEA [7]), enhanced dominance-based approaches (e.g., FD-NSGA-II [8]), decomposition-based approaches (e.g., NSGA-III [9], MOEA/DD [10]), indicator-based approaches (e.g., HypE [11]), objective reduction-based approaches (e.g., PCSEA [12]), and evolution strategy (ES)-based approaches (e.g., S3-CMA-ES [13]). However, when the number of objectives increases, an enormously large number of solutions becomes nondominated. These dominance resistance solutions seriously weaken the selection pressure toward the Pareto front (PF), and the convergence ability of most of the MaOEAs quickly deteriorates. In order to maintain a set of well-diversified solutions which approximates the entire PF, some of the MaOEAs need to increase the number of reference points or the number of search directions, or keep the extreme solutions to extend the boundary. However, without any priori PF shape knowledge, it is very difficult to generate high-quality reference solutions or identify the boundary solutions for high-dimensional MaOPs. ES has been proven for years to be a simple, yet powerful approach for the optimization problems in particular because of its self-adaptation mechanisms [14], [15]. The ES has been widely applied for solving various multiobjective optimization problems. In order to obtain well-diversified solutions, many diversity approaches have been well integrated into ES, such as niching [16], crossover-like mutation [17], clustering [18], 2168-2267 c 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 2 IEEE TRANSACTIONS ON CYBERNETICS and archiving [19], [20], to name a few. However, most of these designs still need to maintain a large population size for sorting, selection, and reproduction. In addition, the excessive success of the genetic algorithms (GAs) has inadvertently led to the lost attention on the powerful ES. In this article, we propose a novel ES for solving MaOPs, called MaOES. In 1917, Richard Buckminster Fuller discovered the significance of vector symmetry and called it the Vector Equilibrium in 1940 [21], [22]. Inspired by the Vector Equilibrium phenomenon in magnetic fields, isotropic magnetic particles would repel each other and extend to the entire magnetic fields as far as possible and automatically. Under this spirit, the proposed MaOES can obtain a wellconverged and well-diversified PF with much less population size and far lower computational complexity. The larger the number of individuals, the sharper the contour the resulting approximate PF will be. The proposed algorithm uses mutation and selection for individual self-adaptation. The Precision Controllable Mutation operator is designed for individuals to explore and exploit the decision space efficiently. The Maximum Extension Distance strategy is tailored to guide the individuals to keep uniform distance among particles in the population and to facilitate the extension to approximate the entire PF automatically. The remaining sections complete the presentation of this article. Section II provides a comprehensive analysis of the existing MaOEAs. The proposed ES for MaOPs and MaOES is then detailed in Section III. In Section IV, we elaborate on the experimental results given selected benchmark test problems. Finally, conclusions are drawn in Section V along with pertinent observations that are identified. II. LITERATURE REVIEW The mathematical model of an MaOP can be formulated as follows: min f (x) = minf1(x), f2(x), . . . , fM(x)T , f (x) ¸ RM (1) where x = [x1, x2, . . . , xN]T ¸ , and x consists of N decision variables,  is the search space. f (x) consists of M objective functions, fi (x), i = 1, . . . ,M and M > 3. RM denotes the objective space. In recent years, a number of novel and effective algorithms for MaOPs have been proposed, such as particle swarm optimization with a balanceable fitness estimation for many-objective optimization [23], manyobjective optimization using differential evolution with variable-wise mutation restriction [24], MaOEA using a oneby- one selection strategy [25], and set-based GA for interval many-objective optimization problems [26]. Existing strategies of MaOEAs can be broadly classified into several different categories, including improved diversity approaches, enhanced dominance approaches, decomposition-based approaches, indicator-based approaches, objective reduction approaches, and ES-based approaches. A. Existing Strategies for MaOEAs 1) Improved Dominance or Diversity Approaches: The enhanced dominance approaches, such as FD-NSGA-II [8] and ƒÃ-MOEA [27], replace the exact Pareto dominance with some relax dominance definitions, which can enhance the selection pressure toward the PF. The improved diversity approaches, including GrEA [7] and SPEA2 + SDE [28], attempt to improve the performance of MaOEAs by reducing the adverse impact of diversity maintenance. However, the delicate balance between convergence and diversity is indeed difficult to maintain throughout the evolution process for these MaOEAs. Excessive aggressive selection pressure may result in degraded diversity maintenance. On the other hand, excessive diversity selection may deteriorate the convergence performance. 2) Decomposition-Based Approaches: The decompositionbased MaOEAs are characterized by systematically generating uniformly distributed normalized weight vectors or reference points. These approaches search for Pareto optimal solutions along each reference vector or reference point. The representative designs include MOEA/DD [10], NSGA-III [9], and RPD-NSGAII [29]. However, the decomposition-based MaOEAs have to maintain an exponentially increasing number of search directions given the increasing number of objectives. The decompositionbased approaches often show high sensitivity to the shape of PF [30], especially for those MaOPs with degenerative PFs. In addition, there exists an infinite number of possible shapes of PF surface in high-dimensional objective space. Without a priori knowledge of PF hyper-surface, it is very difficult to generate high quality reference solutions for MaOPs. 3) Indicator-Based Approaches: The indicator-based approaches adopt accurate or estimated indicator values to guide the search process for solving MaOPs. This category includes HypE [11] and IBEA [31]. However, the indicator-based MaOEAs do have their own issues. First, the computational cost is very expensive for the exact hypervolume calculation. Second, the indicator-based MaOEAs encounter difficulties to generate a set of uniformly distributed solutions. Third, it remains a challenge to select the most appropriate reference points for various indicator-based MaOEAs. 4) Objective Reduction Approaches: The objective reduction approaches consist of finding the relevant objectives and eliminating the redundant objectives. Typical representatives are PCSEA [12], L-PCA, and NLMVU-PCA [32]. However, these methods can reduce the computational load but potentially lose some information as a result of the reduced objectives. Moreover, such techniques are only applicable to problems having a moderate number of conflicting objectives. 5) Evolution Strategy-Based Approaches: The ES approaches apply the self-adaptive mutation mechanism for solving MaOPs. Specifically, niching or archive maintenance methods are integrated to maintain well diverse solutions. Some popular designs in this category are S3-CMA-ES [13], PAES [20], and SMES [33]. In particular, ES is simpler to implement, it is easier to scale in a distributed setting, and it has fewer hyperparameters to control. This outcome is no surprise because ES resembles simple hill climbing in Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. ZHANG et al.: ES-BASED MaOEA THROUGH VECTOR EQUILIBRIUM 3 a high-dimensional space-based only on finite differences along a few random directions at each step [34]. However, most of these approaches still need to maintain a large population size for sorting, selection, and reproduction, and, as a result, suffer from extremely high computational complexity largely due to the excessive successes of the GA applications; evolutionary strategy has lost its early attention in the community. B. Motivation Generally, when the number of objectives increases, existing MaOEAs have to face the following challenges. 1) The number of incomparable, nondominated solutions increases enormously in the dominance resistance phenomenon [35], [36]; these solutions seriously weaken the selection pressure toward the PF. 2) In order to obtain a set of well-diversified solutions that approximates the entire PF, some of the MaOEAs need to keep the extreme solutions to extend the boundary. However, without any prior PF shape knowledge, it is very difficult to identify the extreme or boundary solutions [37]. 3) In order to approximate the high-dimensional PF surface, some of the MaOEAs have to maintain a very large population size, which inadvertently led to expensive computational cost [38]. 4) Some of the MaOEAs show high sensitivity to the shape of PF (e.g., decomposition-based approaches are sensitive to degenerate PF [30]). 5) Some of the MaOEAs heavily rely upon the availability of high-quality reference points. However, without a priori position and shape knowledge of PF hypersurface, it is very difficult, if not impossible, to generate high quality reference solutions for a given MaOPs. Inspired by the Vector Equilibrium phenomenon in magnetic fields, isotropic magnetic particles would automatically repel each other, naturally preserve uniform distance from the nearest neighbors, and extend the entire magnetic fields as far as possible. In this article, we present an ES for solving MaOPs, called MaOES, which can address these challenges listed above efficiently and effectively. The proposed algorithm imitates the Vector Equilibrium phenomenon of isotropic magnetic particles, which apply a self-adaptive mutation mechanism to guide the individuals to keep uniform distance and extension to approximate the entire PF automatically. The MaOES can obtain a well-converged and well-diversified PF with much less population size, as shown in Fig. 1. As can be seen from Fig. 1, given different population sizes (30, 50, and 100), MaOES can obtain well-distributed solutions to cover the entire PF, and each individual keeps uniform distance from nearest neighbor solutions. The larger the number of individuals, the sharper the contour of the resulted approximate PF will be preserved. III. PROPOSED ALGORITHM In this section, the details of the proposed ES MaOEA are presented. Two main procedures are iteratively run for each Fig. 1. Resulted approximate PFs by MaOES with different population sizes (30, 50, and 100) on three-objective WFG1. Fig. 2. (a) SBX distributions with different parameter n. (b) Gaussian distributions with different parameter ƒÐ. individual, specifically the Precision-Controllable Mutation operator and the Maximum Extension Distance strategy. The Precision-Controllable Mutation operator is designed for both exploration and exploitation given the designated precision. The Maximum Extension Distance strategy imitates the isotropic magnetic particles in magnetic fields which guide individuals to maintain uniform distance and extension to approximate the entire PF automatically. The computational complexity of the proposed algorithm is O(MP2), where M denotes the number of objectives, and P is the population size. This is comparable to most state-of-the-art MaOEA designs. A. Precision-Controllable Mutation Operator Let x = [x1, x2, . . . , xN]T be one of the individuals, and the xi is the ith decision variable of x. It is important to exploit the local region near x, and explore the global region distant away from x as well. Traditional mutation operator [39] adopts Gaussian perturbation to generate the mutated candidate solution x i, as shown in (2) x i = xi + N(0, ƒÐ). (2) However, the Gaussian distribution is similar to simulated binary crossover (SBX) [40], which generates the offspring near their parent with a high probability, which is only effective for local search, as shown in Fig. 2. In addition, the Gaussian probability density function has the parameter ƒÐ, which is very difficult to be assigned an optimal value.Within limited iteration steps, larger ƒÐ value can assure a higher search precision, but slower convergence. On the other hand, smaller ƒÐ value can facilitate a quick convergence, but lower search precision. For the WFG instances, all the decision variables are in different ranges xi ¸ [0, 2i], which Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 4 IEEE TRANSACTIONS ON CYBERNETICS poses a much difficult task to assign an optimal value of ƒÐ specifically suited for all the decision variables simultaneously. In this article, a simple and efficient Precision-Controllable Mutation operator is proposed for exploration and exploitation, as shown in (3).(8) x i = xi + ƒ¿ (3) x i = xi . ƒ¿ (4) where ƒ¿ = 1 10Random(p)+1 ~ (Random(9) + 1) x i = xi + ƒÀ (5) x i = xi . ƒÀ (6) where ƒÀ = xi ~ ƒ¿.xi x i = xi + ƒÁ (7) x i = xi . ƒÁ (8) where ƒÁ = xi € ƒ¿.xi. Equations (3) and (4) are designed for exploitation, while (5) to (8) are intended for exploration. The variable p is the parameters to control the search precision in the decision space. Function Random(p) can generate a pseudorandom number in the range of 0 to p . 1. If the required search precision is 0.001, the parameter p can be set to be 3. The value of random number Random(p) should be in the set of {0, 1, 2}, then the corresponding value of [1/(10Random(p)+1)] will be in the set of {0.1, 0.01, 0.001}. The value of (Random(9) + 1) can be regarded as a random coefficient from 1 to 9. Obviously, these mutation equations can generate all the neighboring solutions within the required minimum precision of 0.001. As an illustrated example, we randomly generate the mutated solution x i about 5000 times to test the exploitation ability of (3) and (4). For example, let the original value of xi be 10, the frequency distribution of mutated xi is shown in Fig. 3(a) and (b), given the parameter p is set to be 1 and 2, respectively. Please note the addition and subtraction operators are chosen at equal probability. The frequency distribution of newly generated mutated solutions is shown in Fig. 3. In Fig. 3(a) the parameter p is set to be 1, Random(p) produces a 0, (3) and (4) can generate mutated individual from 9.1 to 10.9 with precision 0.1 of uniform frequency. In Fig. 3(b) the parameter p is set to be 2, Random(p) should be 0 or 1, (3) and (4) can generate uniform spreading mutated solutions near original xi = 10 in precision 0.1 and 0.01. Equations (5).(8) can generate new individuals greater than ƒÀ times or less than ƒÁ times of the original xi, which could be considered exploration the decision space far away from xi. For example, let xi be 10, and the parameter p is set to be 1, Random(p) should be 0. We generate mutated x i 5,000 times randomly, the frequency distribution is shown in Fig. 4. Equations (7) and (8) can generate mutated solutions with uniform frequency, the value of mutated x i become 1 to 10 time more than or less than xi. Fig. 3. Frequency distribution of mutated xiwith different parameter p. (a) xi = 10, p = 1, new generated solution x i with (3) and (4). (b) xi = 10, p = 2, new generated solution x i with (3) and (4). Fig. 4. Value distribution of mutated x i with (7) and (8). Apparently, addition and subtraction mutation operators can generate a small variation ƒ¿ from its original value, which is useful for local search. On the other hand, division and multiplication mutation operators could generate greater than ƒÀ times or less than ƒÁ times away from the original value, which is useful for global search to jump out of the local optimal. The pseudocode of the Precision-Controllable Mutation is given in Algorithm 1. B. Maximum Extension Distance Strategy Since the PF of MaOPs is a high-dimension hypersurface, without any priori PF shape knowledge, it is very difficult to identify boundary solutions for MaOPs. In 1917, Buckminster Fuller discovered the significance of the full vector symmetry in the magnetic fields and called it, the Vector Equilibrium in 1940 [21], [22]. Inspired by the Vector Equilibrium phenomenon, isotropic magnetic particles would repel each other and extend the entire magnetic fields as far as possible. From an energy perspective, the Vector Equilibrium represents the ultimate and perfect condition wherein every isotropic Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. ZHANG et al.: ES-BASED MaOEA THROUGH VECTOR EQUILIBRIUM 5 Algorithm 1 Precision-Controllable Mutation Input: P(i) t , p=10 Output: NewP(i) t , x i is the ith decision variable of NewP(i) t 1: for i = 1 to N 2: x i = xi 3: r = Random(6) 4: ƒ¿ = 1 10Random(p)+1 ~ (Random(9) + 1) 5: ƒÀ = xi ~ ƒ¿.xi 6: ƒÁ = xi € ƒ¿.xi 7: if r = 0 then xTemp = xi + ƒ¿ 8: else if r = 1 then xTemp = xi . ƒ¿; 9: else if r = 2 then xTemp = xi + ƒÀ; 10: else if r = 3 then xTemp = xi . ƒÀ; 11: else if r = 4 then xTemp = xi + ƒÁ; 12: else if r = 5 then xTemp = xi . ƒÁ; 13: end if 14: if xTemp is feasible then x i = xTemp 15: end for (a) (b) (c) Fig. 5. Isotropic magnetic particles repel each other and expand the boundary automatically. (a) Initial state. (b) Repel each other. (c) Equilibrium state. magnetic particle keeps uniform distance from the nearest neighbors, as shown in Fig. 5. In our algorithm, we propose the Maximum Extension Distance strategy to imitate the isotropic magnetic particles behaving in magnetic fields, which guide individuals to preserve uniform distance and extension to approximate the entire PF automatically. The Maximum Extension Distance is defined in (9) MEDP(i) t  = NearDistP(i) t  ~ TotalDistP(i) t  (9) where NearDistP(i) t  = min j,j=i M  m=1 f ( i) m . f (j) m  . TotalDistP(i) t  = P  j=1 M  m=1  f (i) m .f (j) m  . In this equation, P(i) t is the ith individual in Population Pt at the tth generation. TotalDist(P(i) t ) calculates the summation of Manhattan distance (MD) between P(i) t and P(j) t . A greater value of TotalDist(P(i) t ) implies the solution P(i) t has moved away from other individuals. NearDist(P(i) t ) calculates the minimum MD between P(i) t and P(j) t . A greater value of NearDist(P(i) t ) implies a better individual diversity. The proposed Maximum Extension Distance strategy is the Fig. 6. Maximum Extension Distance to expand the boundary solution. Fig. 7. Maximum Extension Distance to keep good diversity. product of NearDist() and TotalDist(). The greater the maximum extension distance implies an individual has extended the overall boundary, and an individual has obtained a better diversity. For example, the Maximum Extension Distance can expand the boundary solution. Let A be an individual in the population, and Anew is the new candidate solution after mutation operation, as shown in Fig. 6. The Maximum Extension Distance is calculated as follows: MED(A) = NearDist(A) ~ TotalDist(A) NearDist(A) = MD(AB) TotalDist(A) = MD(AB)+MD(AC)+MD(AD)+MD(AE) +MD(AF) MED(Anew) = NearDist(Anew) ~ TotalDist(Anew) NearDist(Anew) = MD(AnewB) TotalDist(Anew) = MD(AnewB)+MD(AnewC)+MD(AnewD) +MD(AnewE)+MD(AnewF) MED(Anew) > MED(A). Compared with the original solution A, both NearDist() and TotalDist() of Anew are greater than those of A. Since the Maximum Extension Distance, MED(Anew), is greater than the value of MED(A), the individual A should be replaced by the new candidate solution Anew. Obviously, Anew extends the whole population boundary and extends individual distance far away from other individuals. For another example, B is an individual in the population, and Bnew is a new candidate solution after mutation operation, as shown in Fig. 7. The Maximum Extension Distance is calculated as follow: MED(B) = NearDist(B) ~ TotalDist(B) Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 6 IEEE TRANSACTIONS ON CYBERNETICS Algorithm 2 Maximum Extension Distance Input: the index of mutation individual idx Output: maximum extension distance MED 1: TotalDist = 0; 2: NearDist = +8; 3: for i = 1 to P 4: if i = idx then continue; 5: Dist = 0; 6: for j = 1 to M 7: Dist = Dist + abs(f (i) j . f (idx) j ); 8: end for 9: TotalDist = TotalDist + Dist; 10: if Dist < NearDist then NearDist = Dist; 11: end for 12: MED = NearDist ~ TotalDist; NearDist(B) = MD(BC) TotalDist(B) = MD(BA)+MD(BC)+MD(BD)+MD(BE) +MD(BF) MED(Bnew) = NearDist(Bnew) ~ TotalDist(Bnew) NearDist(Bnew) = MD(BnewA) TotalDist(Bnew) = MD(BnewA)+MD(BnewC)+MD(BnewD) +MD(BnewE)+MD(BnewF) MED(Bnew) < MED(B). Although TotalDist() of Bnew are greater than B, NearDist() of Bnew is far less than that of B. Smaller NearDist() means B has moved closer to other individuals, the diversity would be degenerated. Since the Maximum Extension Distance MED(Bnew) is less than the value of MED(B), individual B should not be replaced by the candidate solution Bnew. The time complexity of Maximum Extension Distance strategy is O(MP). The pseudocode is given in Algorithm 2. C. Overall Algorithm For a given MaOP, a population of randomly sampled individuals are generated. At each generation, the proposed ES adopts the Precision-Controllable Mutation operator to every individual in each decision variant. Let P(i) t be the ith original solution in population Pt, and NewP(i) t be the mutated new solution of P(i) t . If NewP(i) t dominate P(i) t , the new mutated solution would replace the original one. If NewP(i) t is dominated by P(i) t , the new mutated solution would be neglected. If NewP(i) t and P(i) t are nondominated with respect to each other, our algorithm would compare the numbers which other solutions in the population that dominate P(i) t or NewP(i) t . Let DomCount(P(i) t ) be the function that calculate the number of other solutions dominate P(i) t , the computational complexity is O(MP). If the function value of NewP(i) t become smaller than the value of P(i) t , that is, less solutions can dominate NewP(i) t , the proposed algorithm would accept the new mutated solution. If the value of DomCount(NewP(i) t ) become equal to the value of P(i) t , our algorithm would continue to compare the value of Maximum Extension Distance. If the value of Maximum Extension Distance MED(NewP(i) t ) is greater than MED(P(i) t ), the new mutated Algorithm 3 Proposed MaOES Algorithm Input: Output: 1: Initialization Pt, t = 0 2: while ( t < maximum generation ) 3: for i = 1 to P 4: NewP(i) t = Precision-Controllable Mutation (P(i) t ) 5: Objective Function Calculation (NewP(i) t ) 6: if (NewP(i) t . P(i) t ) then 7: P(i) t = NewP(i) t 8: else if (NewP(i) t . P(i) t ) and (P(i) t . NewP(i) t ) then 9: if DomCount(NewP(i) t ) < DomCount (P(i) t ) then 10: P(i) t = NewP(i) t 11: elseif DomCount(NewP(i) t ) = DomCount (P(i) t ) then 12: if MED(NewP(i) t ) > MED(P(i) t ) then 13: P(i) t = NewP(i) t 14: end if 15: end if 16: end if 17: end for 18: end while solution is better than the original one, and would replace it. Otherwise, we should eliminate the new solution. The computational complexity of the overall algorithm is O(MP2). The pseudocode is given in Algorithm 3. IV. EXPERIMENTAL RESULTS In order to validate the proposed MaOES, we compare its performance with some state-of-the-art representatives from different categories of MaOEAs, including NSGA-III [9], MOEA/DD [10], GrEA [7], HypE [11], RPD-NSGAII [27], S3-CMA-ES [13], MyO-DEMR [24], NMPSO [23], and onebyone EA [25]. In the comparison, these algorithms are evaluated on 16 scalable benchmark instances in WFG [41] and DTLZ [42] suites. These MaOPs contain different problem characteristics, such as convex, concave, disconnected, linear, and degenerated. We perform 30 independent runs for each algorithm on each test instance and the maximum evaluation is set to 10 000. For the proposed MaOES, the SBX and the polynomial mutation have been adopted for real-coded GAs. For a fair comparison, the population size is set to 200, SBX distribution index is set to 20, polynomial mutation distribution index is set to 20, crossover probability is set to 1.0, and mutation probability is set to 1/N, where N denotes the number of decision variables. The other variable parameters of the compared algorithms are adopted as suggested in the original papers, including [7], [9].[11], [13], [23].[25], and [27]. For each benchmark instance, 10 000 true PF solutions (i.e., PF true), are generated by PlatEMO [43] to evaluate the inverted generational distance (IGD) [44]. The IGD indicator measures the distance between the true PF and the closest individual in the obtained solutions. The indicator can be expressed as IIGD =  |PF| i=1 d2 i 1/2 |PF| (10) Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. ZHANG et al.: ES-BASED MaOEA THROUGH VECTOR EQUILIBRIUM 7 TABLE I AVERAGE IGD VALUES OVER 30 RUNS ON UNCONSTRAINT DTLZ AND WFG BENCHMARK INSTANCES (POPULATION SIZE 200), WHERE THE BEST MEAN FOR EACH INSTANCE IS SHOWN WITH A GRAY BACKGROUND where di is the Euclidean distance between the ith solution in the true PF and the closest individual in the obtained solutions. As a matter of fact, the lower the IGD value is, the better approximate solution set is obtained. To facilitate the experiments, we have implemented the algorithm in the object Pascal language and developed a graphical user interface (GUI) under the Delphi XE7 platform. The GUI and MaOES algorithm source code are available Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 8 IEEE TRANSACTIONS ON CYBERNETICS Fig. 8. Experimental results for three-objectives benchmark problems on unconstraint DTLZ suite by MaOES (population sizes 100). (a) DTLZ1. (b) DTLZ2. (c) DTLZ3. (d) DTLZ4. (e) DTLZ5. (f) DTLZ6. (g) DTLZ7. in the following website: https://github.com/MaOEA/MaOES. Interested readers can retrieve the code and validate the performance on his/her own. A. Performance on DTLZ Problems The IGD values obtained by the ten competing algorithms are given in Table I. One can easily notice that MaOES performs significantly better than those of competing MaOEAs on DTLZ1, DTLZ6, and DTLZ7 with respect to all considered numbers of objectives. For DTLZ2, MOEA/DD obtains a better IGD value on the eight-dimension instances while MaOES shows better results with the other DTLZ2 instances. For DTLZ4, MOEA/DD and onebyone EA obtain better IGD values on the 3-objective instance and 5-objective instance, respectively, and MaOES has the best performance when the number of objectives is more than 5. For DTLZ5, S3-CMAES and onebyone EA outperform other MaOEAs in almost all DTLZ5 instances, while MaOES wins 3. From 28 test instances of the DTLZ benchmark problems, it is clear that MaOES is the best optimizer as it wins in 22 instances. Thus, from the empirical results on DTLZ1.DTLZ7 test problems, we find that MaOES outperforms other compared MaOEAs. The results demonstrate the ability of the proposed MaOES to deal with MAOPs characterized by linear, concave, degenerated, and discontinues PFs. For example, given the threeobjective DTLZ instances, 100 nondominated solutions over 5,000 generations can be seen in Fig. 8. Fig. 9 shows the corresponding parallel coordinates of the solutions of MaOES on 10-D DTLZ test instances. In comparison with parallel coordinates of true PF sampled by PlatEMO. As can be seen in Fig. 9, MaOES has a good convergence on DTLZ1-DTLZ4, and DTLZ7. However, MaOES have a poor population convergence on ten-dimension DTLZ5 and DTLZ6. In the DTLZ6 of Fig. 8, some individuals already have obtained good convergence and distribution PF ranging from 0 to 1. Please note that DTLZ5 has a nondegenerate part of the PF, although DTLZ5 has often been used as MaOP with degenerate PFs. Because of the effectiveness of Maximum Fig. 9. Solution sets obtained by MaOES and true PF on the ten-objective DTLZ test suite through parallel coordinates. Extension Distance strategy, MaOES obtain good coverage for all DTLZ test instances, and almost uniformly contribution to all ten objectives. B. Performance on WFG Problems As can be seen from Table I, MaOES has better IGD means values than the other MaOEAs in all WFG1, WFG3, and WFG4 instances. For WFG2, WFG5, and WFG8, NMPSO obtains better IGD values on the 10-objective instances and MaOES shows better results with all the remaining instances. For WFG7 and WFG9, GrEA obtains better IGD values on the 8-objective instances, while NMPSO has the best performance on the 10-objective instances. For WFG6, GrEA obtains better IGD values on the 8-objective and 10-objective instances, and MaOES shows better results with the other WFG6 instances. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. ZHANG et al.: ES-BASED MaOEA THROUGH VECTOR EQUILIBRIUM 9 Fig. 10. Experimental results for three-objectives benchmark problems on unconstraint WFG suite by MaOES (population sizes 100). (a) WFG1. (b) WFG2. (c) WFG3. (d) WFG4. (e) WFG5. (f) WFG6. (g) WFG7. (h) WFG8. (i) WFG9. From the 36 WFG problem instances, MaOES wins in 27 instances which clearly show the ability of the proposed MaOES to deal with MaOPs characterized by mixed convex and concave, disconnected convex, degenerated and concave PFs. For example, given the three-objective WFG instances, the final nondominated solutions over 5,000 generations can be seen in Fig. 10. Fig. 10(a) shows the proposed algorithm can find well-convergent and well-diversified solutions on mixed convex and concave PF for WFG1. As can be seen from Fig. 10(b), our algorithm obtains a proper distribution among solutions for WFG2 with disconnected convex PF. Fig. 10(c) shows our MaOES can obtain quality convergence and uniform solutions that lie on the degenerated WFG3. Fig. 10(d).(j) show that the MaOES obtain sets of good distributed solutions that cover the whole concave PFs for WFG4-WFG9. Fig. 11 shows the corresponding parallel coordinates of the solutions of MaOES on ten-objectives WFG test instances. In comparison with parallel coordinates of true PF sampled by PlatEMO. As can be seen in Fig. 11, MaOES has a good convergence on eight WFG test instances (i.e., WFG1 and WFG3-WFG9). In addition, our proposed algorithm obtains a uniform coverage for each objective, largely due to the effective design of Maximum Extension Distance strategy. However, MaOES fails to cover the region on the first three objectives for WFG2, and there are no solution distributed in the second objective ranging from 2 to 4 for WFG8. Fig. 11. Solution sets obtained by MaOES and true PF on the ten-objective WFG test suite through parallel coordinates. Fig. 12 shows the corresponding parallel coordinates of the solutions of five state-of-the-art MaOEAs along with the PFs on ten-dimension DTLZ1, DTLZ7, WFG3, and WFG4 test instances, which characterized by linear, discontinues, degenerated, and concave PFs. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 10 IEEE TRANSACTIONS ON CYBERNETICS Fig. 12. Solution sets obtained by MaOES, GrEA, MOEA/DD, NSGAIII, HypE, and true PF on the ten-objective DTLZ1, DTLZ7, WFG3, and WFG4 through parallel coordinates. As can be seen in Fig. 12(a), the true DTLZ1 PF ranging from 0 to 0.5. MaOES has a good convergence PF ranging from 0 to 1, the other four algorithms show an inferior convergence, with its solution set ranging from 0 to around 180, 50, and 80, respectively. The results of the discontinues DTLZ7 instance is shown in Fig. 12(b), MaOES performs well on convergence and coverage within the DTLZ7 PF. However, MOEA/DD and HypE fail to cover the region on almost all ten objectives, and GrEA and NSGA-III obtain poor diversity on the first nine objectives. From Fig. 12(c), MaOES and HypE perform well on convergence and coverage, and MaOES obtains more uniform distribution in all ten objectives. The other three algorithms show an inferior convergence on the degenerated WFG3 PF. In Fig. 12(d), all the algorithms have good convergence on the WFG4 concave PF. The MaOES, GrEA and NSGA-III can reach on all the objectives, however, MOEA/DD and HypE fail to cover the region on two different objectives and five different objectives, respectively. Moreover, the solutions of MaOES and GrEA can spread over the whole range for each objective. In contrast, MOEA/DD and NSGAIII obtain very few lines distributed around the middle section on all the objectives. From 64 test instances of the DTLZ and WFG benchmark problems, it is clear that MaOES is the best optimizer as it wins 56 instances against NMPSO, wins 59 instances against S3-CMA-ES and onebyoneEA, wins 60 instances against GrEA, wins 61 instances against HypE, wins 62 instances against MyO-DEMR and RPD-NSGAII, and wins 63 instances against NSGA-III. Thus, from the empirical results on DTLZ and WFG test problems, we find that MaOES outperforms other compared MaOEAs. C. Performance on Different Population Size The MaOES need not maintain a large population size, since the Maximum Extension Distance can guide the individuals to maintain uniform distances from the nearest neighbors and extend the entire objective space automatically. In fact, the MaOES can efficiently obtain quality converged and diversified solutions which cover the entire true PF with Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. ZHANG et al.: ES-BASED MaOEA THROUGH VECTOR EQUILIBRIUM 11 Fig. 13. Experimental results for selected benchmark functions with different population sizes by MaOES (i.e., 4, 10, 30, and 50). various population sizes (i.e., 4, 10, 30, and 50) as shown in Fig. 13. V. CONCLUSION In this article, we proposed an ES for solving MaOPs based on ES. The algorithm imitates the isotropic magnetic particles, which automatically repel each other and extend the entire magnetic fields as far as possible. In the proposed algorithm, an efficient self-adaptive Precision Controllable Mutation operator was designed for individuals to explore and exploit the decision space. In addition, the Maximum Extension Distance strategy was designed to guide individuals to keep uniform distances and extension to approximate the entire PF automatically. The MaOES can obtain a well-converged and well-diversified PF with much less population size and far lower computational complexity. The larger the number of individuals, the sharper the contour of the approximate PF will be. The performance is compared against nine different categories of state-of-the-art MaOEAs, including GrEA, NSGA-III, MOEA/DD, HypE and RPD-NSGAII, S3-CMAES, MyO-DEMR, NMPSO, and onebyone EA. The experimental results show that MaOES provides the best IGD measure, and the performance of the proposed algorithm is significantly better than the chosen competing MaOEAs on DTLZ and WFG with 3.10 objectives. The results demonstrate the ability of our MaOES to deal with the problems characterized by linear, concave, mixed convex and concave, disconnected convex, and degenerated MaOPs. Compared with the existing MaOEAs, our algorithm has satisfactorily addressed several challenges. 1) Since every mutated new solution xf needs only compare with its original individual x, there is no selection pressure and dominance resistance problem in our algorithm. 2) In our algorithm, individuals like isotropic magnetic particles, would repel from each other, and keep uniform distance from the nearest neighbors. Our MaOES can obtain well-diversified solutions without explicit diversity preservation scheme. 3) The proposed Maximum Extension Distance strategy is the product of NearDist() and TotalDist(). The greater the maximum extension distance implies an individual has extended the overall boundary and better individual diversity. Our MaOES can extend to approximate the entire PF automatically without explicitly identifying or keeping the boundary or extreme solutions. 4) The overall computational complexity of one generation of MaOES is equal to O(MP2). In addition, the experimental results show that the MaOES needs only very little population size to obtain a well-converged and well-diversified PF. The larger the number of individuals, the sharper the contour of the approximate PFs will be. 5) MaOES requires no reference points or sensitive parameters, and the experimental results show that MaOES is very robust to deal with linear, concave, mixed convex and concave, disconnected convex, and degenerated MaOPs. 6) Given the required search precision, the Precision- Controllable Mutation operator can generate a new mutated solution for both exploration and exploitation efficiently. The Precision-Controllable Mutation operator can improve the efficiency and eliminate unnecessary computational cost. REFERENCES [1] K. Deb, A. Pratap, S. Agarwal, and T. Meyarivan, gA fast and elitist multiobjective genetic algorithm: NSGA-II,h IEEE Trans. Evol. Comput., vol. 6, no. 2, pp. 182.197, Apr. 2002. [2] E. Zitzler, M. Laumanns, and L. Thiele, gSPEA2: Improving the strength Pareto evolutionary algorithm,h in Proc. Evol. Methods Design Optim. Control Appl. Ind. Problems (EUROGEN), Athens, Greece, 2001, pp. 95.100. [3] P. J. Fleming, R. C. Purshouse, and R. J. Lygoe, gMany-objective optimization: An engineering design perspective,h in Proc. Int. Conf. Evol. Multi Criterion Optim., 2005, pp. 14.32. [4] J. G. Herrero, A. Berlanga, and J. M. M. Lopez, gEffective evolutionary algorithms for many-specifications attainment: Application to air traffic control tracking filters,h IEEE Trans. Evol. Comput., vol. 13, no. 1, pp. 151.168, Feb. 2009. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 12 IEEE TRANSACTIONS ON CYBERNETICS [5] K. Narukawa and T. Rodemann, gExamining the performance of evolutionary many-objective optimization algorithms on a real-world application,h in Proc. 6th Int. Conf. Genet. Evol. Comput., Kitakushu, Japan, 2012, pp. 316.319. [6] A. Sulflow, N. Drechsler, and R. Drechsler, gRobust multi-objective optimization in high dimensional spaces,h in Proc. Int. Conf. Evol. Multi Criterion Optim., Matsushima, Japan, 2007, pp. 715.726. [7] S. X. Yang, M. Q. Li, X. H. Liu, and J. H. Zheng, gA grid-based evolutionary algorithm for many-objective optimization,h IEEE Trans. Evol. Comput., vol. 17, no. 5, pp. 721.736, Oct. 2013. [8] Z. He, G. G. Yen, and J. Zhang, gFuzzy-based Pareto optimality for many-objective evolutionary algorithms,h IEEE Trans. Evol. Comput., vol. 18, no. 2, pp. 269.285, Apr. 2014. [9] K. Deb and H. Jain, gAn evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, Part I: Solving problems with box constraints,h IEEE Trans. Evol. Comput., vol. 18, no. 4, pp. 577.601, Aug. 2014. [10] K. Li, K. Deb, Q. Zhang, and S. Kwong, gAn evolutionary manyobjective optimization algorithm based on dominance and decomposition,h IEEE Trans. Evol. Comput., vol. 19, no. 5, pp. 694.716, Oct. 2015. [11] J. Bader and E. Zitzler, gHypE: An algorithm for fast hypervolume-based many-objective optimization,h Evol. Comput., vol. 19, no. 1, pp. 45.76, 2011. [12] H. K. Singh, A. Isaacs, and T. Ray, gA Pareto corner search evolutionary algorithm and dimensionality reduction in many-objective optimization problems,h IEEE Trans. Evol. Comput., vol. 15, no. 4, pp. 539.556, Aug. 2011. [13] H. Chen, R. Cheng, J. Wen, H. Li, and J. Weng, gSolving large-scale many-objective optimization problems by covariance matrix adaptation evolution strategy with scalable small subpopulations,h Inf. Sci., vol. 509, no. 1, pp. 457.469, 2020. [14] I. Rechenberg, Evolution Strategy: Optimizing Technical Systems With Principles of Biological Evolution (in German). Stuttgart, Germany: Frommann-Holzboog, 1973. [15] H. Schwefel, Numerical Optimization of Computer Models Using Evolutionary Strategy. Basel, Switzerland: Birkhauser Verlag, 1977. [16] J. Zhang, X. Yuan, Z. Zeng, B. P. Buckles, C. Koutsougeras, and S. Amer, gNiching in an ES/EP context,h in Proc. Congr. Evol. Comput., Washington, DC, USA, 1999, pp. 1426.1433. [17] O. Takahashi and S. Kobayashi, gAn adaptive neighboring search using crossover-like mutation for multi modal function optimization,h in Proc. IEEE Int. Conf. Syst. Man Cybern., Tucson, AZ, USA, 2001, pp. 261.267. [18] O. Aichholzer et al., gEvolution strategy and hierarchical clustering,h IEEE Trans. Magn., vol. 38, no. 2, pp. 1041.1044, Mar. 2002. [19] C.-H. Im, H.-K. Kim, H.-K. Jung, and K. Choi, gA novel algorithm for multimodal function optimization based on evolution strategy,h IEEE Trans. Magn., vol. 40, no. 2, pp. 1224.1227, Mar. 2004. [20] J. Knowles and D. Corne, gThe Pareto archived evolution strategy: A new baseline algorithm for Pareto multiobjective optimisation,h in Proc. Congr. Evol. Comput., Washington, DC, USA, 1999, pp. 98.105. [21] R. Fuller, Synergetics.Explorations in the Geometry of Thinking, vol. 1. New York, NY, USA: Macmillan, 1975. [22] R. Fuller, Synergetics.Explorations in the Geometry of Thinking, vol. 2. New York, NY, USA: Macmillan, 1979, [23] Q. Lin et al., gParticle swarm optimization with a balanceable fitness estimation for many-objective optimization problems,h IEEE Trans. Evol. Comput., vol. 22, no. 1, pp. 32.46, Feb. 2018. [24] R. Denysiuk, L. Costa, and I. E. Santo, gMany-objective optimization using differential evolution with variable-wise mutation restriction,h in Proc. 15th Annu. Conf. Genet. Evol. Comput., Amsterdam, The Netherlands, 2013, pp. 591.598. [25] Y. Liu, D. Gong, J. Sun, and Y. Jin, gA many-objective evolutionary algorithm using a one-by-one selection strategy,h IEEE Trans. Cybern., vol. 47, no. 9, pp. 2689.2702, Sep. 2017. [26] D. Gong, J. Sun, and Z. Miao, gA set-based genetic algorithm for interval many-objective optimization problems,h IEEE Trans. Evol. Comput., vol. 22, no. 1, pp. 47.60, Feb. 2018. [27] K. Deb, M. Mohan, and S. Mishra, gEvaluating the ƒÃ-domination based multi-objective evolutionary algorithm for a quick computation of Pareto-optimal solutions,h Evol. Comput., vol. 13, no. 4, pp. 501.525, 2005. [28] M. Li, S. Yang, and X. Liu, gShift-based density estimation for Paretobased algorithms in many-objective optimization,h IEEE Trans. Evol. Comput., vol. 18, no. 3, pp. 348.365, Jun. 2014. [29] M. Elarbi, S. Bechikh, A. Gupta, L. B. Said, and Y.-S. Ong, gA new decomposition-based NSGA-II for many-objective optimization,h IEEE Trans. Syst., Man, Cybern., Syst., vol. 48, no. 7, pp. 1191.1210, Jul. 2018. [30] H. Ishibuchi, Y. Setoguchi, H. Masuda, and Y. Nojima, gPerformance of decomposition-based many-objective algorithms strongly depends on Pareto front shapes,h IEEE Trans. Evol. Comput., vol. 21, no. 2, pp. 169.190, Apr. 2017. [31] E. Zitzler and S. Kunzli, gIndicator-based selection in multiobjective search,h in Proc. 8th Int. Conf. Parallel Problem Solving Nat., Birmingham, U.K., 2004, pp. 832.842. [32] D. K. Saxena, J. A. Duro, A. Tiwari, K. Deb, and Q. Zhang, gObjective reduction in many-objective optimization: Linear and nonlinear algorithms,h IEEE Trans. Evol. Comput., vol. 17, no. 1, pp. 77.99, Feb. 2013. [33] E. Mezura-Montes and C. A. Coello Coello, gA simple evolution strategy to solve constrained optimization problems,h in Proc. Genet. Evol. Comput. Conf., Chicago, IL, USA, 2003, pp. 640.641. [34] T. Salimans, J. Ho, X. Chen, and I. Sutskever, gEvolution strategies as a scalable alternative to reinforcement learning,h arXiv preprint arXiv:1703.03864, 2017. [Online]. Available: https://arxiv.org/abs/1703.03864v2 [35] R. C. Purshouse and P. J. Fleming, gOn the evolutionary optimization of many conflicting objectives,h IEEE Trans. Evol. Comput., vol. 11, no. 6, pp. 770.784, Dec. 2007. [36] J. Knowles and D. Corne, gQuantifying the effects of objective space dimension in evolutionary multiobjective optimization,h in Proc. Int. Conf. Evol. Multi Criterion Optim., Matsushima, Japan, 2007, pp. 757.771. [37] H. Ishibuchi, N. Tsukamoto, and Y. Nojima, gEvolutionary manyobjective optimization: A short review,h in Proc. IEEE Congr. Evol. Comput. (CEC), Hong Kong, 2008, pp. 2419.2426. [38] B. Li, J. Li, K. Tang, and X. Yao, gMany-objective evolutionary algorithms: A survey,h ACM Comput. Surveys, vol. 48, no. 1, pp. 1.35, 2015. [39] H.-G. Beyer and H.-P. Schwefel, gEvolution strategies: A comprehensive introduction,h Nat. Comput., vol. 1, no. 1, pp. 3.52, 2002. [40] K. Deb and R. B. Agrawal, gSimulated binary crossover for continuous search space,h Complex Syst., vol. 9, no. 2, pp. 115.148, 1995. [41] S. Huband, L. Barone, L. While, and P. Hingston, gA scalable multiobjective test problem toolkit,h in Proc. Int. Conf. Evol. Multi Criterion Optim., Guanajuato, Mexico, 2005, pp. 280.295. [42] K. Deb, L. Thiele, M. Laumanns, and E. Zitzler, gScalable test problems for evolutionary multiobjective optimization,h in Evolutionary Multi-Objective Optimization, Advanced Information and Knowledge Processing. London, U.K.: Springer, 2005, pp. 105.145. [43] Y. Tian, R. Cheng, X. Zhang, and Y. Jin, gPlatEMO: A MATLAB platform for evolutionary multi-objective optimization [educational forum],h IEEE Comput. Intell. Mag., vol. 12, no. 4, pp. 73.87, Nov. 2017. [44] P. Czyzak and A. Jaszkiewicz, gPareto simulated annealing-a metaheuristic technique for multiple-objective combinatorial optimization,h J. Multi Criteria Decis. Anal., vol. 7, no. 1, pp. 34.47, 1998. Kai Zhang received the Ph.D. degree in system analyses and integration from the Huazhong University of Science and Technology, Wuhan, China, in 2008. He was a Postdoctoral Research Fellow with the School of Electronics Engineering and Computer Science, Peking University, Beijing, China, from 2008 to 2010. He is currently a Professor with the School of Computer Science and Technology, Wuhan University of Science and Technology, Wuhan. His research focuses on evolutionary computation and multicriteria decision making. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:33:17 UTC from IEEE Xplore. Restrictions apply. This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. ZHANG et al.: ES-BASED MaOEA THROUGH VECTOR EQUILIBRIUM 13 Zhiwei Xu received the B.S. degree in information security from the Wuhan University of Science and Technology, Wuhan, China, in 2017, where he is currently pursuing the Ph.D. degree with the School of Computer Science and Technology. His research interests include evolutionary computation and many-objective optimization. Shengli Xie (Fellow, IEEE) received the M.S. degree in mathematics from Central China Normal University, Wuhan, China, in 1992, and the Ph.D. degree in control theory and applications from the South China University of Technology, Guangzhou, China, in 1997. He is currently a Full Professor and the Head of the Key Laboratory of Intelligent Detection and The Internet of Things in Manufacturing, Guangdong University of Technology, Guangzhou. He has authored or coauthored 2 books and over 200 scientific papers in journals and conference proceedings. His research interests include wireless networks, automatic control, and blind signal processing. Prof. Xie was a recipient of the Second Prize in Chinafs State Natural Science Award in 2009 for his research on blind source separation and identification. Gary G. Yen (Fellow, IEEE) received the Ph.D. degree in electrical and computer engineering from the University of Notre Dame, Notre Dame, IN, USA, in 1992. He was with the Structure Control Division, U.S. Air Force Research Laboratory, Albuquerque, NM, USA. In 1997, he joined Oklahoma State University, Stillwater, OK, USA, where he is currently a Regents Professor with the School of Electrical and Computer Engineering. His research interests include intelligent control, computational intelligence, conditional health monitoring, and signal processing and their industrial/defense applications. Dr. Yen received the Andrew P Sage Best Transactions Paper Award from the IEEE Systems, Man and Cybernetics Society in 2011 and the Meritorious Service Award from the IEEE Computational Intelligence Society in 2014. He was an Associate Editor of the IEEE Control Systems Magazine; the IEEE TRANSACTIONS ON CONTROL SYSTEMS TECHNOLOGY; Automatica; Mechantronics; the IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS.PART A; the IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS.PART B; and the IEEE TRANSACTIONS ON NEURAL NETWORKS. He is currently serving as an Associate Editor for the IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION and the IEEE TRANSACTIONS ON CYBERNETICS. He served as the General Chair for the 2003 IEEE International Symposium on Intelligent Control, Houston, TX, USA, and the 2006 IEEE World Congress on Computational Intelligence, Vancouver, BC, Canada. He served as the Vice President for the Technical Activities from 2005 to 2006 and the President from 2010 to 2011 of the IEEE Computational intelligence Society. He is the Founding Editor-in-Chief of IEEE Computational Intelligence Magazine from 2006 to 2009. He is a fellow of IET.","['article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'ieee', 'transactions', 'cybernetics', 'evolution', 'strategy', 'many', 'objective', 'evolutionary', 'algorithm', 'vector', 'equilibrium', 'zhang', 'xie', 'fellow', 'ieee', 'gary', 'yen', 'fellow', 'ieee', 'abstract', 'recent', 'years', 'many', 'objective', 'evolutionary', 'algorithms', 'maoeas', 'developed', 'search', 'diversified', 'converged', 'pareto', 'optimal', 'solutions', 'high', 'dimensional', 'many', 'objective', 'optimization', 'problems', 'maops', 'existing', 'maoeas', 'tackle', 'challenges', 'including', 'dominance', 'resistance', 'solutions', 'effective', 'diversity', 'preservation', 'scheme', 'management', 'large', 'population', 'size', 'high', 'computational', 'complexity', 'sensitivity', 'shape', 'pareto', 'front', 'relying', 'high', 'quality', 'reference', 'points', 'article', 'present', 'evolution', 'strategy', 'solving', 'maops', 'called', 'maoes', 'solve', 'challenges', 'inspired', 'vector', 'equilibrium', 'phenomenon', 'magnetic', 'fields', 'isotropic', 'magnetic', 'particles', 'repel', 'keep', 'uniform', 'distance', 'nearest', 'neighbors', 'extend', 'entire', 'magnetic', 'fields', 'possible', 'algorithm', 'efficient', 'self', 'adaptive', 'precision', 'controllable', 'mutation', 'operator', 'designed', 'individuals', 'explore', 'exploit', 'decision', 'space', 'addition', 'maximum', 'extension', 'distance', 'strategy', 'isotropic', 'magnetic', 'particle', 'behavior', 'magnetic', 'field', 'developed', 'guide', 'individuals', 'keep', 'uniform', 'distance', 'extension', 'approximate', 'entire', 'result', 'maoes', 'obtain', 'converged', 'diversified', 'much', 'population', 'size', 'lower', 'computational', 'complexity', 'larger', 'number', 'individuals', 'sharper', 'contour', 'resulting', 'approximate', 'algorithm', 'evaluated', 'scalable', 'maops', 'test', 'dtlz', 'wfg', 'experimental', 'results', 'demonstrated', 'provide', 'competitive', 'performance', 'compared', 'chosen', 'state', 'art', 'maoeas', 'manuscript', 'received', 'august', 'accepted', 'december', 'supported', 'national', 'natural', 'science', 'china', 'grant', 'grant', 'grant', 'grant', 'article', 'recommended', 'associate', 'editor', 'zhang', 'corresponding', 'author', 'gary', 'yen', 'zhang', 'school', 'computer', 'science', 'technology', 'wuhan', 'university', 'science', 'technology', 'wuhan', 'china', 'mail', 'edu', 'key', 'laboratory', 'intelligent', 'information', 'processing', 'real', 'industrial', 'system', 'wuhan', 'university', 'science', 'technology', 'wuhan', 'china', 'mail', 'com', 'xie', 'key', 'laboratory', 'intelligent', 'internet', 'manufacturing', 'guangzhou', 'china', 'laboratory', 'discrete', 'manufacturing', 'university', 'technology', 'guangzhou', 'china', 'mail', 'edu', 'gary', 'yen', 'school', 'electrical', 'computer', 'engineering', 'state', 'university', 'usa', 'mail', 'edu', 'versions', 'figures', 'article', 'available', 'online', 'http', 'ieee', 'org', 'digital', 'object', 'identifier', 'index', 'terms', 'evolution', 'strategy', 'many', 'objective', 'evolutionary', 'algorithm', 'maoeas', 'many', 'objective', 'optimization', 'problem', 'maops', 'introduction', 'many', 'real', 'world', 'problems', 'multiple', 'conflicting', 'objectives', 'need', 'optimized', 'last', 'multiobjective', 'evolutionary', 'algorithms', 'moeas', 'nsga', 'shown', 'ability', 'search', 'set', 'converged', 'nondominated', 'solutions', 'objective', 'optimization', 'problems', 'effective', 'moeas', 'fail', 'tackling', 'real', 'world', 'applications', 'involving', 'many', 'objectives', 'optimization', 'engineering', 'design', 'air', 'traffic', 'control', 'scheduling', 'recent', 'years', 'state', 'art', 'designs', 'manyobjective', 'evolutionary', 'algorithms', 'maoeas', 'solving', 'many', 'objective', 'optimization', 'problems', 'maops', 'including', 'improved', 'diversity', 'approaches', 'grea', 'enhanced', 'dominance', 'approaches', 'nsga', 'decomposition', 'approaches', 'nsga', 'iii', 'moea', 'indicator', 'approaches', 'hype', 'objective', 'reduction', 'approaches', 'evolution', 'strategy', 'approaches', 'cma', 'number', 'objectives', 'increases', 'large', 'number', 'solutions', 'becomes', 'nondominated', 'dominance', 'resistance', 'solutions', 'selection', 'pressure', 'pareto', 'front', 'convergence', 'ability', 'maoeas', 'deteriorates', 'order', 'maintain', 'set', 'diversified', 'solutions', 'entire', 'maoeas', 'need', 'increase', 'number', 'reference', 'points', 'number', 'search', 'directions', 'keep', 'extreme', 'solutions', 'extend', 'boundary', 'priori', 'shape', 'knowledge', 'difficult', 'generate', 'high', 'quality', 'reference', 'solutions', 'identify', 'boundary', 'solutions', 'high', 'dimensional', 'maops', 'years', 'simple', 'powerful', 'approach', 'optimization', 'problems', 'particular', 'self', 'adaptation', 'mechanisms', 'applied', 'solving', 'various', 'multiobjective', 'optimization', 'problems', 'order', 'obtain', 'diversified', 'solutions', 'many', 'diversity', 'approaches', 'niching', 'crossover', 'mutation', 'clustering', 'ieee', 'requires', 'ieee', 'http', 'www', 'ieee', 'org', 'publications', 'index', 'html', 'information', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'ieee', 'transactions', 'cybernetics', 'name', 'designs', 'need', 'maintain', 'large', 'population', 'size', 'sorting', 'selection', 'reproduction', 'addition', 'excessive', 'success', 'genetic', 'algorithms', 'gas', 'led', 'lost', 'attention', 'powerful', 'article', 'propose', 'novel', 'solving', 'maops', 'called', 'maoes', 'fuller', 'discovered', 'vector', 'called', 'vector', 'equilibrium', 'inspired', 'vector', 'equilibrium', 'phenomenon', 'magnetic', 'fields', 'isotropic', 'magnetic', 'particles', 'repel', 'extend', 'entire', 'magnetic', 'fields', 'possible', 'spirit', 'maoes', 'obtain', 'diversified', 'much', 'population', 'size', 'lower', 'computational', 'complexity', 'larger', 'number', 'individuals', 'sharper', 'contour', 'resulting', 'approximate', 'algorithm', 'uses', 'mutation', 'selection', 'individual', 'self', 'adaptation', 'precision', 'controllable', 'mutation', 'operator', 'designed', 'individuals', 'explore', 'exploit', 'decision', 'space', 'maximum', 'extension', 'distance', 'strategy', 'tailored', 'guide', 'individuals', 'keep', 'uniform', 'distance', 'particles', 'population', 'facilitate', 'extension', 'approximate', 'entire', 'remaining', 'sections', 'complete', 'article', 'section', 'provides', 'comprehensive', 'analysis', 'existing', 'maoeas', 'maops', 'maoes', 'detailed', 'section', 'iii', 'section', 'experimental', 'results', 'given', 'selected', 'benchmark', 'test', 'problems', 'conclusions', 'drawn', 'section', 'observations', 'identified', 'literature', 'review', 'mathematical', 'model', 'follows', 'min', 'min', 'consists', 'decision', 'variables', 'search', 'space', 'consists', 'objective', 'functions', 'denotes', 'objective', 'space', 'recent', 'years', 'number', 'novel', 'effective', 'algorithms', 'maops', 'particle_swarm', 'optimization', 'fitness', 'estimation', 'many', 'objective', 'optimization', 'manyobjective', 'optimization', 'differential', 'evolution', 'variable', 'mutation', 'maoea', 'selection', 'strategy', 'set', 'interval', 'many', 'objective', 'optimization', 'problems', 'existing', 'strategies', 'maoeas', 'classified', 'several', 'different', 'categories', 'including', 'improved', 'diversity', 'approaches', 'enhanced', 'dominance', 'approaches', 'decomposition', 'approaches', 'indicator', 'approaches', 'objective', 'reduction', 'approaches', 'approaches', 'existing', 'strategies', 'maoeas', 'improved', 'dominance', 'diversity', 'approaches', 'enhanced', 'dominance', 'approaches', 'nsga', 'moea', 'replace', 'exact', 'pareto', 'dominance', 'dominance', 'definitions', 'enhance', 'selection', 'pressure', 'improved', 'diversity', 'approaches', 'including', 'grea', 'sde', 'attempt', 'improve', 'performance', 'maoeas', 'reducing', 'impact', 'diversity', 'maintenance', 'balance', 'convergence', 'diversity', 'difficult', 'maintain', 'evolution', 'process', 'maoeas', 'excessive', 'selection', 'pressure', 'result', 'diversity', 'maintenance', 'hand', 'excessive', 'diversity', 'selection', 'convergence', 'performance', 'decomposition', 'approaches', 'maoeas', 'characterized', 'generating', 'distributed', 'normalized', 'weight', 'vectors', 'reference', 'points', 'approaches', 'search', 'pareto', 'optimal', 'solutions', 'reference', 'vector', 'reference', 'point', 'representative', 'designs', 'include', 'moea', 'nsga', 'iii', 'rpd', 'nsgaii', 'decomposition', 'maoeas', 'maintain', 'increasing', 'number', 'search', 'directions', 'given', 'increasing', 'number', 'objectives', 'approaches', 'show', 'high', 'sensitivity', 'shape', 'maops', 'pfs', 'addition', 'exists', 'infinite', 'number', 'possible', 'surface', 'high', 'dimensional', 'objective', 'space', 'priori', 'knowledge', 'surface', 'difficult', 'generate', 'high', 'quality', 'reference', 'solutions', 'maops', 'indicator', 'approaches', 'indicator', 'approaches', 'indicator', 'values', 'guide', 'search', 'process', 'solving', 'maops', 'hype', 'indicator', 'maoeas', 'issues', 'computational', 'cost', 'expensive', 'exact', 'calculation', 'second', 'indicator', 'maoeas', 'difficulties', 'generate', 'set', 'distributed', 'solutions', 'third', 'remains', 'select', 'appropriate', 'reference', 'points', 'various', 'indicator', 'maoeas', 'objective', 'reduction', 'approaches', 'objective', 'reduction', 'approaches', 'finding', 'objectives', 'objectives', 'typical', 'representatives', 'methods', 'reduce', 'computational', 'information', 'result', 'reduced', 'objectives', 'moreover', 'techniques', 'applicable', 'problems', 'number', 'conflicting', 'objectives', 'evolution', 'strategy', 'approaches', 'approaches', 'apply', 'self', 'adaptive', 'mutation', 'mechanism', 'solving', 'maops', 'niching', 'archive', 'maintenance', 'methods', 'maintain', 'diverse', 'solutions', 'popular', 'designs', 'cma', 'paes', 'particular', 'simpler', 'implement', 'scale', 'distributed', 'setting', 'control', 'outcome', 'resembles', 'simple', 'hill', 'climbing', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'zhang', 'maoea', 'vector', 'equilibrium', 'high', 'dimensional', 'space', 'finite', 'differences', 'random', 'directions', 'step', 'approaches', 'need', 'maintain', 'large', 'population', 'size', 'sorting', 'selection', 'reproduction', 'result', 'high', 'computational', 'complexity', 'due', 'excessive', 'applications', 'evolutionary', 'strategy', 'lost', 'attention', 'motivation', 'number', 'objectives', 'increases', 'existing', 'maoeas', 'following', 'challenges', 'number', 'nondominated', 'solutions', 'increases', 'dominance', 'resistance', 'phenomenon', 'solutions', 'selection', 'pressure', 'order', 'obtain', 'set', 'diversified', 'solutions', 'entire', 'maoeas', 'need', 'keep', 'extreme', 'solutions', 'extend', 'boundary', 'shape', 'knowledge', 'difficult', 'identify', 'extreme', 'boundary', 'solutions', 'order', 'approximate', 'high', 'dimensional', 'surface', 'maoeas', 'maintain', 'large', 'population', 'size', 'led', 'expensive', 'computational', 'cost', 'maoeas', 'show', 'high', 'sensitivity', 'shape', 'decomposition', 'approaches', 'sensitive', 'maoeas', 'high', 'quality', 'reference', 'points', 'priori', 'position', 'shape', 'knowledge', 'difficult', 'generate', 'high', 'quality', 'reference', 'solutions', 'given', 'maops', 'inspired', 'vector', 'equilibrium', 'phenomenon', 'magnetic', 'fields', 'isotropic', 'magnetic', 'particles', 'repel', 'preserve', 'uniform', 'distance', 'nearest', 'neighbors', 'extend', 'entire', 'magnetic', 'fields', 'possible', 'article', 'present', 'solving', 'maops', 'called', 'maoes', 'address', 'challenges', 'listed', 'algorithm', 'imitates', 'vector', 'equilibrium', 'phenomenon', 'isotropic', 'magnetic', 'particles', 'apply', 'self', 'adaptive', 'mutation', 'mechanism', 'guide', 'individuals', 'keep', 'uniform', 'distance', 'extension', 'approximate', 'entire', 'maoes', 'obtain', 'converged', 'diversified', 'much', 'population', 'size', 'shown', 'fig', 'seen', 'fig', 'given', 'different', 'population', 'sizes', 'maoes', 'obtain', 'distributed', 'solutions', 'cover', 'entire', 'individual', 'uniform', 'distance', 'nearest', 'neighbor', 'solutions', 'larger', 'number', 'individuals', 'sharper', 'contour', 'resulted', 'approximate', 'iii', 'algorithm', 'section', 'details', 'maoea', 'presented', 'main', 'procedures', 'run', 'fig', 'resulted', 'approximate', 'pfs', 'maoes', 'different', 'population', 'sizes', 'objective', 'fig', 'sbx', 'distributions', 'different', 'parameter', 'gaussian', 'distributions', 'different', 'parameter', 'individual', 'precision', 'controllable', 'mutation', 'operator', 'maximum', 'extension', 'distance', 'strategy', 'precision', 'controllable', 'mutation', 'operator', 'designed', 'exploration', 'exploitation', 'given', 'precision', 'maximum', 'extension', 'distance', 'strategy', 'imitates', 'isotropic', 'magnetic', 'particles', 'magnetic', 'fields', 'guide', 'individuals', 'maintain', 'uniform', 'distance', 'extension', 'approximate', 'entire', 'computational', 'complexity', 'algorithm', 'denotes', 'number', 'objectives', 'population', 'size', 'comparable', 'state', 'art', 'maoea', 'designs', 'precision', 'controllable', 'mutation', 'operator', 'let', 'individuals', 'ith', 'decision', 'variable', 'important', 'exploit', 'local', 'region', 'explore', 'global', 'region', 'traditional', 'mutation', 'operator', 'gaussian', 'perturbation', 'generate', 'mutated', 'candidate', 'solution', 'shown', 'gaussian', 'distribution', 'similar', 'simulated', 'binary', 'crossover', 'sbx', 'generates', 'offspring', 'parent', 'high', 'probability', 'effective', 'local', 'search', 'shown', 'fig', 'addition', 'gaussian', 'probability', 'density', 'function', 'parameter', 'difficult', 'assigned', 'optimal', 'value', 'limited', 'iteration', 'steps', 'larger', 'value', 'higher', 'search', 'precision', 'convergence', 'hand', 'smaller', 'value', 'facilitate', 'quick', 'convergence', 'lower', 'search', 'precision', 'wfg', 'instances', 'decision', 'variables', 'different', 'ranges', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'ieee', 'transactions', 'cybernetics', 'much', 'difficult', 'task', 'assign', 'optimal', 'value', 'decision', 'variables', 'article', 'simple', 'efficient', 'precision', 'controllable', 'mutation', 'operator', 'exploration', 'exploitation', 'shown', 'random', 'equations', 'designed', 'exploitation', 'exploration', 'variable', 'parameters', 'control', 'search', 'precision', 'decision', 'space', 'function', 'random', 'generate', 'number', 'range', 'required', 'search', 'precision', 'parameter', 'set', 'value', 'random', 'number', 'random', 'set', 'corresponding', 'value', 'set', 'value', 'random', 'regarded', 'random', 'coefficient', 'mutation', 'equations', 'generate', 'solutions', 'required', 'minimum', 'precision', 'illustrated', 'example', 'generate', 'mutated', 'solution', 'times', 'test', 'exploitation', 'ability', 'example', 'let', 'original', 'value', 'frequency', 'distribution', 'mutated', 'shown', 'fig', 'given', 'parameter', 'set', 'please', 'note', 'addition', 'operators', 'chosen', 'equal', 'probability', 'frequency', 'distribution', 'generated', 'mutated', 'solutions', 'shown', 'fig', 'fig', 'parameter', 'set', 'random', 'produces', 'generate', 'mutated', 'individual', 'precision', 'uniform', 'frequency', 'fig', 'parameter', 'set', 'random', 'generate', 'uniform', 'mutated', 'solutions', 'original', 'precision', 'equations', 'generate', 'individuals', 'greater', 'times', 'times', 'original', 'considered', 'exploration', 'decision', 'space', 'example', 'let', 'parameter', 'set', 'random', 'generate', 'mutated', 'times', 'frequency', 'distribution', 'shown', 'fig', 'equations', 'generate', 'mutated', 'solutions', 'uniform', 'frequency', 'value', 'mutated', 'become', 'fig', 'frequency', 'distribution', 'mutated', 'different', 'parameter', 'generated', 'solution', 'generated', 'solution', 'fig', 'value', 'distribution', 'mutated', 'addition', 'mutation', 'operators', 'generate', 'small', 'variation', 'original', 'value', 'useful', 'local', 'search', 'hand', 'mutation', 'operators', 'generate', 'greater', 'times', 'times', 'original', 'value', 'useful', 'global', 'search', 'jump', 'local', 'optimal', 'precision', 'controllable', 'mutation', 'given', 'algorithm', 'maximum', 'extension', 'distance', 'strategy', 'maops', 'high', 'dimension', 'priori', 'shape', 'knowledge', 'difficult', 'identify', 'boundary', 'solutions', 'maops', 'fuller', 'discovered', 'full', 'vector', 'magnetic', 'fields', 'called', 'vector', 'equilibrium', 'inspired', 'vector', 'equilibrium', 'phenomenon', 'isotropic', 'magnetic', 'particles', 'repel', 'extend', 'entire', 'magnetic', 'fields', 'possible', 'energy', 'perspective', 'vector', 'equilibrium', 'represents', 'condition', 'isotropic', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'zhang', 'maoea', 'vector', 'equilibrium', 'algorithm', 'precision', 'controllable', 'mutation', 'input', 'output', 'newp', 'ith', 'decision', 'variable', 'newp', 'random', 'random', 'xtemp', 'xtemp', 'xtemp', 'xtemp', 'xtemp', 'xtemp', 'end', 'xtemp', 'feasible', 'xtemp', 'end', 'fig', 'isotropic', 'magnetic', 'particles', 'repel', 'expand', 'boundary', 'initial', 'state', 'repel', 'equilibrium', 'state', 'magnetic', 'particle', 'uniform', 'distance', 'nearest', 'neighbors', 'shown', 'fig', 'algorithm', 'propose', 'maximum', 'extension', 'distance', 'strategy', 'isotropic', 'magnetic', 'particles', 'magnetic', 'fields', 'guide', 'individuals', 'preserve', 'uniform', 'distance', 'extension', 'approximate', 'entire', 'maximum', 'extension', 'distance', 'defined', 'med', 'neardist', 'totaldist', 'neardist', 'min', 'totaldist', 'equation', 'ith', 'individual', 'population', 'generation', 'totaldist', 'summation', 'distance', 'greater', 'value', 'totaldist', 'implies', 'solution', 'individuals', 'neardist', 'minimum', 'greater', 'value', 'neardist', 'implies', 'individual', 'diversity', 'maximum', 'extension', 'distance', 'strategy', 'fig', 'maximum', 'extension', 'distance', 'expand', 'boundary', 'solution', 'fig', 'maximum', 'extension', 'distance', 'keep', 'diversity', 'product', 'neardist', 'totaldist', 'greater', 'maximum', 'extension', 'distance', 'implies', 'individual', 'extended', 'overall', 'boundary', 'individual', 'obtained', 'diversity', 'example', 'maximum', 'extension', 'distance', 'expand', 'boundary', 'solution', 'let', 'individual', 'population', 'anew', 'candidate', 'solution', 'mutation', 'operation', 'shown', 'fig', 'maximum', 'extension', 'distance', 'calculated', 'follows', 'med', 'neardist', 'totaldist', 'neardist', 'totaldist', 'med', 'anew', 'neardist', 'anew', 'totaldist', 'anew', 'neardist', 'anew', 'totaldist', 'anew', 'med', 'anew', 'med', 'compared', 'original', 'solution', 'neardist', 'totaldist', 'anew', 'greater', 'maximum', 'extension', 'distance', 'med', 'anew', 'greater', 'value', 'med', 'individual', 'replaced', 'candidate', 'solution', 'anew', 'anew', 'extends', 'whole', 'population', 'boundary', 'extends', 'individual', 'distance', 'individuals', 'example', 'individual', 'population', 'bnew', 'candidate', 'solution', 'mutation', 'operation', 'shown', 'fig', 'maximum', 'extension', 'distance', 'calculated', 'follow', 'med', 'neardist', 'totaldist', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'ieee', 'transactions', 'cybernetics', 'algorithm', 'maximum', 'extension', 'distance', 'input', 'index', 'mutation', 'individual', 'output', 'maximum', 'extension', 'distance', 'med', 'totaldist', 'neardist', 'continue', 'dist', 'dist', 'dist', 'end', 'totaldist', 'totaldist', 'dist', 'dist', 'neardist', 'neardist', 'dist', 'end', 'med', 'neardist', 'totaldist', 'neardist', 'totaldist', 'med', 'bnew', 'neardist', 'bnew', 'totaldist', 'bnew', 'neardist', 'bnew', 'totaldist', 'bnew', 'med', 'bnew', 'med', 'totaldist', 'bnew', 'greater', 'neardist', 'bnew', 'smaller', 'neardist', 'means', 'closer', 'individuals', 'diversity', 'degenerated', 'maximum', 'extension', 'distance', 'med', 'bnew', 'value', 'med', 'individual', 'replaced', 'candidate', 'solution', 'bnew', 'complexity', 'maximum', 'extension', 'distance', 'strategy', 'given', 'algorithm', 'overall', 'algorithm', 'given', 'population', 'sampled', 'individuals', 'generated', 'generation', 'precision', 'controllable', 'mutation', 'operator', 'individual', 'decision', 'variant', 'let', 'ith', 'original', 'solution', 'population', 'newp', 'mutated', 'solution', 'newp', 'dominate', 'mutated', 'solution', 'replace', 'original', 'newp', 'dominated', 'mutated', 'solution', 'newp', 'nondominated', 'respect', 'algorithm', 'compare', 'numbers', 'solutions', 'population', 'dominate', 'newp', 'let', 'domcount', 'function', 'calculate', 'number', 'solutions', 'dominate', 'computational', 'complexity', 'function', 'value', 'newp', 'become', 'smaller', 'value', 'solutions', 'dominate', 'newp', 'algorithm', 'mutated', 'solution', 'value', 'domcount', 'newp', 'become', 'equal', 'value', 'algorithm', 'continue', 'compare', 'value', 'maximum', 'extension', 'distance', 'value', 'maximum', 'extension', 'distance', 'med', 'newp', 'greater', 'med', 'mutated', 'algorithm', 'maoes', 'algorithm', 'input', 'output', 'initialization', 'maximum', 'generation', 'newp', 'precision', 'controllable', 'mutation', 'objective', 'function', 'calculation', 'newp', 'newp', 'newp', 'newp', 'newp', 'domcount', 'newp', 'domcount', 'newp', 'domcount', 'newp', 'domcount', 'med', 'newp', 'med', 'newp', 'end', 'end', 'end', 'end', 'end', 'solution', 'original', 'replace', 'eliminate', 'solution', 'computational', 'complexity', 'overall', 'algorithm', 'given', 'algorithm', 'experimental', 'results', 'order', 'maoes', 'compare', 'performance', 'state', 'art', 'representatives', 'different', 'categories', 'maoeas', 'including', 'nsga', 'iii', 'moea', 'grea', 'hype', 'rpd', 'nsgaii', 'cma', 'nmpso', 'onebyone', 'comparison', 'algorithms', 'evaluated', 'scalable', 'benchmark', 'instances', 'wfg', 'dtlz', 'maops', 'contain', 'different', 'problem', 'characteristics', 'convex', 'concave', 'disconnected', 'linear', 'degenerated', 'perform', 'independent', 'runs', 'algorithm', 'test', 'instance', 'maximum', 'evaluation', 'set', 'maoes', 'sbx', 'mutation', 'adopted', 'real', 'coded', 'gas', 'fair', 'comparison', 'population', 'size', 'set', 'sbx', 'distribution', 'index', 'set', 'mutation', 'distribution', 'index', 'set', 'crossover', 'probability', 'set', 'mutation', 'probability', 'set', 'denotes', 'number', 'decision', 'variables', 'variable', 'parameters', 'compared', 'algorithms', 'adopted', 'suggested', 'original', 'papers', 'including', 'benchmark', 'instance', 'true', 'solutions', 'true', 'generated', 'evaluate', 'generational', 'distance', 'igd', 'igd', 'indicator', 'measures', 'distance', 'true', 'individual', 'obtained', 'solutions', 'indicator', 'expressed', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'zhang', 'maoea', 'vector', 'equilibrium', 'table', 'average', 'igd', 'values', 'runs', 'dtlz', 'wfg', 'benchmark', 'instances', 'population', 'size', 'best', 'mean', 'instance', 'shown', 'gray', 'euclidean', 'distance', 'ith', 'solution', 'true', 'individual', 'obtained', 'solutions', 'matter', 'fact', 'lower', 'igd', 'value', 'approximate', 'solution', 'set', 'obtained', 'facilitate', 'experiments', 'implemented', 'algorithm', 'object', 'developed', 'user', 'maoes', 'algorithm', 'source', 'code', 'available', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'ieee', 'transactions', 'cybernetics', 'fig', 'experimental', 'results', 'objectives', 'benchmark', 'problems', 'dtlz', 'suite', 'maoes', 'population', 'sizes', 'following', 'com', 'maoea', 'maoes', 'interested', 'readers', 'code', 'performance', 'performance', 'dtlz', 'problems', 'igd', 'values', 'obtained', 'ten', 'competing', 'algorithms', 'given', 'table', 'maoes', 'performs', 'competing', 'maoeas', 'respect', 'considered', 'numbers', 'objectives', 'moea', 'obtains', 'igd', 'value', 'dimension', 'instances', 'maoes', 'shows', 'results', 'instances', 'moea', 'onebyone', 'obtain', 'igd', 'values', 'objective', 'instance', 'objective', 'instance', 'maoes', 'best', 'performance', 'number', 'objectives', 'onebyone', 'outperform', 'maoeas', 'instances', 'maoes', 'wins', 'test', 'instances', 'dtlz', 'benchmark', 'problems', 'clear', 'maoes', 'best', 'optimizer', 'wins', 'instances', 'empirical', 'results', 'test', 'problems', 'find', 'maoes', 'outperforms', 'compared', 'maoeas', 'results', 'demonstrate', 'ability', 'maoes', 'deal', 'maops', 'characterized', 'linear', 'concave', 'degenerated', 'pfs', 'example', 'given', 'dtlz', 'instances', 'nondominated', 'solutions', 'generations', 'seen', 'fig', 'fig', 'shows', 'corresponding', 'parallel', 'coordinates', 'solutions', 'maoes', 'dtlz', 'test', 'instances', 'comparison', 'parallel', 'coordinates', 'true', 'sampled', 'seen', 'fig', 'maoes', 'convergence', 'maoes', 'poor', 'population', 'convergence', 'ten', 'dimension', 'fig', 'individuals', 'obtained', 'convergence', 'distribution', 'ranging', 'please', 'note', 'part', 'used', 'pfs', 'effectiveness', 'maximum', 'fig', 'solution', 'sets', 'obtained', 'maoes', 'true', 'ten', 'objective', 'dtlz', 'test', 'suite', 'parallel', 'coordinates', 'extension', 'distance', 'strategy', 'maoes', 'obtain', 'coverage', 'dtlz', 'test', 'instances', 'ten', 'objectives', 'performance', 'wfg', 'problems', 'seen', 'table', 'maoes', 'igd', 'means', 'values', 'maoeas', 'instances', 'nmpso', 'obtains', 'igd', 'values', 'objective', 'instances', 'maoes', 'shows', 'results', 'remaining', 'instances', 'grea', 'obtains', 'igd', 'values', 'objective', 'instances', 'nmpso', 'best', 'performance', 'objective', 'instances', 'grea', 'obtains', 'igd', 'values', 'objective', 'objective', 'instances', 'maoes', 'shows', 'results', 'instances', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'zhang', 'maoea', 'vector', 'equilibrium', 'fig', 'experimental', 'results', 'objectives', 'benchmark', 'problems', 'wfg', 'suite', 'maoes', 'population', 'sizes', 'wfg', 'problem', 'instances', 'maoes', 'wins', 'instances', 'show', 'ability', 'maoes', 'deal', 'maops', 'characterized', 'mixed', 'convex', 'concave', 'disconnected', 'convex', 'degenerated', 'concave', 'pfs', 'example', 'given', 'objective', 'wfg', 'instances', 'final', 'nondominated', 'solutions', 'generations', 'seen', 'fig', 'fig', 'shows', 'algorithm', 'find', 'diversified', 'solutions', 'mixed', 'convex', 'concave', 'seen', 'fig', 'algorithm', 'obtains', 'proper', 'distribution', 'solutions', 'disconnected', 'convex', 'fig', 'shows', 'maoes', 'obtain', 'quality', 'convergence', 'uniform', 'solutions', 'lie', 'degenerated', 'fig', 'show', 'maoes', 'obtain', 'sets', 'distributed', 'solutions', 'cover', 'whole', 'concave', 'pfs', 'fig', 'shows', 'corresponding', 'parallel', 'coordinates', 'solutions', 'maoes', 'ten', 'objectives', 'wfg', 'test', 'instances', 'comparison', 'parallel', 'coordinates', 'true', 'sampled', 'seen', 'fig', 'maoes', 'convergence', 'wfg', 'test', 'instances', 'addition', 'algorithm', 'obtains', 'uniform', 'coverage', 'objective', 'due', 'effective', 'design', 'maximum', 'extension', 'distance', 'strategy', 'maoes', 'cover', 'region', 'objectives', 'solution', 'distributed', 'second', 'objective', 'ranging', 'fig', 'solution', 'sets', 'obtained', 'maoes', 'true', 'ten', 'objective', 'wfg', 'test', 'suite', 'parallel', 'coordinates', 'fig', 'shows', 'corresponding', 'parallel', 'coordinates', 'solutions', 'state', 'art', 'maoeas', 'pfs', 'ten', 'dimension', 'test', 'instances', 'characterized', 'linear', 'degenerated', 'concave', 'pfs', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'ieee', 'transactions', 'cybernetics', 'fig', 'solution', 'sets', 'obtained', 'maoes', 'grea', 'moea', 'hype', 'true', 'ten', 'objective', 'parallel', 'coordinates', 'seen', 'fig', 'true', 'ranging', 'maoes', 'convergence', 'ranging', 'algorithms', 'show', 'inferior', 'convergence', 'solution', 'set', 'ranging', 'results', 'instance', 'shown', 'fig', 'maoes', 'performs', 'convergence', 'coverage', 'moea', 'hype', 'fail', 'cover', 'region', 'ten', 'objectives', 'grea', 'nsga', 'iii', 'obtain', 'poor', 'diversity', 'objectives', 'fig', 'maoes', 'hype', 'perform', 'convergence', 'coverage', 'maoes', 'obtains', 'uniform', 'distribution', 'ten', 'objectives', 'algorithms', 'show', 'inferior', 'convergence', 'degenerated', 'fig', 'algorithms', 'convergence', 'concave', 'maoes', 'grea', 'nsga', 'iii', 'reach', 'objectives', 'moea', 'hype', 'fail', 'cover', 'region', 'different', 'objectives', 'different', 'objectives', 'moreover', 'solutions', 'maoes', 'grea', 'spread', 'whole', 'range', 'objective', 'moea', 'obtain', 'lines', 'distributed', 'section', 'objectives', 'test', 'instances', 'dtlz', 'wfg', 'benchmark', 'problems', 'clear', 'maoes', 'best', 'optimizer', 'wins', 'instances', 'nmpso', 'wins', 'instances', 'cma', 'wins', 'instances', 'grea', 'wins', 'instances', 'hype', 'wins', 'instances', 'rpd', 'nsgaii', 'wins', 'instances', 'nsga', 'iii', 'empirical', 'results', 'dtlz', 'wfg', 'test', 'problems', 'find', 'maoes', 'outperforms', 'compared', 'maoeas', 'performance', 'different', 'population', 'size', 'maoes', 'need', 'maintain', 'large', 'population', 'size', 'maximum', 'extension', 'distance', 'guide', 'individuals', 'maintain', 'uniform', 'distances', 'nearest', 'neighbors', 'extend', 'entire', 'objective', 'space', 'fact', 'maoes', 'obtain', 'quality', 'converged', 'diversified', 'solutions', 'cover', 'entire', 'true', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'zhang', 'maoea', 'vector', 'equilibrium', 'fig', 'experimental', 'results', 'selected', 'benchmark', 'functions', 'different', 'population', 'sizes', 'maoes', 'various', 'population', 'sizes', 'shown', 'fig', 'conclusion', 'article', 'solving', 'maops', 'algorithm', 'imitates', 'isotropic', 'magnetic', 'particles', 'repel', 'extend', 'entire', 'magnetic', 'fields', 'possible', 'algorithm', 'efficient', 'self', 'adaptive', 'precision', 'controllable', 'mutation', 'operator', 'designed', 'individuals', 'explore', 'exploit', 'decision', 'space', 'addition', 'maximum', 'extension', 'distance', 'strategy', 'designed', 'guide', 'individuals', 'keep', 'uniform', 'distances', 'extension', 'approximate', 'entire', 'maoes', 'obtain', 'converged', 'diversified', 'much', 'population', 'size', 'lower', 'computational', 'complexity', 'larger', 'number', 'individuals', 'sharper', 'contour', 'approximate', 'performance', 'compared', 'different', 'categories', 'state', 'art', 'maoeas', 'including', 'grea', 'nsga', 'iii', 'moea', 'hype', 'rpd', 'nsgaii', 'nmpso', 'onebyone', 'experimental', 'results', 'show', 'maoes', 'provides', 'best', 'igd', 'measure', 'performance', 'algorithm', 'chosen', 'competing', 'maoeas', 'dtlz', 'wfg', 'objectives', 'results', 'demonstrate', 'ability', 'maoes', 'deal', 'problems', 'characterized', 'linear', 'concave', 'mixed', 'convex', 'concave', 'disconnected', 'convex', 'degenerated', 'maops', 'compared', 'existing', 'maoeas', 'algorithm', 'several', 'challenges', 'mutated', 'solution', 'needs', 'compare', 'original', 'individual', 'selection', 'pressure', 'dominance', 'resistance', 'problem', 'algorithm', 'algorithm', 'individuals', 'isotropic', 'magnetic', 'particles', 'repel', 'keep', 'uniform', 'distance', 'nearest', 'neighbors', 'maoes', 'obtain', 'diversified', 'solutions', 'diversity', 'preservation', 'scheme', 'maximum', 'extension', 'distance', 'strategy', 'product', 'neardist', 'totaldist', 'greater', 'maximum', 'extension', 'distance', 'implies', 'individual', 'extended', 'overall', 'boundary', 'individual', 'diversity', 'maoes', 'extend', 'approximate', 'entire', 'identifying', 'boundary', 'extreme', 'solutions', 'overall', 'computational', 'complexity', 'generation', 'maoes', 'equal', 'addition', 'experimental', 'results', 'show', 'maoes', 'needs', 'population', 'size', 'obtain', 'converged', 'diversified', 'larger', 'number', 'individuals', 'sharper', 'contour', 'approximate', 'pfs', 'maoes', 'requires', 'reference', 'points', 'sensitive', 'parameters', 'experimental', 'results', 'show', 'maoes', 'robust', 'deal', 'linear', 'concave', 'mixed', 'convex', 'concave', 'disconnected', 'convex', 'degenerated', 'maops', 'given', 'required', 'search', 'precision', 'precision', 'controllable', 'mutation', 'operator', 'generate', 'mutated', 'solution', 'exploration', 'exploitation', 'precision', 'controllable', 'mutation', 'operator', 'improve', 'efficiency', 'eliminate', 'computational', 'cost', 'references', 'deb', 'fast', 'elitist', 'multiobjective', 'genetic', 'algorithm', 'nsga', 'ieee', 'trans', 'evol_comput', 'vol', 'apr', 'zitzler', 'thiele', 'improving', 'strength', 'pareto', 'evolutionary', 'algorithm', 'proc', 'evol', 'methods', 'design', 'optim', 'control', 'appl', 'problems', 'fleming', 'objective', 'optimization', 'engineering', 'design', 'perspective', 'proc', 'int', 'conf', 'evol', 'multi', 'criterion', 'optim', 'evolutionary', 'algorithms', 'many', 'application', 'air', 'traffic', 'control', 'ieee', 'trans', 'evol_comput', 'vol', 'feb', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'ieee', 'transactions', 'cybernetics', 'performance', 'evolutionary', 'many', 'objective', 'optimization', 'algorithms', 'real', 'world', 'application', 'proc', 'int', 'conf', 'genet', 'evol_comput', 'japan', 'multi', 'objective', 'optimization', 'high', 'dimensional', 'spaces', 'proc', 'int', 'conf', 'evol', 'multi', 'criterion', 'optim', 'japan', 'yang', 'liu', 'grid', 'evolutionary', 'algorithm', 'many', 'objective', 'optimization', 'ieee', 'trans', 'evol_comput', 'vol', 'oct', 'yen', 'zhang', 'pareto', 'optimality', 'many', 'objective', 'evolutionary', 'algorithms', 'ieee', 'trans', 'evol_comput', 'vol', 'apr', 'deb', 'evolutionary', 'many', 'objective', 'optimization', 'algorithm', 'reference', 'point', 'nondominated', 'sorting', 'approach', 'part', 'solving', 'problems', 'box', 'constraints', 'ieee', 'trans', 'evol_comput', 'vol', 'aug', 'deb', 'zhang', 'evolutionary', 'manyobjective', 'optimization', 'algorithm', 'dominance', 'decomposition', 'ieee', 'trans', 'evol_comput', 'vol', 'oct', 'zitzler', 'algorithm', 'fast', 'many', 'objective', 'optimization', 'evol_comput', 'vol', 'ray', 'pareto', 'search', 'evolutionary', 'algorithm', 'dimensionality', 'reduction', 'many', 'objective', 'optimization', 'problems', 'ieee', 'trans', 'evol_comput', 'vol', 'aug', 'chen', 'large', 'scale', 'many', 'objective', 'optimization', 'problems', 'matrix', 'adaptation', 'evolution', 'strategy', 'scalable', 'small', 'subpopulations', 'inf', 'sci', 'vol', 'rechenberg', 'evolution', 'strategy', 'optimizing', 'technical', 'systems', 'principles', 'biological', 'evolution', 'stuttgart', 'germany', 'schwefel', 'numerical', 'optimization', 'computer', 'models', 'evolutionary', 'strategy', 'switzerland', 'verlag', 'zhang', 'context', 'proc', 'congr_evol', 'comput', 'washington', 'usa', 'adaptive', 'search', 'crossover', 'mutation', 'multi', 'function', 'optimization', 'proc', 'ieee', 'int', 'conf', 'syst', 'man', 'cybern', 'usa', 'strategy', 'clustering', 'ieee', 'trans', 'vol', 'mar', 'novel', 'algorithm', 'multimodal', 'function', 'optimization', 'evolution', 'strategy', 'ieee', 'trans', 'vol', 'mar', 'knowles', 'corne', 'pareto', 'archived', 'evolution', 'strategy', 'algorithm', 'pareto', 'multiobjective', 'proc', 'congr_evol', 'comput', 'washington', 'usa', 'fuller', 'vol', 'york', 'usa', 'fuller', 'vol', 'york', 'usa', 'lin', 'swarm', 'optimization', 'fitness', 'estimation', 'many', 'objective', 'optimization', 'problems', 'ieee', 'trans', 'evol_comput', 'vol', 'feb', 'objective', 'optimization', 'differential', 'evolution', 'variable', 'mutation', 'proc', 'conf', 'genet', 'evol_comput', 'liu', 'sun', 'many', 'objective', 'evolutionary', 'algorithm', 'selection', 'strategy', 'ieee', 'trans', 'cybern', 'vol', 'sep', 'sun', 'set', 'genetic', 'algorithm', 'interval', 'many', 'objective', 'optimization', 'problems', 'ieee', 'trans', 'evol_comput', 'vol', 'feb', 'deb', 'domination', 'multi', 'objective', 'evolutionary', 'algorithm', 'quick', 'computation', 'pareto', 'optimal', 'solutions', 'evol_comput', 'vol', 'yang', 'liu', 'density', 'estimation', 'algorithms', 'many', 'objective', 'optimization', 'ieee', 'trans', 'evol_comput', 'vol', 'jun', 'said', 'decomposition', 'nsga', 'many', 'objective', 'optimization', 'ieee', 'trans', 'syst', 'man', 'cybern', 'syst', 'vol', 'jul', 'decomposition', 'many', 'objective', 'algorithms', 'depends', 'pareto', 'front', 'ieee', 'trans', 'evol_comput', 'vol', 'apr', 'zitzler', 'selection', 'multiobjective', 'search', 'proc', 'int', 'conf', 'parallel', 'problem', 'solving', 'deb', 'zhang', 'reduction', 'many', 'objective', 'optimization', 'linear', 'nonlinear', 'algorithms', 'ieee', 'trans', 'evol_comput', 'vol', 'feb', 'mezura', 'montes', 'coello', 'coello', 'simple', 'evolution', 'strategy', 'solve', 'constrained', 'optimization', 'problems', 'proc', 'genet', 'evol_comput', 'conf', 'usa', 'chen', 'strategies', 'scalable', 'alternative', 'learning', 'online', 'available', 'org', 'fleming', 'evolutionary', 'optimization', 'many', 'conflicting', 'objectives', 'ieee', 'trans', 'evol_comput', 'vol', 'dec', 'knowles', 'corne', 'effects', 'objective', 'space', 'dimension', 'evolutionary', 'multiobjective', 'optimization', 'proc', 'int', 'conf', 'evol', 'multi', 'criterion', 'optim', 'japan', 'manyobjective', 'optimization', 'short', 'review', 'proc', 'ieee', 'congr_evol', 'comput', 'cec', 'tang', 'yao', 'objective', 'evolutionary', 'algorithms', 'survey', 'acm', 'comput', 'vol', 'beyer', 'schwefel', 'strategies', 'comprehensive', 'introduction', 'comput', 'vol', 'deb', 'agrawal', 'binary', 'crossover', 'continuous', 'search', 'space', 'complex', 'syst', 'vol', 'scalable', 'multiobjective', 'test', 'problem', 'proc', 'int', 'conf', 'evol', 'multi', 'criterion', 'optim', 'deb', 'thiele', 'zitzler', 'test', 'problems', 'evolutionary', 'multiobjective', 'optimization', 'evolutionary', 'multi', 'objective', 'optimization', 'information', 'knowledge', 'processing', 'springer', 'zhang', 'evolutionary', 'multi', 'objective', 'optimization', 'ieee', 'comput', 'intell', 'vol', 'simulated', 'annealing', 'metaheuristic', 'technique', 'multiple', 'objective', 'combinatorial', 'optimization', 'multi', 'criteria', 'vol', 'zhang', 'received', 'degree', 'system', 'university', 'science', 'technology', 'wuhan', 'china', 'research', 'fellow', 'school', 'electronics', 'engineering', 'computer', 'science', 'university', 'china', 'professor', 'school', 'computer', 'science', 'technology', 'wuhan', 'university', 'science', 'technology', 'wuhan', 'research', 'evolutionary', 'computation', 'decision', 'making', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'article', 'accepted', 'inclusion', 'future', 'issue', 'journal', 'content', 'final', 'presented', 'exception', 'pagination', 'zhang', 'maoea', 'vector', 'equilibrium', 'received', 'degree', 'information', 'wuhan', 'university', 'science', 'technology', 'wuhan', 'china', 'degree', 'school', 'computer', 'science', 'technology', 'research', 'interests', 'include', 'evolutionary', 'computation', 'many', 'objective', 'optimization', 'xie', 'fellow', 'ieee', 'received', 'degree', 'mathematics', 'china', 'normal', 'university', 'wuhan', 'china', 'degree', 'control', 'theory', 'applications', 'china', 'university', 'technology', 'guangzhou', 'china', 'full', 'professor', 'key', 'laboratory', 'intelligent', 'internet', 'manufacturing', 'university', 'technology', 'guangzhou', 'scientific', 'papers', 'journals', 'conference', 'proceedings', 'research', 'interests', 'include', 'networks', 'automatic', 'control', 'blind', 'signal', 'processing', 'xie', 'second', 'china', 'state', 'natural', 'science', 'research', 'blind', 'source', 'gary', 'yen', 'fellow', 'ieee', 'received', 'degree', 'electrical', 'computer', 'engineering', 'university', 'usa', 'structure', 'control', 'air', 'force', 'research', 'laboratory', 'usa', 'state', 'university', 'usa', 'professor', 'school', 'electrical', 'computer', 'engineering', 'research', 'interests', 'include', 'intelligent', 'control', 'computational', 'intelligence', 'signal', 'processing', 'industrial', 'applications', 'yen', 'received', 'best', 'transactions', 'ieee', 'systems', 'man', 'cybernetics', 'society', 'ieee', 'computational', 'intelligence', 'society', 'associate', 'editor', 'ieee', 'control', 'systems', 'ieee', 'transactions', 'control', 'systems', 'technology', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'part', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'part', 'ieee', 'transactions', 'neural', 'networks', 'associate', 'editor', 'ieee', 'transactions', 'evolutionary', 'computation', 'ieee', 'transactions', 'cybernetics', 'general', 'ieee', 'international', 'symposium', 'intelligent', 'control', 'usa', 'ieee', 'world', 'computational', 'intelligence', 'technical', 'ieee', 'computational', 'intelligence', 'society', 'editor', 'ieee', 'computational', 'intelligence', 'fellow']"
7,3,1,"4 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 Differential Evolution: A Survey of the State-of-the-Art Swagatam Das, Member, IEEE, and Ponnuthurai Nagaratnam Suganthan, Senior Member, IEEE Abstract.Differential evolution (DE) is arguably one of the most powerful stochastic real-parameter optimization algorithms in current use. DE operates through similar computational steps as employed by a standard evolutionary algorithm (EA). However, unlike traditional EAs, the DE-variants perturb the currentgeneration population members with the scaled differences of randomly selected and distinct population members. Therefore, no separate probability distribution has to be used for generating the offspring. Since its inception in 1995, DE has drawn the attention of many researchers all over the world resulting in a lot of variants of the basic algorithm with improved performance. This paper presents a detailed review of the basic concepts of DE and a survey of its major variants, its application to multiobjective, constrained, large scale, and uncertain optimization problems, and the theoretical studies conducted on DE so far. Also, it provides an overview of the significant engineering applications that have benefited from the powerful nature of DE. Index Terms.Derivative-free optimization, differential evolution (DE), direct search, evolutionary algorithms (EAs), genetic algorithms (GAs), metaheuristics, particle swarm optimization (PSO). I. Introduction TO TACKLE complex computational problems, researchers have been looking into nature for years.both as model and as metaphor.for inspiration. Optimization is at the heart of many natural processes like Darwinian evolution itself. Through millions of years, every species had to adapt their physical structures to fit to the environments they were in. A keen observation of the underlying relation between optimization and biological evolution led to the development of an important paradigm of computational intelligence.the evolutionary computing techniques [S1].[S4] for performing very complex search and optimization. Evolutionary computation uses iterative progress, such as growth or development in a population. This population is then selected in a guided random search using parallel processing to achieve the desired end. The paradigm of evolutionary computing techniques dates back to early 1950s, when the idea Manuscript received September 17, 2009; revised March 9, 2010 and June 10, 2010; accepted June 12, 2010. Date of publication October 14, 2010; date of current version February 25, 2011. This work was supported by the Agency for Science, Technology, and Research, Singapore (A.Star), under Grant #052 101 0020. S. Das is with the Department of Electronics and Telecommunication Engineering, Jadavpur University, Kolkata 700 032, India (e-mail: swagatamdas19@ yahoo.co.in). P. N. Suganthan is with the School of Electrical and Electronic Engineering, Nanyang Technological University, 639798, Singapore (e-mail: epnsugan@ntu.edu.sg). Color versions of one or more of the figures in this paper are available online at http://ieeexplore.ieee.org. Digital Object Identifier 10.1109/TEVC.2010.2059031 to use Darwinian principles for automated problem solving originated. It was not until the sixties that three distinct interpretations of this idea started to be developed in three different places. Evolutionary programming (EP) was introduced by Lawrence J. Fogel in the USA [S5],1 while almost simultaneously. I. Rechenberg and H.-P. Schwefel introduced evolution strategies (ESs) [S6], [S7] in Germany. Almost a decade later, John Henry Holland from University of Michigan at Ann Arbor, devised an independent method of simulating the Darwinian evolution to solve practical optimization problems and called it the genetic algorithm (GA) [S8]. These areas developed separately for about 15 years. From the early 1990s on they are unified as different representatives (¡°dialects¡±) of one technology, called evolutionary computing. Also since the early nineties, a fourth stream following the same general ideas started to emerge.genetic programming (GP) [S9]. Nowadays, the field of nature-inspired metaheuristics is mostly constituted by the evolutionary algorithms [comprising of GAs, EP, ESs, GP, differential evolution (DE), and so on] as well as the swarm intelligence algorithms [e.g., ant colony optimization (ACO), particle swarm optimization (PSO), Bees algorithm, bacterial foraging optimization (BFO), and so on [S10].[S12]]. Also the field extends in a broader sense to include self-organizing systems [S13], artificial life (digital organism) [S14], memetic and cultural algorithms [S15], harmony search [S16], artificial immune systems [S17], and learnable evolution model [S18]. The DE [72], [73], [88].[90] algorithm emerged as a very competitive form of evolutionary computing more than a decade ago. The first written article on DE appeared as a technical report by R. Storn and K. V. Price in 1995 [88]. One year later, the success of DE was demonstrated at the First International Contest on Evolutionary Optimization in May 1996, which was held in conjunction with the 1996 IEEE International Conference on Evolutionary Computation (CEC) [89]. DE finished third at the First International Contest on Evolutionary Optimization (1st ICEO), which was held in Nagoya, Japan. DE turned out to be the best evolutionary algorithm for solving the real-valued test function suite of the 1st ICEO (the first two places were given to non-evolutionary algorithms, which are not universally applicable but solved the test-problems faster than DE). Price presented DE at the Second International Contest on Evolutionary Optimization in 1Due to space limitation the supplementary reference list cited as [Sxxx] will not be published in print, but as an on-line document only. 1089-778X/$26.00 c 2010 IEEE DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 5 1997 [72] and it turned out as one of the best among the competing algorithms. Two journal articles [73], [92] describing the algorithm in sufficient details followed immediately in quick succession. In 2005 CEC competition on real parameter optimization, on 10-D problems classical DE secured 2nd rank and a self-adaptive DE variant called SaDE [S201] secured third rank although they performed poorly over 30-D problems. Although a powerful variant of ES, known as restart covariance matrix adaptation ES (CMA-ES) [S232, S233], yielded better results than classical and self-adaptive DE, later on many improved DE variants [like improved SaDE [76], jDE [10], opposition-based DE (ODE) [82], DE with global and local neighborhoods (DEGL) [21], JADE [118], and so on that will be discussed in subsequent sections] were proposed in the period 2006.2009. Hence, another rigorous comparison is needed to determine how well these variants might compete against the restart CMA-ES and many other real parameter optimizers over the standard numerical benchmarks. It is also interesting to note that the variants of DE continued to secure front ranks in the subsequent CEC competitions [S202] like CEC 2006 competition on constrained real parameter optimization (first rank), CEC 2007 competition on multiobjective optimization (second rank), CEC 2008 competition on large scale global optimization (third rank), CEC 2009 competition on multiobjective optimization (first rank was taken by a DE-based algorithm MOEA/D for unconstrained problems), and CEC 2009 competition on evolutionary computation in dynamic and uncertain environments (first rank). We can also observe that no other single search paradigm such as PSO was able to secure competitive rankings in all CEC competitions. A detailed discussion on these DE-variants for optimization in complex environments will be provided in Section V. In DE community, the individual trial solutions (which constitute a population) are called parameter vectors or genomes. DE operates through the same computational steps as employed by a standard EA. However, unlike traditional EAs, DE employs difference of the parameter vectors to explore the objective function landscape. In this respect, it owes a lot to its two ancestors namely.the Nelder-Mead algorithm [S19], and the controlled random search (CRS) algorithm [S20], which also relied heavily on the difference vectors to perturb the current trial solutions. Since late 1990s, DE started to find several significant applications to the optimization problems arising from diverse domains of science and engineering. Below, we point out some of the reasons why the researchers have been looking at DE as an attractive optimization tool and as we shall proceed through this survey, these reasons will become more obvious. 1) Compared to most other EAs, DE is much more simple and straightforward to implement. Main body of the algorithm takes four to five lines to code in any programming language. Simplicity to code is important for practitioners from other fields, since they may not be experts in programming and are looking for an algorithm that can be simply implemented and tuned to solve their domain-specific problems. Note that although PSO is also very easy to code, the performance of DE and its variants is largely better than the PSO variants over a wide variety of problems as has been indicated by studies like [21], [82], [104] and the CEC competition series [S202]. 2) As indicated by the recent studies on DE [21], [82], [118] despite its simplicity, DE exhibits much better performance in comparison with several others like G3 with PCX, MA-S2, ALEP, CPSO-H, and so on of current interest on a wide variety of problems including unimodal, multimodal, separable, non-separable and so on. Although some very strong EAs like the restart CMAES was able to beat DE at CEC 2005 competition, on non-separable objective functions, the gross performance of DE in terms of accuracy, convergence speed, and robustness still makes it attractive for applications to various real-world optimization problems, where finding an approximate solution in reasonable amount of computational time is much weighted. 3) The number of control parameters in DE is very few (Cr, F, and NP in classical DE). The effects of these parameters on the performance of the algorithm are wellstudied. As will be discussed in the next section, simple adaptation rules for F and Cr have been devised to improve the performance of the algorithm to a large extent without imposing any serious computational burden [10], [76], [118]. 4) The space complexity of DE is low as compared to some of the most competitive real parameter optimizers like CMA-ES [S232]. This feature helps in extending DE for handling large scale and expensive optimization problems. Although CMA-ES remains very competitive over problems up to 100 variables, it is difficult to extend it to higher dimensional problems due to its storage, update, and inversion operations over square matrices with size the same as the number of variables. Perhaps these issues triggered the popularity of DE among researchers all around the globe within a short span of time as is evident from the bibliography of DE [37] from 1997 to 2002. Consequently, over the past decade research on and with DE has become huge and multifaceted. Although there exists a few significant survey papers on EAs and swarm intelligence algorithms (e.g., [S21].[S25]), to the best of our knowledge no extensive review article capturing the entire horizon of the current DE-research has so far been published. In a recently published article [60], Neri and Tirronen reviewed a number of DE-variants for single-objective optimization problems and also made an experimental comparison of these variants on a set of numerical benchmarks. However, the article did not address issues like adapting DE to complex optimization environments involving multiple and constrained objective functions, noise and uncertainty in the fitness landscape, very large number of search variables, and so on. Also it did not focus on the most recent engineering applications of DE and the developments in the theoretical analysis of DE. This paper attempts to provide a comprehensive survey of the DE algorithm. its basic concepts, different structures, and variants for 6 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 Fig. 1. Main stages of the DE algorithm. solving constrained, multiobjective, dynamic, and large-scale optimization problems as well as applications of DE variants to practical optimization problems. The rest of this paper is arranged as follows. In Section II, the basic concepts related to classical DE are explained along with the original formulation of the algorithm in the real number space. Section III discusses the parameter adaptation and control schemes for DE. Section IV provides an overview of several prominent variants of the DE algorithm. Section V provides an extensive survey on the applications of DE to the discrete, constrained, multiobjective, and dynamic optimization problems. The theoretical analysis of DE has been reviewed in Section VI. Section VII provides an overview of the most significant engineering applications of DE. The drawbacks of DE are pointed out in Section VIII. Section IX highlights a number of future research issues related to DE. Finally, the paper is concluded in Section X. II. Differential Evolutions: Basic Concepts and Formulation in Continuous Real Space Scientists and engineers from all disciplines often have to deal with the classical problem of search and optimization. Optimization means the action of finding the best-suited solution of a problem within the given constraints and flexibilities. While optimizing performance of a system, we aim at finding out such a set of values of the system parameters for which the overall performance of the system will be the best under some given conditions. Usually, the parameters governing the system performance are represented in a vector like X = [x1, x2, x3, ..., xD]T . For real parameter optimization, as the name implies, each parameter xi is a real number. To measure how far the ¡°best¡± performance we have achieved, an objective function (or fitness function) is designed for the system. The task of optimization is basically a search for such the parameter vector X., which minimizes such an objective function f (X)(f :  ¡ö D ¡æ ), i.e., f (X.) < f(X) for all X ¡ô , where  is a non-empty large finite set serving as the domain of the search. For unconstrained optimization problems  = D. Since max f (X) = .min .f (X), the restriction to minimization is without loss of generality. In general, the optimization task is complicated by the existence of non-linear objective functions with multiple local minima. A local minimum f = f (X) may be defined as ¢¤¥å > 0 ¢£X ¡ô  :  X . X < ¥å ¢¡ f ¡Â f (X), where . indicates any p-norm distance measure. DE is a simple real parameter optimization algorithm. It works through a simple cycle of stages, presented in Fig. 1. We explain each stage separately in Sections II-A.II-D. A. Initialization of the Parameter Vectors DE searches for a global optimum point in a D-dimensional real parameter space D. It begins with a randomly initiated population of NP D dimensional real-valued parameter vectors. Each vector, also known as genome/chromosome, forms a candidate solution to the multidimensional optimization problem. We shall denote subsequent generations in DE by G = 0, 1...,Gmax. Since the parameter vectors are likely to be changed over different generations, we may adopt the following notation for representing the ith vector of the population at the current generation: X i,G = [x1,i,G, x2,i,G, x3,i,G, ....., xD,i,G]. (1) For each parameter of the problem, there may be a certain range within which the value of the parameter should be restricted, often because parameters are related to physical components or measures that have natural bounds (for example if one parameter is a length or mass, it cannot be negative). The initial population (at G = 0) should cover this range as much as possible by uniformly randomizing individuals within the search space constrained by the prescribed minimum and maximum bounds: Xmin = {x1,min, x2,min, ..., xD,min } and X max = {x1,max, x2,max, ..., xD,max }. Hence we may initialize the jth component of the ith vector as xj,i,0 = xj,min + randi,j[0, 1] ¡¤ (xj,max . xj,min) (2) where randi,j[0, 1] is a uniformly distributed random number lying between 0 and 1 (actually 0 ¡Â randi,j[0, 1] ¡Â 1) and is instantiated independently for each component of the i-th vector. B. Mutation with Difference Vectors Biologically, ¡°mutation¡± means a sudden change in the gene characteristics of a chromosome. In the context of the evolutionary computing paradigm, however, mutation is also seen as a change or perturbation with a random element. In DE-literature, a parent vector from the current generation is called target vector, a mutant vector obtained through the differential mutation operation is known as donor vector and finally an offspring formed by recombining the donor with the target vector is called trial vector. In one of the simplest forms of DE-mutation, to create the donor vector for each ith target vector from the current population, three other distinct parameter vectors, say Xri1 , Xri2 , and Xri3 are sampled randomly from the current population. The indices ri1 , ri2 , and ri3 are mutually exclusive integers randomly chosen from the range [1, NP], which are also different from the base vector index i. These indices are randomly generated once for each mutant vector. Now the difference of any two of these three vectors is scaled by a scalar number F (that typically lies in the interval [0.4, 1]) and the scaled difference is added to the third one whence we obtain the donor vector Vi,G. We can express the process as V i,G = Xri1 ,G + F ¡¤ (Xri2 ,G . Xri3 ,G). (3) The process is illustrated on a 2-D parameter space (showing constant cost contours of an arbitrary objective function) in Fig. 2. DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 7 Fig. 2. Illustrating a simple DE mutation scheme in 2-D parametric space. C. Crossover To enhance the potential diversity of the population, a crossover operation comes into play after generating the donor vector through mutation. The donor vector exchanges its components with the target vector Xi,G under this operation to form the trial vector Ui,G = [u1,i,G, u2,i,G, u3,i,G, ..., uD,i,G]. The DE family of algorithms can use two kinds of crossover methods.exponential (or two-point modulo) and binomial (or uniform) [74]. In exponential crossover, we first choose an integer n randomly among the numbers [1,D]. This integer acts as a starting point in the target vector, from where the crossover or exchange of components with the donor vector starts. We also choose another integer L from the interval [1,D]. L denotes the number of components the donor vector actually contributes to the target vector. After choosing n and L the trial vector is obtained as uj,i,G = vj,i,G for j =... according to the following pseudo-code: L = 0; DO { L = L + 1; } WHILE ((rand(0, 1) ¡Â Cr) AND (L ¡Â D)). ¡°Cr¡± is called the crossover rate and appears as a control parameter of DE just like F. Hence in effect, probability (L = ¥ô) = (Cr)¥ô . 1 for any positive integer v lying in the interval [1, D]. For each donor vector, a new set of n and L must be chosen randomly as shown above. On the other hand, binomial crossover is performed on each of the D variables whenever a randomly generated number between 0 and 1 is less than or equal to the Cr value. In this case, the number of parameters inherited from the donor has a (nearly) binomial distribution. The scheme may be outlined as uj,i,G =  vj,i,G if (randi,j[0, 1] ¡Â Cr or j = jrand ) xj,i,G otherwise (5) Fig. 3. Different possible trial vectors formed due to uniform/binomial crossover between the target and the mutant vectors in 2-D search space. where, as before, randi,j[0, 1] is a uniformly distributed random number, which is called anew for each jth component of the ith parameter vector. jrand ¡ô [1, 2, ....,D] is a randomly chosen index, which ensures that Ui,G gets at least one component from Vi,G. It is instantiated once for each vector per generation. We note that for this additional demand, Cr is only approximating the true probability pCr of the event that a component of the trial vector will be inherited from the donor. Also, one may observe that in a 2-D search space, three possible trial vectors may result from uniformly crossing a mutant/donor vector Vi,G with the target vector Xi,G. These trial vectors are as follows. 1) Ui,G = Vi,G such that both the components of Ui,G are inherited from Vi,G. 2) U / i,G, in which the first component (j = 1) comes from V i,G and the second one (j = 2) from Xi,G. 3) U // i,G, in which the first component (j = 1) comes from X i,G and the second one (j = 2) from Vi,G. The possible trial vectors due to uniform crossover are illustrated in Fig. 3. D. Selection To keep the population size constant over subsequent generations, the next step of the algorithm calls for selection to determine whether the target or the trial vector survives to the next generation, i.e., at G = G + 1. The selection operation is described as X i,G+1 = Ui,G iff (Ui,G) ¡Â f (Xi,G) = Xi,G iff (Ui,G) > f(Xi,G) (6) where f (X) is the objective function to be minimized. Therefore, if the new trial vector yields an equal or lower value of the objective function, it replaces the corresponding target vector in the next generation; otherwise the target is retained in the population. Hence, the population either gets better (with respect to the minimization of the objective function) or remains the same in fitness status, but never deteriorates. Note that in (6) the target vector is replaced by the trial vector even if both yields the same value of the objective function.a feature that enables DE-vectors to move over 8 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 Algorithm 1 Pseudo-code for the DE Algorithm with Binomial Crossover Step 1: Read values of the control parameters of DE: scale factor F, crossover rate Cr, and the population size NP from user. Step 2: Set the generation number G = 0 and randomly initialize a population of NP individuals PG = {X1,G, ......, XNP,G} with X i,G = [x1,i,G, x2,i,G, x3,i,G, ....., xD,i,G] and each individual uniformly distributed in the range [Xmin, Xmax], where Xmin = {x1,min, x2,min, ..., xD,min } and X max = {x1,max, x2,max, ..., xD,max } with i = [1, 2, ....,NP]. Step 3. WHILE the stopping criterion is not satisfied DO FOR i = 1 to NP //do for each individual sequentially Step 2.1 Mutation Step Generate a donor vector Vi,G = {v1,i,G, ......., } {vD,i,G} corresponding to the ith target vector X i,G via the differential mutation scheme of DE as: V i,G = Xri1 ,G + F ¡¤ (Xri2 ,G . Xri3 ,G). Step 2.2 Crossover Step Generate a trial vector Ui,G = {u1,i,G, ......., uD,i,G } for the ith target vector Xi,G through binomial crossover in the following way: uj,i,G = vj,i,G, if (randi,j[0, 1] ¡Â Cr or j = jrand ) xj,i,G, otherwise, Step 2.3 Selection Step Evaluate the trial vector Ui,G IF f (Ui,G) ¡Â f (Xi,G), THEN Xi,G+1 = Ui,G ELSE Xi,G+1 = Xi,G. END IF END FOR Step 2.4 Increase the Generation Count G = G + 1 END WHILE flat fitness landscapes with generations. Note that throughout this paper, we shall use the terms objective function value and fitness interchangeably. But, always for minimization problems, a lower objective function value will correspond to higher fitness. E. Summary of DE Iteration An iteration of the classical DE algorithm consists of the four basic steps.initialization of a population of search variable vectors, mutation, crossover or recombination, and finally selection. After having illustrated these stages, we now formally present the whole of the algorithm in a pseudo-code below. The terminating condition can be defined in a few ways like: 1) by a fixed number of iterations Gmax, with a suitably large value of Gmax depending upon the complexity of the objective function; 2) when best fitness of the population does not change appreciably over successive iterations; and alternatively 3) attaining a pre-specified objective function value. F. DE Family of Storn and Price Actually it is the process of mutation that demarcates one DE scheme from another. In the previous section, we have illustrated the basic steps of a simple DE. The mutation scheme in (3) uses a randomly selected vector Xr1 and only one weighted difference vector F ¡¤ (Xr2 . Xr3) to perturb it. Hence, in literature, the particular mutation scheme given by (3) is referred to as DE/rand/1. When used in conjunction with binomial crossover, the procedure is called DE/rand/1/bin. We can now have an idea of how the different DE schemes are named. The general convention used above is DE/x/y/z, where DE stands for ¡°differential evolution,¡± x represents a string denoting the base vector to be perturbed, y is the number of difference vectors considered for perturbation of x, and z stands for the type of crossover being used (exp: exponential; bin: binomial). The other four different mutation schemes, suggested by Storn and Price [74], [75] are summarized as ¡°DE/best/1 : Vi,G = Xbest,G + F ¡¤ (Xri1 ,G . Xri2 ,G) (7) ¡°DE/target . to . best/1 : Vi,G = Xi,G +F ¡¤ (Xbest,G . Xi,G) + F ¡¤ (Xri1 ,G .  Xri2 ,G) (8) ¡°DE/best/2 : Vi,G = Xbest,G + F ¡¤ (Xri1 ,G . Xri2 ,G) +F ¡¤ (Xri3 ,G . Xri4 ,G) (9) ¡°DE/rand/2 : Vi,G = Xri1 ,G + F ¡¤ (Xri2 ,G . Xri3 ,G) +F ¡¤ (Xri4 ,G . Xri5 ,G). (10) The indices ri1 , ri2 , ri3 , ri4 , and ri5 are mutually exclusive integers randomly chosen from the range [1, NP], and all are different from the base index i. These indices are randomly generated once for each donor vector. The scaling factor F is a positive control parameter for scaling the difference vectors. X best,G is the best individual vector with the best fitness (i.e., lowest objective function value for a minimization problem) in the population at generation G. Note that some of the strategies for creating the donor vector may be mutated recombinants, for example, (8) listed above basically mutates a two-vector recombinant Xi,G + F ¡¤ (Xbest,G . Xi,G). Storn and Price [74], [92] suggested a total of ten different working strategies for DE and some guidelines in applying these strategies to any given problem. These strategies were derived from the five different DE mutation schemes outlined above. Each mutation strategy was combined with either the ¡°exponential¡± type crossover or the ¡°binomial¡± type crossover. This yielded a total of 5¡¿2 = 10 DE strategies. In fact many other linear vector combinations can be used for mutation. In general, no single mutation method [among those described in (3), (7).(10)] has turned out to be best for all problems. DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 9 Nevertheless the various mutation schemes need further investigation to determine under which circumstances they perform well and on what kind of problems they yield poor results. Some initial work in this direction was undertaken by Mezura- Montes et al., who empirically compared eight different DEschemes over a test-suite of 13 benchmark problems in [56]. The authors took into account an interesting mutation scheme known as DE/rand/2/dir [26] that incorporates the objective function information to guide the direction of the donor vectors in the following way: V i,G = Xr1,G + F 2 ¡¤ (Xr1,G . Xr2,G . Xr3,G) (11) where Xr1,G, Xr2,G, and Xr3,G are distinct population members such that f (Xr1,G) ¡Â f (Xr2,G), f(Xr3,G). The experiments performed by Mezura-Montes et al. indicate that DE/best/1/bin (using always the best solution to find search directions and also binomial crossover) remained the most competitive scheme, regardless the characteristics of the problem to be solved, based on final accuracy and robustness of results. The authors in [56] also mention that over unimodal and separable functions, DE/rand/2/dir achieved considerably good results. For unimodal and non-separable functions, DE/best/1/bin consistently yielded best performance. This variant was also successful in optimizing the multimodal and separable benchmarks. DE/rand/1/bin and DE/rand/2/dir provided performances of similar quality on this class of functions. However, on multimodal and non-separable functions DE/rand/2/dir remained most competitive and slightly faster to converge to the global optimum. G. DE and the Contemporary EAs: Conceptual Similarities and Differences In this section, we briefly discuss how DE relates to and differs from the contemporary EAs for real parameter optimization. Following the convention of ES, we shall use ¥ì to indicate the number of parent vectors and ¥ë (¡Ã ¥ì) to denote the size of the child population. 1) Mutation: In the context of GAs and EAs, mutation is treated as a random change of some parameter. Real valued EAs typically simulate the effects of mutation with additive increments that are randomly generated by a predefined and fixed probability density function (PDF). DE differs markedly from algorithms like ES and EP in consideration of the fact that it mutates the base vectors (secondary parents) with scaled population-derived difference vectors. As generations pass, these differences tend to adapt to the natural scaling of the problem. For example, if the population becomes compact in one variable but remains widely dispersed in another, the difference vectors sampled from it will be small in the former variable, yet large in the latter. This automatic adaptation significantly improves the convergence of the algorithm. In other words, ES and EP require the specification or adaptation of absolute step size for each variable over generations while DE requires only the specification of a single relative scale factor F for all variables. Although the difference vector based mutation is believed to be one of the main strength of DE [73], [92], the idea of using difference of population members in recombination of EAs is not completely new. Eshelman and Schaffer [S187] came up with an idea of a difference-based recombination operator [called blend crossover operator (BLX)] for real coded GAs, long back in 1992. Voigt et al. [S188] used a selection differential defined as the difference between the mean fitness of the selected parents and the mean fitness of the population to derive a design criteria for recombination operators and used it with the fuzzy recombination (FR). In 1995, Deb and Agrawal [S189] proposed a simulated binary crossover (SBX) that works with two parent solutions and creates two offspring solutions to simulate the working principle of the single-point crossover operator on binary strings. In SBX, the probability distribution used to create offspring depends on a spread factor that is defined as ratio of the absolute difference in children values to that of the parent values. Both BLX and SBX were analyzed in detail by Deb and Beyer in [8] and [24]. In Kita et al.¡¯s uniform normal distribution crossover (UNDX) [S190] and simplex crossover (SPX) [S191], operators generate ¥ì.1 direction vectors for ¥ì . 1 randomly chosen parents by taking the difference of each parent vector from their mean vector. Using the direction vectors, in UNDX the probability of creating the offspring away from the mean vector is reduced and a maximum probability is assigned at the mean vector. SPX assigns a uniform probability for creating any offspring within a restricted region (called the simplex). In Deb et al.¡¯s parent centric crossover (PCX) operator [S192] for each offspring one parent is chosen randomly and a difference vector is calculated between the parent and the mean of the chosen ¥ì parents. However, the use of scaled difference of any two distinct population members to perturb a third one, as done in DE, finds closest resemblance with the reflection operation of Nelder-Mead polyhedron search [S19] and Price¡¯s CRS algorithm [S20]. Although due to space limitations, it is not possible to discuss these two algorithms in sufficient details, for interested readers we would like to point out that unlike DE, the Nelder-Mead algorithm restricts the number of sample vectors (from which the difference vector is to be generated) to D + 1 (D corresponding to the dimensionality of the search space). This limitation becomes a drawback for complicated objective functions that require many more points to form a clear model of the surface topography. Also both Nelder-Mead¡¯s and CRS¡¯s reflection operations with difference vectors are a form of arithmetic recombination, while DE¡¯s difference vector based perturbation schemes more closely resemble a mutation operation [74, p. 29]. One of the most fundamental aspects of DE-type mutation is the fact that vector perturbations are generated from the NP ¡¤ (NP . 1) nonzero difference vectors of the population rather than employing a predetermined PDF. This leads to one of the main assets of DE: contour matching, a term coined and explained by Price et al. in [74]. Contour matching refers to the phenomena of adaptation of the vector population such that promising regions of the fitness landscape are investigated automatically once they are detected. One of the biggest advantages that the difference vectors afford is that both a mutation step¡¯s size and its orientation are automatically adapted to the objective function landscape. Price et al. claim that contour matching 10 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 Fig. 4. Empirical distributions of candidate trial vectors for three different Cr values. (a) Cr = 0. (b) Cr = 0.5. (c) Cr = 1.0. also induces an important ingredient besides selection is the promotion of basin-to-basin transfer, where search points may move from one basin of attraction, i.e., a local minimum, to another one. In PSO also the stochastic attraction toward the personal best and neighborhood best positions are modeled by scaled difference vectors. The velocity update formula of PSO has similarities with the DE/target-to-best/1 scheme [see (8)] that generates a mutated recombinant. 2) Crossover: Both DE and ES employ crossover to create a single trial vector, while most GAs recombine two vectors to produce two trial vectors often by one-point crossover. Note that EP depends only on mutation to generate offspring and does not have any crossover operator associated with. One of the popular crossover techniques for real coded GAs is the n-point crossover where the offspring vector is randomly partitioned into (n + 1) blocks such that parameters in adjacent partitions are inherited from different parent vectors. Studies of n-point crossover [S193] indicate that an even number of crossover points reduces the representational bias (dependence of ordering of parameters within a vector) at the cost of increasing the disruption of parameters that are closely grouped. As analyzed by Price et al. [92, p. 93] DE¡¯s exponential crossover employs both one and two point crossover with an objective of reducing their individual biases. The representational bias inherent in n-point crossover can be eliminated if donors are determined by D independent random trials. This procedure is known as uniform crossover in EA literature [S3] and this is exactly what DE employs as discrete recombination or binomial crossover [see (5)] most often. 3) Selection: Selection can be applied to an evolutionary process in primarily two different stages.first stage being parent selection to decide which vectors from the current population will undergo recombination while the second is survivor selection to choose which vectors from the parent and offspring populations will survive to the next generation. Unlike GAs that select parents based on their fitness, both ES and DE gives all the individuals equal chance for being selected as parents. In ES, each individual has the same chance to be selected for mutation (and recombination). In DE also the base vectors are randomly picked up without any regard for their fitness values. When only the offspring vectors are allowed to advance (as done in some simple GAs [S3]) there is no guarantee that the best-so-far solution will not be lost. Retaining the best-so-far solution is called elitism and it plays an important role in bringing the convergence of the algorithm to the global optimum [S193] in long time limits. For this reason and because of the speed improvement it offers, most EAs including DE, EP, and some versions of ES take into account the current population while determining the membership of the next generation. The (¥ì, ¥ë) ES selects best ¥ì children to become parents in next generation. Alternatively, the (¥ì + ¥ë) ES populates the next generation with best ¥ì vectors from the combined parent and child populations. The survivor selection scheme of DE is closer in spirit to the elitist (¥ì + ¥ë) ES, however, instead of ranking the combined population, the former employs a oneto- one competition where each parent vector competes once only against its own offspring. Evidently, unlike the tournament selection in EP, DE¡¯s one-to-one selection holds only NP knock-out competitions between a parent and its offspring generated through mutation and recombination. Comparing each trial vector (offspring) to the best performing vectors at the same index ensures that DE retains the very bestso- far solution at each index. Parent-offspring competition has a superior ability to maintain population diversity when compared with ranking or tournament selection where elites and their offspring may dominate the population rapidly. III. Control Parameters of the Differential Evolution There are three main control parameters of the DE algorithm: the mutation scale factor F, the crossover constant Cr, and the population size NP. In this section, we focus on the effect of each of these parameters on the performance of DE as well as the state-of-the-art methods for tuning these parameters. A good volume of research work has been undertaken so far to improve the ultimate performance of DE by tuning its control parameters. Storn and Price in [88] have indicated that a reasonable value for NP could be chosen between 5-D and 10-D (D being the dimensionality of the problem), and a good initial choice of F was 0.5. The effective range of F is usually between 0.4 and 1. The parameter Cr controls how many parameters in expectation are changed in a population member. For low value DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 11 of Cr, a small number of parameters are changed in each generation and the stepwise movement tends to be orthogonal to the current coordinate axes. On the other hand, high values of Cr (near 1) cause most of the directions of the mutant vector to be inherited prohibiting the generation of axis orthogonal steps. This effect has been illustrated in Fig. 4 by showing for three values of Cr, an empirical distribution of candidate trial vectors obtained by running DE on a single starting population of ten vectors for 200 generations with selection disabled. It is interesting to note at this point that for algorithms like classic DE (DE/rand/1/bin) performance is rotationally invariant only when Cr = 1. At that setting, crossover is a vector-level operation that makes the trial vector a pure mutant, i.e., Ui,G = Xri1 ,G+F¡¤(Xri2 ,G .Xri3 ,G). The location (with respect to the function¡¯s topography) of mutant trial vectors will not change under coordinate rotation as long as Cr = 1 and F is a constant, or sampled from a distribution no more than once per trial vector. A low Cr value (e.g., 0 or 0.1) results in a search that changes each direction (or a small subset of directions) separately. This is an effective strategy for functions that are separable or decomposable [i.e., f (X) = D i=1 fi(xi)] Gamperle et al. [S26] evaluated different parameter settings for DE on the Sphere, Rosenbrock¡¯s, and Rastrigin¡¯s functions. Their experimental results revealed that the global optimum searching capability and the convergence speed are very sensitive to the choice of control parameters NP, F, and Cr. Furthermore, a plausible choice of the population size NP is between 3-D and 8-D, the scaling factor F = 0.6, and the crossover rate Cr is between [0.3, 0.9]. Recently, the authors in [85] state that typically 0.4 < F < 0.95 with F = 0.9 can serve as a good first choice. They also opine that Cr should lie in (0, 0.2) when the function is separable, while in (0.9, 1) when the function¡¯s parameters are dependent. As can be perceived from the literature, several claims and counter-claims were reported concerning the rules for choosing the control parameters and these can potentially confuse engineers, who may try to solve practical problems with DE. Further, most of these claims lack sufficient experimental justifications. Some objective functions are very sensitive to the proper choice of the parameter settings in DE [S27]. Therefore, researchers naturally started to consider some techniques such as self-adaptation to automatically find an optimal set of control parameters for DE [S28], [3], [10], [48], [76], [84]. Usually self-adaptation is applied to tune the control parameters F and Cr. Liu and Lampinen [48] introduced a Fuzzy adaptive differential evolution using fuzzy logic controllers whose inputs incorporate the relative function values and individuals of successive generations to adapt the parameters for the mutation and crossover operation. In this context, Qin et al. [76] came up with a SaDE algorithm, in which both the trial vector generation strategies and their associated control parameters F and Cr are gradually self-adapted by learning from their previous experiences of generating promising solutions. The parameter F, in SaDE, is approximated by a normal distribution with mean value 0.5 and standard deviation 0.3, denoted by N (0.5, 0.3). A set of F values are randomly sampled from such normal distribution and applied to each target vector in the current population. This way, SaDE attempts to maintain both exploitation (with small F values) and exploration (with large F values) power throughout the entire evolution process. SaDE gradually adjusts the range of Cr values for a given problem according to previous Cr values that have generated trial vectors successfully entering the next generation. Specifically, it is assumed that Cr obeys a normal distribution with mean value Crm and standard deviation Std = 0.1, denoted by N(Crm, Std), where Crm is initialized as 0.5. The Std should be set as a small value to guarantee that most Cr values generated by N(Crm, Std) are between [0, 1], even when Crm is near 0 or 1. Hence, the value of Std is set as 0.1. Note that the self-adaptive schemes like SaDE often themselves have parameters to be adjusted like the standard deviation in normal distribution. However, self-adaptive DE performs better than the standard DE because sensitive parameters in DE are replaced by less sensitive parameters in self-adaptive DE. In [3], a fitness-based adaptation has been proposed for F. A system with two evolving populations has been implemented. The crossover rate Cr has been fixed to 0.5 after an empirical study. Unlike Cr, the value of F is adaptively updated at each generation by means of the following scheme: F = .. . max 	lmin, 1 . otherwise (12) where lmin = 0.4 is the lower bound of f, fmin and fmax are the minimum and maximum objective function values over the individuals of the populations, obtained in a generation. Recently, Brest et al. [10] proposed a self-adaptation scheme for the DE control parameters. They encoded control parameters F and Cr into the individual and adjusted them by introducing two new parameters ¥ó1 and ¥ó2. In their algorithm (called ¡°jDE¡±), a set of F and Cr values was assigned to each individual in the population, augmenting the dimensions of each vector. The better values of these encoded control parameters lead to better individuals that in turn, are more likely to survive and produce offspring and, thus, propagate these better parameter values. The new control parameters for the next generation are computed as follows: Fi,G+1 = Fl + rand1 . Fu with probability¥ó1 = Fi,G else  (13a) and Cri,G+1 = rand3 with probability¥ó2 = Cri,G else  (13b) where Fl and Fu are the lower and upper limits of F and both lie in [0, 1]. In [10] and [S231], Brest et al. used ¥ó1 = ¥ó2 = 0.1. As Fl = 0.1 and Fu = 0.9, the new F takes a value from [0.1, 0.9] while the new Cr takes a value from [0, 1]. As Fi,G+1 and CRi,G+1 values are obtained before the mutation is performed, they influence the mutation, crossover, and selection operations for the new vector Xi,G+1. Zaharie [S29] proposed a parameter adaptation strategy for DE (ADE) based on the idea of controlling the population diversity, and implemented a multipopulation approach. Following the same line of thinking, Zaharie and Petcu [S30] 12 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 designed an adaptive Pareto DE algorithm for multiobjective optimization and also analyzed its parallel implementation. Abbass [1] self-adapted the crossover rate Cr for multiobjective optimization problems, by encoding the value of Cr into each individual, simultaneously evolved with other search variables. The scaling factor F was generated for each variable from a Gaussian distribution N(0, 1). The upper limit of the scale factor F is empirically taken as 1. Although it does not necessarily mean that a solution is not possible with F > 1, however, until date, no benchmark function that was successfully optimized with DE required F > 1. Zaharie [112] derived a lower limit of F and the study [112] revealed that if F is sufficiently small, the population can converge even in the absence of selection pressure. With a few simplifying assumptions, Zaharie proved the following relation between the variance of the original population Px,t at time step G and the variance of the trial population Pu,t E(Var(Pu,t)) ... where pCr is the probability of crossover [Zaharie neglected the jrand part in (5) and then Cr became the absolute probability that a component of the target vector is exchanged with that of the donor vector; Zaharie used the notation pCr to denote this probability instead of Cr]. Consequently, the DE control parameter combinations that satisfy the equation 2.F2 . 2 NP + pCr NP = 0 (15) may be considered as critical since they result in a population whose variance remains constant except for random fluctuations. Thus, when the selection step is absent, according to (13), F will display a critical value Fcrit such that the population variance decreases when F < Fcrit and increases if F > Fcrit . Solving (13), we have Fcrit = 1 . pCr2 NP . (16) Zaharie experimentally confirmed that Fcrit establishes a lower limit on the value of F in the sense that smaller values will induce convergence even on a flat objective function landscape (when all trial vectors are accepted, i.e., selection pressure is absent). Omran et al. [65] introduced a self-adaptive scaling factor parameter F. They generated the value of Cr for each individual from a normal distribution N(0.5, 0.15). This approach (called ¡°SDE¡±) was tested on four benchmark functions and performed better than other versions of DE. Besides adapting the control parameters F or Cr, some researcher also adapted the population size. Teo [102] proposed DE with self-adaptive population size NP (abbreviated as DESAP), based on self-adaptive Pareto DE proposed by Abbas [1]. Mallipeddi and Suganthan [50] empirically investigated the effect of population size on the quality of solutions and the computational effort required by DE with a set of five problems chosen from the test-suite of CEC 2005 Special Session on Real-Parameter Optimization [95]. In [11], the authors presented a method for gradually reducing population size of DE. The method improves the efficiency and robustness of the algorithm and can be applied to any variant of a DE algorithm. In [51], Mallipeddi and Suganthan proposed a DE algorithm with an ensemble of parallel populations, where the number of function evaluations (FEs) allocated to each population is self-adapted by learning from their previous experiences in generating superior solutions. Consequently, a more suitable population size along with its parameter settings can be determined adaptively to match different search/evolution phases. Apart from self-adaptation, frequently F has been made to vary randomly for improving the performances of DE. Price et al. [74] defined two new terms: jitter and dither in context to the randomization of F. The practice of generating a new value of F for every parameter is called jitter and it is signified by subscripting F with the parameter index, j. Alternatively, choosing F anew for each vector, or dithering, is indicated by subscripting F with the population¡¯s running index, i. Dithering scales the length of vector differentials because the same factor, Fi, is applied to all components of a difference vector. Das et al. used dither in [17] where F was made to vary randomly between 0.5 and 1 for each vector. In the same paper, they also suggested decreasing F linearly from 1.0 to 0.5 in their second scheme (called DETVSF: DE with time varying scale factor). This encourages the individuals to sample diverse zones of the search space during the early stages of the search (promoting exploration). During the later stages a decaying scale factor helps to adjust the movements of trial solutions finely so that they can explore the interior of a relatively small space in which the suspected global optimum lies (thus promoting exploitation). Recently in works like [S31] and [S32], chaotic sequences are combined with DE in order to enhance its population diversity and thus to avoid the state of stagnation, when a standard DE may occasionally stop proceeding toward the global optimum virtually without any obvious reasons [41]. That means although the population has not converged to a local optimum or any other point, the population is still remaining diverse, and occasionally, even new individuals may enter the population, but the algorithm does not progress by finding any better solutions. Chaos theory [S33] deals with the qualitative study of unstable aperiodic behavior in deterministic nonlinear dynamical systems. In chaotic DE the scale factor F is varied over generations by using the logistic map iterator, which is one of the simplest dynamic systems evidencing chaotic behavior, in the following way: FG = ¥ì ¡¤ FG.1 ¡¤ [1 . FG.1]. (17) IV. Important Variants of DE for Continuous Single-Objective Optimization Since its advent in 1995, DE has been attracting the attention of the researchers from diverse domains of knowledge, all over the world. This has resulted in a wealth of variants of the basic DE algorithm. Some of these variants are devised to tackle specific applications while others are generalized for numerical optimization. In this section, we shall undertake DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 13 an in-depth discussion of the most prominent DE-variants that were developed over the past decade and appeared to be competitive against the existing best-known real parameter optimizers. A. Differential Evolution Using Trigonometric Mutation Fan and Lampinen [25] proposed a trigonometric mutation operator for DE to speed up its performance. To implement the scheme, for each target vector, three distinct vectors are randomly selected from the DE population. Suppose for the ith target vector Xi,G, the selected population members are X r1,G, Xr2,G, and Xr3,G. The indices r1, r2, and r3 are mutually exclusive integers randomly chosen from the range [1, NP], which are also different from the index i. Now three weighting coefficients are formed according to the following equations: (18d) where f () is the function to be minimized. Let  be the trigonometric mutation rate in the interval (0, 1). Then the trigonometric mutation scheme may now be expressed as V i,G+1 = (Xr1 + Xr2 + Xr3)3 + (p2 . p1).(Xr1 . Xr2)+ (p3 . p2) ¡¤ (Xr2 . Xr3) + (p1 . p3) ¡¤ (Xr3 . Xr1)if rand[0, 1] ¡Â  V i,G+1 = Xr1 + F ¡¤ (Xr2 . Xr3) else. (19) Thus, the scheme proposed by Fan et al. used trigonometric mutation with a probability of  and the mutation scheme of DE/rand/1 with a probability of (1 . ). B. Differential Evolution Using Arithmetic Recombination The binomial crossover scheme, usually employed in most of the DE variants, creates new combinations of parameters; it leaves the parameter values themselves unchanged. Binomial crossover is in spirit same as the discrete recombination used in conjunction with many EAs. However, in continuous or arithmetic recombination, the individual components of the trial vector are expressed as a linear combination of the components from mutant/donor vector and the target vector. The common form of the arithmetic recombination between two vectors Xr1,G and Xr2,G adopted by most of the EAs [S3] may be put as W i,G =  Xr1,G +ki ¡¤ (Xr1,G . Xr2,G). (20) The coefficient of combination ki can either be a constant or a random variable. Generally speaking, if this coefficient is sampled anew for each vector then the resulting process is known as line recombination. However, if the combination coefficient is elected randomly anew for each component of the vectors to be crossed, then the process is known as Fig. 5. Domains of the different recombinant vectors generated using discrete, line and random intermediate recombination. intermediate recombination and may be formalized for the jth component of the recombinants as wi,j,G = xr1,j,G + kj ¡¤ (xr1,j,G . xr2,j,G). (21) Fig. 5 schematically shows the regions searched by discrete, line and arithmetic recombination between donor vector Vi,G and the target vector Xi,G when the coefficient of combination is a uniformly distributed random number between 0 and 1. The two recombinant vectors occupy the opposite corners of a hypercube whose remaining corners are the trial vectors U/ i,G and U // i,G created by discrete recombination. Line recombination, as its name suggests, searches along the axis connecting the recombinant vectors, while the intermediate recombination explores the entire D-dimensional volume contained within the hypercube. As can be perceived from Fig. 5, both the discrete as well as the intermediate recombination are not rotationally invariant processes. If the coordinate system rotates through an angle, the corners of the hypercube are relocated, which in turn redefines the area searched by the intermediate recombination. On the other hand, the line recombination is rotationally invariant. To make the recombination process of DE rotationally invariant, Price proposed a new trial vector generation strategy ¡°DE/current-to-rand/1¡± [75], which replaces the binomial crossover operator with the rotationally invariant arithmetic line recombination operator to generate the trial vector Ui,G by linearly combining the target vector Xi,G and the corresponding donor vector Vi,G as follows: U i,G = Xi,G + ki ¡¤ (Vi,G . Xi,G). (22) Now incorporating (3) in (22) we have U i,G = Xi,G + ki ¡¤ (Xr1,G + F ¡¤ (Xr2,G . Xr3,G) . Xi,G) (23) which further simplifies to U i,G = Xi,G + ki ¡¤ (Xr1,G . Xi,G) + F  ¡¤ (Xr2,G . Xr3,G) (24) where ki is the combination coefficient, which has been experimentally shown [74], [75] to be effective when it is chosen with a uniform random distribution from [0, 1] and F  = ki ¡¤ F is a new constant parameter. 14 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 Fig. 6. Change of the trial vectors generated through the discrete and random intermediate recombination due to rotation of the coordinate system. U R/ i,G and U R// i,G indicate the new trial vectors due to discrete recombination in rotated coordinate system. C. DE/rand/1/Either-Or Algorithm Price et al. [74, p. 118] proposed the state-of-the-art DE/rand/1/either-or algorithm, where the trial vectors that are pure mutants occur with a probability pF and those that are pure recombinants occur with a probability 1 . pF . This variant is shown to yield competitive results against classical DE-variants rand/1/bin and target-to-best/1/bin in a recent comparative study [21]. The scheme for trial vector generation may be outlined as U i,G = X r1,G + F.(X r2,G . Xr3,G) ifrandi(0, 1) < pF = Xr0,G + k.(Xr1 + Xr2 . 2.Xr0 ) otherwise  . (25) Price et al. recommended k = 0.5 ¡¤ (F + 1) as a good choice for the parameter k for a given F. The DE/rand/1/eitheror algorithm provides a simple way to implement the dual axis search in the k-F plane (k indicating the combination coefficient of the arithmetic crossover and F being the scale factor). The scheme provides efficient solutions for functions that are best minimized by either mutation-only (pF = 1) or recombination only (pF = 0), as well as generic functions that can be solved by randomly interleaving both operations (0 < pF < 1). Note that pF is a parameter of the algorithm and it determines the relative importance of the mutation and arithmetic recombination schemes. Price et al. recommend a value 0.4 for it. It is interesting to investigate whether it is possible to self-adapt pF so that the algorithm may be able to decide the optimal value of this parameter capturing some special properties of the objective function under test. D. Opposition-Based Differential Evolution The concept of opposition-based learning was introduced by Tizhoosh [S34] and its applications were introduced in [S34].[S36]. Rahnamayan et al. [82] have recently proposed an ODE for faster global search and optimization. The algorithm also finds important applications to the noisy optimization problems [S37]. The conventional DE was enhanced by utilizing opposition number based optimization concept in three levels, namely, population initialization, generation jumping, and local improvement of the population¡¯s best member. In the absence of a priori information about the actual optima, an EA usually starts with random guesses. We can improve our chance of starting with a better solution by simultaneously checking fitness of the opposite solution. By doing this, the fitter one (guess or opposite guess) can be chosen as an initial solution. As explained in [S34], according to probability theory, 50% of the time a guess may have lower fitness value than its opposite guess. Therefore, starting with the fitter of the two guesses has the potential to accelerate convergence. The same approach can be applied not only to initial solutions but also continuously to each solution in the current population. Also, when the population begins to converge into a smaller neighborhood surrounding an optimum, taking opposition moves can increase diversity of the population. In addition, when the population converges, the magnitude of difference vectors will become smaller. However, difference vectors generated by using parents that just underwent an opposite move will be large thereby resulting in larger perturbation in the mutant vector. Therefore, ODE possesses superior capability to jump out of local optima basins. Before discussing the steps of ODE, below we define opposite numbers. Definition 1: Let x be a real number defined in the closed interval [a, b], i.e., x ¡ô [a, b]. Then the opposite number x of x may be defined as x = a + b . x. (26) The ODE changes the classical DE using the concept of opposite numbers at the following three different stages. 1) Opposition based population initialization: first a uniformly distributed random population P(NP) is generated and then the opposite population OP(NP) is calculated. The kth opposite individual corresponding to the kth parameter vector of P(NP) is [following (26)], OPk,j = ak,j + bk,j . Pk,j , where k = 1, 2, ....,NP and j = 1, 2, ....,D, ak,j and bk,j denote the interval boundaries of j-th parameter of the kth vector, i.e., xk,j ¡ô [ak,j, bk,j ]. Finally, NP fittest individuals are selected from the set {P(NP),OP(NP)} as the initial population. 2) Opposition based generation jumping: in this stage, after each iteration, instead of generating new population by evolutionary process, the opposite population is calculated with a predetermined probability Jr(¡ô (0, 0.04)) and the NP fittest individuals may be selected from the current population and the corresponding opposite population. 3) Opposition based best individual jumping: in this phase, at first a difference-offspring of the best individual in the current population is created as X new best,G = Xbest,G + F  ¡¤ (Xr1,G . Xr2,G) where r1 and r2 are mutually different random integer indices selected from {1, 2, ..., NP} and F  DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 15 is a real constant. Next the opposite of offspring is generated as Xopp newbest,G. Finally, the current best member is replaced by the fittest member of the set {Xbest,G, Xnew best,G, Xopp newbest,G. E. DE with Neighborhood-Based Mutation The efficiency of most EAs depends on their extent of explorative and exploitative tendencies during the course of search. Exploitation means the ability of a search algorithm to use the information already collected and thus to orient the search more toward the goal while exploration is the process that allows introduction of new information into the population. Exploration helps the algorithm to quickly search the new regions of a large search-volume. Das et al. [21] proposed two kinds of topological neighborhood models for DE in order to achieve better balance between its explorative and exploitative tendencies. The resulting algorithm, called DEGL, was put forward as an improvement over the DE/target-to-best/1 scheme, which shows a poor performance on multimodal fitness landscapes, as noted in the studies of Mezura-Montes et al. [56] and Price et al.. [74, p. 156]. Suppose we have a DE population PG = [X1,G, X2,G, ...., X NP,G] at generation G. The vector indices are sorted only randomly (as obtained during initialization) in order to preserve the diversity of each neighborhood. Now for every vector X i,G we define a neighborhood of radius k (where k is a nonzero integer from 0 to (NP . 1)2 as the neighborhood size must be smaller than the population size, i.e., 2k + 1 ¡Â NP), consisting of vectors Xi.k,G, ..., Xi,G, ..., Xi+k,G. We assume the vectors to be organized on a ring topology with respect to their indices, such that vectors XNP,G and X2,G are the two immediate neighbors of vector X1,G. For each member of the population a local donor vector is created by employing the best (fittest) vector in the neighborhood of that member and any two other vectors chosen from the same neighborhood. The model may be expressed as L i,G = Xi,G + ¥á ¡¤ (Xn besti,G . Xi,G) + ¥â ¡¤ (Xp,G . Xq,G) (27) where the subscript n besti indicates the best vector in the neighborhood of Xi,G and p, q ¡ô [i . k, i + k] with p = q = i. Similarly, the global donor vector is created as g i,G = Xi,G + ¥á ¡¤ (Xg best,G . Xi,G) + ¥â ¡¤ (Xr1,G . Xr2,G) (28) where the subscript g best indicates the best vector in the entire population at iteration G and r1, r2 ¡ô [1,NP] with r1 = r2 = i. ¥á and ¥â are the scaling factors. Now we combine the local and global donor vectors using a scalar weight w ¡ô (0, 1) to form the actual donor vector of the proposed algorithm V i,G = w ¡¤ gi,G + (1 . w) ¡¤ Li,G. (29) Clearly, if w = 1 and in addition ¥á = ¥â = F, the donor vector generation scheme in (30) reduces to that of DE/targetto- best/1. Hence, the latter may be considered as a special case of this more general strategy involving both global and local neighborhood of each vector synergistically. Note that DE/target-to-best/1, in its present form, favors exploitation only, since all the vectors are attracted toward the same best position found so far by the entire population, thereby converging faster toward the same point. In DEGL, a vector¡¯s neighborhood is the set of other parameter vectors that it is connected to; it considers their experience when updating its position. The graph of inter-connections is called the neighborhood structure. Generally, neighborhood connections are independent of the positions pointed to by the vectors. In the local model, whenever a parameter vector points to a good region of the search space, it only directly influences its immediate neighbors. Its second degree neighbors will only be influenced after those directly connected to them become highly successful themselves. Thus, there is a delay in the information spread through the population regarding the best position of each neighborhood. Therefore, the attraction to specific points is weaker, which reduces the chances of getting trapped in local minima. F. DE with Adaptive Selection of Mutation Strategies DE can encompass a number of trial vector generation strategies, each of which may be effective over certain problems but poorly perform over the others [26]. In [76], for the first time Qin et al. proposed a self-adaptive variant of DE (SaDE), where along with the control parameter values the trial vector generation strategies are also gradually self-adapted by learning from their previous experiences in generating promising solutions. Consequently, it is possible to determine a more suitable generation strategy along with its parameter settings adaptively to match different phases of the search process/evolution. In SaDE, four effective trial vector generation strategies namely the DE/rand/1/bin, DE/rand-to-best/2/bin, DE/rand/ 2/bin and finally DE/current-to-rand/1 were chosen to constitute a strategy candidate pool. The first three DE-variants are equipped with binomial type crossover while the last one uses arithmetic recombination (described in Section IV-B). In the SaDE algorithm, for each target vector in the current population, one trial vector generation strategy is selected from the candidate pool according to the probability learned from its success rate in generating improved solutions (that can survive to the next generation) within a certain number of previous generations, called the learning period (LP). The selected strategy is subsequently applied to the corresponding target vector to generate a trial vector. More specifically, at each generation, the probabilities of choosing each strategy in the candidate pool are summed to 1. These probabilities are initially equal (1/K for K total number of strategies in the pool) and are then gradually adapted during evolution, based on the Success and Failure Rates [76] over the previous LP generations. The adaptations of the probabilities take place in such a fashion that, the larger the success rate for the kth strategy in the pool within the previous LP generations, the larger is the probability of applying it to generate trial vectors at the current generation. The performance of SaDE was compared with the conventional DE and three adaptive DE-variants: ADE [S29], SDE [65], and jDE [10] (already discussed in Section III) over a 16 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 suite of 26 bound constrained numerical optimization problems, and the authors reported that, SaDE was more effective in obtaining better quality solutions, with the relatively smaller standard deviations, and higher success rates. G. Adaptive DE with DE/Current-to-pbest Mutation In order to avoid the need for problem specific parameter tuning and also to improve the convergence characteristics of DE, an adaptive DE-variant, called JADE, was recently proposed [118]. The algorithm implements a new mutation strategy, referred by the authors as DE/current-to-pbest and uses an optional external archive to track the previous history of success and failure. It also updates the control parameters in an adaptive manner with generations. The DE/current-to-pbest strategy is a less greedy generalization of the DE/current-tobest/ strategy. Instead of only adopting the best individual in the DE/current-to-best/1 strategy, the current-to-pbest/1 strategy utilizes the information of other good solutions. Moreover, the recently explored inferior solutions are also incorporated in this strategy. The DE/current-to-pbest/1 without external archive generates the donor vector as V i,G = Xi,G + Fi ¡¤ (Xp best,G . Xi,G) + Fi ¡¤ (Xri1 ,G . Xri2 ,G) (30) where Xp best,G is randomly chosen as one of the top 100p% individuals of the current population with p ¡ô (0, 1]. Fi is the scale factor associated with the ith individual and it is updated dynamically in each generation. JADE can optionally make use of an external archive, which stores the recently explored inferior solutions. Let A denote the archive of inferior solutions and P denote the current population. Then DE/current-topbest/ 1 with external archive generates the donor vector as V i,G = Xi,G + Fi ¡¤ (Xp best,G . Xi,G) + Fi ¡¤ (Xri1 ,G . X  ri2 ,G) (31) where Xi,G, Xp best,G, and Xri1 ,G are selected from P as before in (30), but X  ri2 ,G is selected at random from the union P A, of the current population and archive. The archive operation is made very simple to avoid significant computation overhead. Initially the archive is empty. Then, after each generation, the parent solutions that fail in the selection process are added to the archive. If the archive size exceeds a certain threshold, then some solutions are randomly eliminated from the archive to keep the archive size fixed. H. Hybrid DE Algorithms Hybridisation, in context to metaheuristics, primarily refers to the process of combining the best features of two or more algorithms together, to form a new algorithm that is expected to outperform its ancestors over application-specific or general benchmark problems. Over the past few years, DE has been successfully hybridized with several other global optimization algorithms like PSO [S38], ant colony systems [S39], artificial immune systems (AIS) [S40], bacterial foraging optimization algorithm (BFOA) [S41], and simulated annealing (SA) [S42]. Also researchers attempted to embed different local search techniques in basic DE, to improve its exploitation abilities. In this section, we shall discuss the hybrid DE algorithms in two parts: first one will present the synergy between DE and other global search methods while the second one will review the blending of DE with local search algorithms. 1) Synergy of DE with Other Global Optimization Algorithms: The concept of particle swarms, although initially introduced for simulating human social behaviors, has become very popular these days as an efficient global search and optimization technique. The first synergy between DE and PSO was reported by Hendtlass, who proposed a combined swarm differential evolution algorithm [S43] serving as a hybrid optimizer based on PSO and DE. In this optimizer, particle positions are updated only if their offspring have better fitness. DE acts on the particles in the PSO swarm at specified intervals. Zang and Xie [119] proposed another popular hybrid algorithm called DEPSO, in which the original PSO algorithm and the DE operator alternate at the odd iterations and at the even iterations. DEPSO achieved better convergence results than both the original algorithms over certain constrained optimization problems. Das et al. [16] presented a tightly coupled synergy of PSO and DE, called particle swarm optimization with differentially perturbed velocity (PSO-DV). PSO-DV introduces a differential operator (borrowed from DE) in the velocity-update scheme of PSO. Further, unlike conventional PSO, a particle is actually shifted to a new location only if the new location yields a better fitness value, i.e., a DE-type selection strategy has been incorporated into the swarm dynamics. In [58], Moore and Venayagamoorthy proposed a new hybrid of DE and PSO, which is similar in spirit to the algorithm proposed in [119], but the DE and PSO in it are DE/rand/2/bin and a modified PSO with ¡°Ring¡± topology respectively. In [S44], Liu et al. proposed a similar DEPSO and used it to train artificial neural networks. Like the work reported in [119], the PSO in this hybrid optimizer is also based on Gbest model; however, the DE in it is DE/targetto- best/1/bin. In particular, this hybrid also adopts a chaotic local search to improve its local exploitation ability. In 2004, Kannan et al. [S45] proposed a distinctive DEPSO (named CPSO in [S45]). The DE algorithm in it is employed to select three control parameters on-line for PSO. In other words, DE serves as a meta-optimizer for the optimization of PSOs search behavior. Recently Hao et al. [S46] constructed a new hybrid optimizer, where DE and PSO are regarded as two operators to generate candidate solutions, and they act on the level of dimensional components of individuals. In [66], Omran et al. presented two hybrids of DE and PSO. The first DEPSO (named DEPSO-OES) is somewhat similar to the hybrid described in [S46]. The DE (DE/rand/1/bin) and PSO-cf (PSO with constriction factor) in it also alternate in a stochastic way, but both DE and PSO act on the level of a whole individual, that is to say, each individual at each generation has only one updating method (DE or PSO). Besides, the probability for controlling the selection of updating method and the scaling factor in DE are dynamic and adaptive. The second hybrid method combined the bare bones PSO proposed by Kennedy [S47] and DE in an embedding way. Xue et al. described another scheme of mixing DE operators with PSO in [S48]. DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 17 Das et al. [19] modified the selection mechanism of the classical DE family by using the concepts of SA such that the probability of accepting the inferior solutions may be dynamically altered with iterations. Biswas et al. [9] proposed a synergistic coupling of DE and BFOA. Foraging can be modeled as an optimization process where an animal seeks to maximize energy per unit time spent for foraging. BFOA emulates the foraging behavior of a group of Escherichia coli bacteria living in our intestine. In [9], the computational chemotaxis step of BFOA, which may also be viewed as a stochastic gradient search, has been coupled with DE type mutation and crossing over of the optimization agents leading to the new hybrid algorithm called chemotactic differential evolution (CDE). In [S49] and [S50], hybridizations of the DE with an ant colony optimizer are proposed. In [S51], He and Han propose a hybrid binary DE based on AIS for tackling discrete optimization problems. Kaelo and Ali [33] use the attraction-repulsion concept of electromagnetism-like algorithm to boost the mutation operation of the original DE. 2) Synergy of DE with Local Search Methods: Local search algorithms primarily explore a small neighborhood of a candidate solution in the search space until a locally optimal point is found or a time bound is elapsed. Noman and Iba [64] proposed a crossover based adaptive local search (LS) operation to improve the performance of the classical DE. Typically in LS, every candidate solution has more than one neighbour solution; the choice of which one to move to is taken using only information about the solutions in the neighbourhood of the current one, hence the name local search. If the choice of the neighbouring solution is done by taking the one locally maximizing the criterion, the metaheuristic takes the name hillclimbing. The authors in [64] proposed an LS, whose length of the search can be adjusted adaptively using a hill-climbing heuristic. The incorporation of a crossover-based local search (XLS) with adaptive length (adaptive length XLS, shortened as AHCXLS) in DE resulted into a DE-variant called by the authors: DEahcSPX, where SPX is the simplex-based crossover scheme proposed by Tsutsui et al. for real-coded GAs [S52]. The experimental results reported by Noman and Iba [64] indicated that DEahcSPX could outperform the classical DE (DE/rand/1/bin) in terms of convergence speed over a set of carefully chosen numerical benchmarks [95]. The overall performance of the adaptive LS scheme was reportedly better than the other crossover-based LS strategies and the overall performance of the newly proposed DE algorithm was shown to be superior to or at least comparable with some other memetic algorithms (MAs) [S53] selected from literature. Yang et al. [108] proposed a hybridization of DE with the neighborhood search, which appears as a main strategy underpinning EP [S54]. The resulting algorithm, known as NSDE, performs mutation by adding a normally distributed random value to each target-vector component in the following way: V i,G = Xri1 ,G +  di,G ¡¤ N(0.5, 0.5) if randi(0, 1) < 0.5 di,G ¡¤ ¥ä otherwise (32) where di,G = Xri2 ,G . Xri3 ,G is the usual difference vector and ¥ä denotes a Cauchy random variable with scale parameter t = 1. Recently Yang et al. [110] used a Self-adaptive NSDE in the cooperative coevolution framework that is capable of optimizing large-scale non-separable problems (up to 1000 dimensions). They proposed a random grouping scheme and adaptive weighting for problem decomposition and coevolution. Somewhat similar in spirit to this paper is the study by Yang et al. [S55] on self-adaptive DE with neighborhood search (SaNSDE). SaNSDE incorporates self-adaptation ideas from the Qin et al¡¯s SaDE [76] and proposes three self-adaptive strategies: self-adaptive choice of the mutation strategy between two alternatives, self-adaptation of the scale factor F, and self-adaptation of the crossover rate Cr. In contrast to Yang et al.¡¯s works on NSDE and SaNSDE, in the topological neighborhood-based mutation scheme proposed in [21], the authors keep the scale factor non-random and use a ring-shaped neighborhood topology (inspired by PSO [S56]), defined on the index graph of the parameter vectors, to derive a local neighborhood-based mutation model. Also instead of F and Cr, the weight factor that unifies two kinds of mutation models, have been made self-adaptive in one of the variants of the algorithms described in [21]. MAs represent one of the recent growing areas of research in evolutionary computation. The term MA is now widely used to denote a synergy of evolutionary or any populationbased approach with separate individual learning or local improvement procedures for problem search. Neri and Tirronen [59] proposed a DE-based MA, which employs within a self-adaptive scheme, two local search algorithms. The algorithm was referred by authors as the scale factor local search differential evolution. These local search algorithms aim at detecting a value of the scale factor F corresponding to an offspring with a higher fitness, while the generation is executed. The local search algorithms thus assist in the global search and generate offspring with a higher fitness, which are subsequently supposed to promote the generation of enhanced solutions within the evolutionary framework. In [S57], Tirronen et al. proposed a DE-based MA employing three local search algorithms coordinated by means of fitness diversity adaptation and a probabilistic scheme for designing digital filters, which aim at detecting defects of the paper produced during an industrial process. In [14], Caponio et al. incorporated PSO and two other LS algorithms (Nelder mead algorithm and Rosenbrock algorithm) in the framework of DE. The main idea is that initially PSO should quickly improve a solution having poor fitness and include it in the DE population. This solution (called by the authors as ¡°super-fit individual¡±) should therefore be the one leading the DE-search. The two local searchers are invoked within the main DE-search probabilistically. Although the paper reports improvement of the gross performance of DE, role of the LS algorithms are not much clear. 3) DE-Variants for Discrete and Binary Optimization: Although DE was devised mainly for real parameter optimization, over the years researchers have tried to modify it for tackling binary and discrete optimization problems as well. In the early days of DE research, Lampinen and Zelinka first focused in this direction through their conference article in MENDEL¡¯99 [40]. For handling of integer variables, they 18 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 recommended truncating the parameter values for objective function evaluation such that the population of DE still works with floating-point values. They pointed out that although such truncation changes the effective objective function landscape from DE¡¯s point of view by introducing flat areas to the fitness landscape, DE¡¯s self-adaptive reproduction scheme is well able to move across to those flat areas. In the same paper, Lampinen and Zelinka also came up with a straightforward approach for optimizing discrete parameters that are limited to a set of standard values. For example, the thickness of a steel plate, the diameter of a copper pipe, the size of a screw, the size of a roller bearing, and so on, are often limited to a set of commercially available standard sizes. A discrete value is optimized indirectly so that DE actually works on an integer value (index) that points to the actual discrete value. First, the discrete set of available values is arranged to an ascending sequence, and then an index is assigned to refer each available value. DE works with these indices by optimizing the index like any integer variable. However, for objective function evaluation the actual discrete value pointed by the index is used. In [S212], Tasgetiren et al. presented a DE algorithm to solve the permutation flowshop scheduling problem with the makespan criterion. DE was a traditional continuous algorithm and the smallest position value rule was presented to convert the continuous vector to a discrete job permutation. In [S213], Onwubolu and Davendra presented a DE variant for solving scheduling problems. In [S58], Tasgetiren et al. proposed a discrete differential evolution algorithm (DDE) for the no-wait flowshop scheduling problem with total flow time criterion. In the DDE they proposed, a discrete version of DE based on a insert mutation and PTL crossover operator they offered are employed. In order to further improve the solution quality, a variable neighborhood descent local search is embedded in the DDE algorithm. A DDE algorithm was presented by Tasgetiren et al. [S214] for the total earliness and tardiness penalties with a common due date on a single-machine. In [S214], the same mutation and the PTL crossover operator were used in the binary context as well as a Bswap local search is employed to further improve the solution quality. A similar approach but working on a continuous domain was presented in Nearchou [S215] to solve the total earliness and tardiness penalties with a common due date on a single-machine. In [S215], the conversion of continuous vector was based on the fact that a value less than or equal to 0.5 in the string indicates that the corresponding job is early, otherwise the job is late. In [S216], Al-Anzi and Allahverdi proposed a selfadaptive differential evolution heuristic for two-stage assembly scheduling problem to minimize maximum lateness with setup times. Later, Pan et al. [217] presented a DDE based on the one in [S58] to solve the permutation flowshop scheduling problem. Furthermore, Qian et al. [S218] proposed another DE-based approach to solve the no-wait flowshop scheduling problem. Tasgetiren et al. [S59] developed a DDE for the single machine total weighted tardiness problem with sequence dependent setup times where novel speed-up methods were presented. In [S219], Pan et al. developed a novel differential evolution algorithm for bi-criteria no-wait flow shop scheduling problems. Wang et al. [220] proposed a hybrid discrete differential evolution algorithm for blocking flow shop scheduling problems. Another bi-criteria DE was presented by Qian et al. in [S221] to solve the multiobjective flow shop scheduling with limited buffers. In [S222], Tasgetiren et al. proposed an ensemble of discrete differential evolution algorithms for solving the generalized traveling salesman problem. The novelty in [S222] stems from the fact that the ensemble of destruction and construction procedures of iterated greedy algorithm and crossover operators are achieved in parallel populations. In addition, Damak et al. presented [S223] a DE variant for solving multimode resource-constrained project scheduling problems. In [S224] and [S225], DDE was applied to solve the no-idle permutation flow shop scheduling problems. Additional discrete and combinatorial applications of DE algorithms were presented in detail in [S226] and [S227]. Recently, Pampara et al. [67] proposed a new DE variant that can operate in binary problem spaces without deviating from the basic search mechanism of the classical DE. The algorithm was named by its authors as the angle modulated DE as it employs a trigonometric function as a bit string generator. The trigonometric generating function used in the angle modulation function is a composite sinusoidal function, which may be given as g(x) = sin(2¥ð(x . a) ¡¿ b ¡¿ cosA)) + d (33) where A = 2¥ð ¡¿ c ¡¿ (x . a) and x is a single element from a set of evenly separated intervals determined by the required number of bits that need to be generated. The DE is used to evolve the coefficients to the trigonometric function (a, b, c, d), thereby allowing a mapping from continuous-space to binary-space. Instead of evolving the higher-dimensional binary solution directly, angle modulation is used together with DE to reduce the complexity of the problem into a 4-D continuous-valued problem. Yuan et al. [S60] used a discrete binary differential evolution approach to solve the unit commitment problem. I. Parallel DE Exploiting the huge development of computational resources (both software and hardware), parallel computing has emerged as a form of high-performance computation, where many calculations are carried out simultaneously, based on the principle that large problems can often be divided into smaller ones, which are then solved concurrently (in parallel). Like other EAs, DE can also be parallelized (mainly for improving its speed and accuracy on expensive optimization problems) owing to the fact that each member of the population is evaluated independently. The only phase in the algorithm that necessitates communication with other individuals is reproduction. This phase can also be made parallel for pair of vectors. The first attempt to distribute DE across a cluster of computers (connected through local area networks) was made by Lampinen [38]. In his method, the whole population is kept in a master processor that selects individuals for mating and sends them to slave processors for performing other operations. Lampinen¡¯s parallelization scheme could also overcome DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 19 the drawbacks due to the heterogeneous speed of the slave processors. Tasoulis et al. [101] proposed a parallel DE scheme that maps an entire subpopulation to a processor, allowing different subpopulations to evolve independently toward a solution. To promote information sharing, the best individual of each subpopulation is allowed to move to other subpopulations according to a predefined topology. This operation is known as migration in parallel EA literature [S194] and island model GAs. During migration, instead of replacing a randomly chosen individual from a subpopulation, Kozlov and Samsonov [S195] suggested to replace the oldest member by the best member of another subpopulation in the topological neighborhood of the former subpopulation. Following the work of [101], Weber et al. [S196] proposed a scale factor (F) inheritance mechanism in conjunction with distributed DE with ring topology based migration scheme. In this framework, each sub-population is characterized by its own scale factor value. With a probabilistic criterion, that individual displaying the best performance is migrated to the neighbor population and replaces a randomly selected individual of the target subpopulation. The target sub-population inherits not only this individual but also the scale factor if it seems promising at the current stage of evolution. V. DE in Complex Environments This section reviews the extensions of DE for handling multiobjective, constrained, and large scale optimization problems. It also surveys the modifications of DE for optimization in dynamic and uncertain environments. A. DE for Multiobjective Optimization Due to the multiple criteria nature of most real-world problems, multiobjective optimization (MO) problems are ubiquitous, particularly throughout engineering applications. As the name indicates, multiobjective optimization problems involve multiple objectives, which should be optimized simultaneously and that often are in conflict with each other. This results in a group of alternative solutions, which must be considered equivalent in the absence of information concerning the relevance of the others. The concepts of dominance and Paretooptimality may be presented more formally in the following way. Definition 2: Consider without loss of generality the following multiobjective optimization problem with D decision variables x (parameters) and n objectives y: Minimize Y = f (X) = (f1(x1, ...., xD), ...., fn(x1, ...., xD)) (34) where X = [x1, ....., xD]T ¡ô P and Y = [y1, ...., yn]T ¡ô O and where X is called decision (parameter) vector, P is the parameter space, Y is the objective vector, and O is the objective space. A decision vector A ¡ô P is said to dominate another decision vector B ¡ô P (also written as A . B for minimization) if and only if ¢£i ¡ô {1, ...., n} : fi(A) ¡Â fi(B) ¡ü ¢¤j ¡ô {1, ....., n} : fj(A) < fj(B). (35) Based on this convention, we can define non-dominated, Pareto-optimal solutions as follows. Definition 3: Let A ¡ô P be an arbitrary decision vector. 1) The decision vector A is said to be non-dominated regarding the set P  ¡ö P if and only if there is no vector in P  which can dominate A. 2) The decision (parameter) vector A is called Paretooptimal if and only if A is non-dominated regarding the whole parameter space P. Many evolutionary algorithms were formulated by the researchers to tackle multiobjective problems in recent past [S61], [S62]. Apparently, the first paper that extends DE for handling MO problems is by Chang et al. [S63] and it bases itself on the idea of Pareto dominance. DE/rand/1/bin with an external archive (called ¡°Pareto optimal set¡± by the authors and also known as the current non-dominated set) is used to store the non-dominated solutions obtained during the search. The approach also incorporates fitness sharing to maintain diversity. Abbas and Sarkar presented the Pareto differential evolution (PDE) algorithm [2] for MO problems with continuous variables and achieved very competitive results compared to other evolution algorithms in MO literature. However, there is no obvious way to select best crossover and mutation rates apart from running the algorithm with different rates. It handles only one (main) population. Reproduction is undertaken only among non-dominated solutions, and offspring are placed into the population if they dominate the main parent. A distance metric relationship is used to maintain diversity. In [S64], Abbass presented an approach called Memetic Pareto artificial neural networks. This approach consists of PDE enhanced with the back-propagation local search algorithm, in order to speed up convergence. Kukkonen and Lampinen extended DE/rand/1/bin to solve multiobjective optimization problems in their approach called generalized differential evolution (GDE). In the first version of their approach [S65], the authors modified the original DE selection operation by introducing Pareto dominance as a selection criterion while in a second version, called GDE2 [S66] a crowding distance measure was used to select the best solution. To deal with the shortcomings of GDE2 regarding slow convergence, Kukkonen and Lampinen proposed an improved version called GDE3 [35] (a combination of the earlier GDE versions and the Pareto-based differential evolution algorithm [S67]). This version added a growing population size and nondominated sorting (as in the NSGAII [S68]) to improve the distribution of solutions in the final Pareto front and to decrease the sensitivity of the approach to its initial parameters. Santana-Quintero and Coello Coello proposed the ¡ô-MyDE in [86]. This approach keeps two populations: the main population (which is used to select the parents) and a secondary (external) population, in which the concept of ¡ô-dominance [S69] is adopted to retain the nondominated solutions found and to distribute them in a uniform way. In [105], Xue et al. came up with the multiobjective DE (MODE) in which the best individual is adopted to create the offspring. A Pareto-based approach is introduced to implement 20 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 the selection of the best individual. If a solution is dominated, a set of non-dominated individuals can be identified and the ¡°best¡± turns out to be any individual (randomly picked) from this set. Also, the authors adopt (¥ì+¥ë) selection, Pareto ranking and crowding distance in order to produce and maintain well-distributed solutions. Robic and Filipic presented a DE for multiobjective optimization (called DEMO) in [83]. This algorithm combines the advantages of DE with the mechanisms of Pareto-based ranking and crowding distance sorting. DEMO only maintains one population and it is extended when newly created candidates take part immediately in the creation of the subsequent candidates. This enables a fast convergence toward the true Pareto front, while the use of non-dominated sorting and crowding distance (derived from the NSGA-II [S68]) of the extended population promotes the uniform spread of solutions. Iorio and Li [32] proposed the non-dominated sorting DE (NSDE), which is a simple modification of the NSGA-II [S68]. The only difference between this approach and the NSGA-II is in the method for generating new individuals. The NSGA-II uses a real-coded crossover and mutation operator, but in the NSDE, these operators were replaced with the operators of differential evolution. NSDE was shown to outperform NSGA-II on set of rotated MO problems with strong interdependence of variables. Some researchers have proposed approaches that use non- Pareto based multiobjective concepts like combination of functions, problem transformation, and so on. For example, Babu and Jehan [6] proposed a DE algorithm for MO problems, which uses the DE/rand/1/bin variant with two different mechanisms to solve bi-objective problems: first, incorporating one objective function as a constraint, and secondly using an aggregating function. Li and Zhang [S70], [46] proposed a multiobjective differential evolution algorithm based on decomposition (MOEA/D-DE) for continuous multiobjective optimization problems with variable linkages. The DE/rand/1/bin scheme is used for generating new trial solutions, and a neighborhood relationship among all the sub-problems generated is defined, such that they all have similar optimal solutions. In [46], they introduce a general class of continuous MO problems with complicated Pareto set (PS) shapes and reported the superiority of MOEA/D-DE over NSGA-II with DE type reproduction operators. Summation of normalized objective values with diversified selection approach was used in [79] without the need for performing non-dominated sorting. Some authors also consider approaches where a set of schemes have been mixed in the DE-based multiobjective algorithm. Examples of such combined techniques are the vector evaluated DE [70] by Parsopoulos et al and the work of Landa- Becerra and Coello Coello [42] where they hybridized the ¥å-constraint technique [S71] with a single-objective evolutionary optimizer: the cultured DE [43]. Recently the concept of self-adaptive DE has been extended to handle MO problems in [29], [30], and [116]. B. DE for Constrained Optimization Most of the real world optimization problems involve finding a solution that not only is optimal, but also satisfies one or more constraints. A general formulation for constrained optimization may be given in the following way. Definition 4: Find X = [x1, x2, ..., xD]T X ¡ô D to minimize: f (X) (36a) subjected to inequality constraints: gi(X) ¡Â 0 i = 1, 2, ...,K (36b) equality constraints: hj(X) = 0 j = 1, 2, ...,N (36c) and boundary constraints: xj,min ¡Â xj ¡Â xj,max. (36d) Boundary constraints are very common in real-world applications, often because parameters are related to physical components or measures that have natural bounds, e.g., the resistance of a wire or the mass of an object can never be negative. In order to tackle boundary constraints, penalty methods drive solutions from restricted areas through the action of an objective function-based criterion. DE uses the following four kinds of penalty method to handle boundary constraint violation. 1) Brick wall penalty [74]: if any parameter of a vector falls beyond the pre-defined lower or upper bounds, objective function value of the vector is made high enough (by a fixed big number) to guarantee that it never gets selected. 2) Adaptive penalty [90], [91]: similar to brick wall penalty, but here the increase in the objective function value of the offender vector may depend on the number of parameters violating bound constraints and their magnitudes of violation. 3) Random reinitialization [40], [74]: replaces a parameter that exceeds its bounds by a randomly chosen value from within the allowed range following (1). 4) Bounce-back [74]: relocates the parameter in between the bound it exceeded and the corresponding parameter from the base vector. The first known extension of DE toward the handling of inequality constrained optimization problems (mainly design centering) was by R. Storn [93]. He proposed a multimember DE (called CADE: constraint adaptation with DE, in his paper) that generates M (M > 1) children for each individual with three randomly selected distinct individuals in the current generation, and then only one of the M + 1 individuals will survive in the next generation. Mezura-Montes et al. [S72] used the concept also to solve constrained optimization problems. Zhang et al. [117] mixed the dynamic stochastic ranking with the multimember DE framework and obtained promising performance on the 22 benchmarks taken from the CEC 2006 competition on constrained optimization [47]. Lampinen applied DE to tackle constrained problems [39] by using Pareto dominance in the constraints space. Mezura- Montes et al. [S73] proposed to add Deb¡¯s feasibility rules [S74] into DE to deal with constraints. Kukkonen and Lampinen [36] presented a generalised DE-based approach to solve constrained multiobjective optimization problems. DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 21 Zielinsky and Laur [121] also used Deb¡¯s rules [S74] with DE to solve some constrained optimization problems. Some researchers have also tried hybrid approaches such as the DE with gradient-based mutation (where gradients were derived from the constraint equations) by Takahama and Sakai [97] and PSO-DE (PESO+) by Mu.noz-Zavala et al. [S75]. The ¥å- DE algorithm of Takahama and Sakai [97] uses a dynamic control of the allowable constraint violation specified by the ¥å-level and it achieved the first rank in the CEC 2006 competition on the constrained real-parameter optimization [47]. Tasgetiren and Suganthan presented a multi-populated DE algorithm [99] to solve real-parameter constrained optimization problems. They employed the notion of a near feasibility threshold in the proposed algorithm to penalize infeasible solutions. Mezura-Montes et al. [57] proposed a DE approach that attempts to increase the probability of each parent to generate a better offspring. This is done by allowing each solution to generate more than one offspring but using a different mutation operator, which combines information of the best solution in the population and also information of the current parent to find new search directions. On the other hand, some studies have also been reported regarding parameter control in DE for constrained optimization. Brest et al. [S76] have proposed an adaptive parameter control for two DE parameters related to the crossover and mutation operators. Huang et al. [28] used an adaptive mechanism to select among a set of DE variants to be used for the generation of new vectors based on a success measure. Moreover, they also adapted some DE parameters to control the variation operators. Very recently Mezura-Montes and Palomeque-Ortiz [S77] presented the adaptive parameter control in the diversity differential evolution (DDE) [S72] algorithm for constrained optimization. Three parameters namely the scale factor F, the crossover rate Cr, and the number of offspring generated by each target vector NO, are self-adapted by encoding them within each individual and a fourth parameter called selection ratio Sr is controlled by a deterministic approach. Huang et al. [31] presented a cooperative-coevolutionary approach in conjunction with DE for constrained optimization problems. In their algorithm first, a special penalty function is designed to handle the constraints. Second, a co-evolution model is presented and DE is employed to perform evolutionary search in spaces of both solutions and penalty factors. Thus, the solutions and penalty factors evolve interactively and self-adaptively, and both the satisfactory solutions and suitable penalty factors can be obtained simultaneously. Recently Ali and Kajee-Bagdadi proposed a local exploration-based DE [4] for constrained global optimization. They used a restricted version of the pattern search (PS) method [S78] as their local technique. Constraint handling methods such as the superiority of feasible points and the parameter free penalty are also employed. Recently Santana-Quintero et al. [87] extended the PDE [1], [2] to handle constrained MO problems by using a two-stage hybrid DE approach where in the first one, an MO version of DE is used to generate an initial approximation of the Pareto front. Then, in the second stage, rough set theory is used to improve the spread and quality of this initial approximation. C. DE for Large-Scale Optimization In the past two decades, several kinds of nature-inspired optimization algorithms have been designed and applied to solve optimization problems. Although these approaches have shown excellent search abilities when applied to some 30.100 dimensional problems, usually their performance deteriorates quickly as the dimensionality of search space increases beyond 500. The reasons appear to be two-fold. First, complexity of the problem usually increases with the size of problem, and a previously successful search strategy may no longer be capable of finding the optimal solution. Second, the solution space of the problem increases exponentially with the problem size, and a more efficient search strategy is required to explore all the promising regions in a given time budget. Since the performance of basic DE schemes also degrade with massive increase in problem dimensions, some important attempts have been made by the researchers to make DE suitable for handling such large-scale optimization problems. In [62], Noman and Iba proposed fittest individual refinement (FIR), a crossover based local search method for DE, such that the FIR scheme accelerates DE by enhancing its search capability through exploration of the neighborhood of the best solution in successive generations. The proposed memetic version of DE (augmented by FIR) was shown to obtain an acceptable solution with a lower number of evaluations particularly for higher dimensional functions. Another memetic DE for high-dimensional optimization was presented by Gao and Wang [27], where the stochastic properties of chaotic system is used to spread the individuals in search spaces as much as possible and the simplex search method is employed to speed up the local exploiting and the DE operators help the algorithm to jump to a better point. In terms of optimizing high-dimensional problems, cooperative co-evolution (first proposed by Potter and De Jong for GAs [S79]) with the following divide-and-conquer strategy has proven an effective choice. 1) Problem decomposition: splitting the object vectors into some smaller subcomponents. 2) Optimize subcomponents: evolve each subcomponent with a certain optimizer separately. 3) Cooperative combination: combine all subcomponents to form the whole system. In [109], the authors proposed two DE-variants (DECCI and DECC-II) that use self-adaptive NSDE (SaNSDE) (a synergy of the works reported in [108] and [76]) in a cooperative co-evolutionary framework with novel strategies for problem decomposition and subcomponents¡¯ cooperation. The algorithms were tested on a set of widely used benchmarks scaled up to 500 and 1000 dimensions. An important extension of the same work for better performance on rotated and nonseparable high-dimensional functions has been reported in [110] where the authors use random grouping scheme with adaptive weighting for problem decomposition and coevolution. Some theoretical analysis is also presented in this paper to show why and how the new framework can be effective for optimizing large non-separable problems. The theoretical analysis illustrates how such strategies can help to 22 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 capture variable interdependencies in non-separable problems. Recently, Parsopoulos [S80] devised a cooperative micro- DE, which employs small cooperative subpopulations (with only few individuals) to detect subcomponents of the original problem¡¯s solution concurrently. The subcomponents are combined through cooperation of subpopulations to build complete solutions of the problem. Zamuda et al. [S81] proposed a DE-variant for large scale global optimization, where original DE is extended by log-normal self-adaptation of its control parameters and combined with cooperative co-evolution as a dimension decomposition mechanism. Among the other approaches, Su presented a surrogateassisted DE framework based on Gaussian process for solving large-scale computationally expensive problems in [S82]. Brest et al. [12] investigated a self-adaptive DE (abbreviated as jDEdynNP-F) where control parameters F and Cr are self-adapted and a population-size reduction method is used. The proposed jDEdynNP-F algorithm also employs a mechanism for sign changing of F with some probability based on the fitness values of randomly chosen vectors, which are multiplied by F in the mutation step of DE. The algorithm achieved third rank in CEC 2008 special session and competition on high-dimensional real-parameter optimization [98] that included non-separable functions like Schwefel¡¯s problem 2.21, Griewank¡¯s function, and fastfractal ¡°doubledip¡± function. D. DE for Optimization in Dynamic and Uncertain Environments In many real world applications, EAs often have to deal with optimization problems in the presence of a wide range of uncertainties. In general, there are four ways in which uncertainty may creep into the computing environment [S22]. First, the fitness function may be noisy. Second, the design variables and/or the environmental parameters may change after optimization, and the quality of the obtained optimal solution should be robust against environmental changes or deviations from the optimal point. Third, the fitness function may be approximated, which means that the fitness function suffers from approximation errors. Finally, the optimum of the problem to be solved changes its location over time and, thus, the optimizer should be able to track the optimum continuously. In all these cases, the EAs should be equipped with additional measures so that they are still able to work satisfactorily. For a noisy problem, a deterministic choice of the scale factor and the greedy selection methods can be inadequate and a standard DE can easily fail at handling a noisy fitness function, as experimentally shown in [34]. Looking at the problem from a different perspective, the DE employs too much deterministic search logic for a noisy environment and therefore tends to stagnate. Das et al. [18] made an attempt to improve the performance of DE on noisy functions by first varying the scale factor randomly between 0.5 and 1 and secondly by incorporating two not-so-greedy selection mechanisms (threshold based selection and stochastic selection) in DE. Liu et al. [49] combined the advantages of the DE algorithm, the optimal computing budget allocation technique and simulated annealing (SA) algorithm to devise a robust hybrid DE method abbreviated as DEOSA) that can work well in noisy environments. Mendes and Mohais presented DynDE [54].a multipopulation DE algorithm, developed specifically to optimize slowly time-varying objective functions. DynDE does not need any parameter control strategy for the F or Cr. The main components in DynDE are as follows. 1) Usage of several populations in parallel. 2) Usage of uniform dither for F? [0, 1] as well as Cr ¡ô [0, 1]. 3) To maintain diversity of the population based on two approaches. a) Reinitialization of a population if the best individual of a population gets too close to the best individual of another population. The population with the absolute best individual is kept while the other one is reinitialized. This way the various populations are prevented from merging. b) Randomization of one or more population vectors by adding a random deviation to the components. Experimentally, the authors show that this new algorithm is capable of efficiently solving the moving peaks benchmark described by Branke [S83]. Very recently Brest et al. [13] investigated a self-adaptive DE algorithm (jDE) where F and Cr control parameters are self-adapted and a multi-population method with aging mechanism is used to handle dynamic fitness landscapes. This algorithm achieved the first rank in the Competition on ¡°Evolutionary Computation in Dynamic and Uncertain Environments¡± in CEC2009 [45]. Angira and Santosh [5] presented a trigonometric differential evolution algorithm based on Fan and Lampinen¡¯s trigonometric mutation scheme [25] for solving dynamic optimization problems encountered in chemical engineering. E. DE for Multimodal Optimization and Niching Many practical objective functions are highly multimodal and likely to have several high quality global and/or local solutions. Often, it is desirable to identify as many of these solutions as possible so that the most appropriate solution can be chosen. In order to identify many solutions of a multimodal optimization problem, several ¡°niching¡± techniques have been developed. A niching method empowers an EA to maintain multiple groups within a single population in order to locate different optima. The niching techniques include crowding [103], fitness sharing [S203], [S209], clearing [S207], restricted tournament selection [81], [S204], and speciation [S205], [S208]. The crowding method [S206] allows competition for limited resources among similar individuals, i.e., within each niche. Generally, the similarity is measured using distance between individuals. The method compares an offspring with some randomly sampled individuals from the current population. The most similar individual will be replaced if the offspring is superior. Thomsen extended DE with a crowding scheme named as crowding DE (CDE) [103] to solve multimodal optimization problems. In CDE, when an offspring is generated, it will only compete with the most similar (measured by DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 23 Euclidean distance) individual in the population. The offspring will replace this individual if it has a better fitness value. The fitness sharing method [S203], [S209] divides the population into different subgroups according to parameter space similarity of the individuals. An individual must share its information with other individuals within the same niche. The shared fitness for ith individual can be represented by using the following equation: fshared (i) = foriginal(i) N  j=1 sh(dij) (37) where the sharing function is calculated as sh(dij) ...  dij ¥òshare ¥á if dij < ¥òshare 0 otherwise and dij is the distance between individuals i and j, ¥òshare is the sharing radius, N is the population size and ¥á is a constant called sharing level. Thomsen integrated the fitness sharing concept with DE to form the sharing DE [103]. The restricted tournament selection (RTS) method uses tournament selection for multimodal optimization [S204]. The algorithm chooses a random sample of w (window size) individuals from the population and determines the nearest one to the offspring, by using either Euclidean (for real variables) or Hamming (for binary variables) distance measure. The nearest member within the w individuals will compete with the offspring and the one with higher fitness will survive in the next generation. The RTS was implemented with an ensemble of two different window sizes in [81] using the DE as the search method. VI. Analytical Studies on DE Theoretical and empirical analyses of the properties of evolutionary algorithms are very important to understand their search behaviors and to develop more efficient algorithms [S84]. Compared to the plethora of works concerning the empirical study of parameter selection and tuning process in DE, not much research has so far been devoted to theoretically analyze the search mechanism and convergence properties of DE and this area remains largely open to prospective future research. Below, we discuss some of the analytical results so far obtained on DE. A. Population Variance and Explorative Power of DE Some significant theoretical results on DE were first reported in [111] and then extended in [112] and [113] by Zaharie, where she theoretically analyzed the influence of the variation operators (mutation and recombination) and their parameters on the expected population variance. In [111], Zaharie showed that the expected population variance (after applying mutation and recombination, but without selection) of DE is greater than that of the ES algorithm analyzed in [S85]. This finding could explain to some extent the excellent performance of DE on certain test functions. In [114], Zaharie analyzed the impact on the expected population mean and variance of several variants of mutation and crossover operators used in DE algorithms. As a consequence of this analysis, she proposed a simple variance-based mutation operator without using differences but has the same impact on the population variance as classical DE operators proposed. She also presented a preliminary analysis of the distribution probability of the population in the case of a DE algorithm with binary encoding. B. Role of Crossover in DE Very recently in [115], the influence of the crossover rate on the distribution of the number of mutated components and on the probability for a component to be taken from the mutant vector (mutation probability) is theoretically analyzed for several variants of crossover, including classical binomial and exponential strategies in DE. For each crossover variant the relationship between the crossover rate and the mutation probability is identified and its impact on the choice and adaptation of control parameters is analyzed both theoretically and numerically. With numerical experiments, the author illustrates the fact that the difference between binomial and exponential crossover variants is mainly due to different distributions of the number of mutated components. On the other hand, the behavior of exponential crossover variants was found to be more sensitive to the problem size than the behavior of variants based on binomial crossover. C. Evolutionary Search-Dynamics in DE The first theoretical studies on the evolutionary searchdynamics of DE were carried out by Dasgupta et al. in [22] and [23]. The authors proposed a simple mathematical model of the underlying evolutionary dynamics of a 1-D DE-population (evolving with the DE/rand/1/bin algorithm) [22]. The model was based on the fact that DE perturbs each dimension separately and if a D-dimensional objective function is separable, this function can be optimized in a sequence of D 1-D optimization processes. The model reveals that the fundamental dynamics of each search-agent (1-D parameter vector) in DE employs the gradient-descent type search strategy (although it uses no analytical expression for the gradient itself), with a learning rate parameter that depends on control parameters like scale factor F and crossover rate Cr of DE. It is due to the gradient descent type search strategy, that DE converges much faster than some variants of GA or PSO over uni-modal benchmarks [104]. The stability and convergence-behavior of the proposed dynamics was analyzed in the light of Lyapunov¡¯s stability theorems very near to the isolated equilibrium points during the final stages of the search in [23] and the rate of convergence on smooth uni-modal functions were found to largely depend on Cr. However, the analysis undertaken in [22] and [23] appeared to be of very limited scope from a practical point of view, as the authors considered a 1-D fitness landscape. Generalizing it for multi-dimensional search space can be a challenging future research work. Also proving the probabilistic convergence of DE on even very simple objective functions is still an open problem for the theorists working with EAs. 24 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 D. Timing Complexity of DE Runtime-complexity analysis of the population-based stochastic search techniques like DE is a critical issue by its own right. In [120], Zielinski et al. first investigated the runtime complexity of DE for various stopping criteria, both theoretically and empirically. The authors [120] pointed out that in each generation of DE a loop over NP is conducted, containing a loop over D. Since the mutation and crossover operations are performed at the component level for each DE vector, the number of fundamental operations in DE/rand/1/bin is proportional to the total number of loops conducted until the termination of the algorithm. Thus, if the algorithm is stopped after a fixed number of generations Gmax, then the runtime complexity is O(NP ¡¤D¡¤Gmax). Moreover the authors also inferred that maximum distance criterion MaxDist yields best overall performance for the DE algorithm. Note that this criteria stops the execution of the algorithms if the maximum distance from every vector to the best population member is below a given threshold m (say). E. Convergence of Multiobjective DE Recently, Xue et al. [106] performed the mathematical modeling and convergence analysis of continuous multiobjective differential evolution under certain simplifying assumptions. The authors investigated the population evolution of the MODE with only reproduction operators, i.e., the differential mutation and crossover and assuming that that the DE-population is initialized by sampling from a Gaussian distribution with given mean and standard deviation. Using simple mathematics, they prove that the initial population P0 is Gaussian distributed and contains the Pareto optimal set  ., the subsequent populations generated by the MODE without selection are also Gaussian distributed and the population mean converges to the center of the Pareto optimal set  ., i.e., if XG be a solution vector belonging to the population PG at generation G, then lim G¡æ¡Ä E(XG) = X . (38) where X . is a random solution uniformly distributed on the probability support defined by  .. The works were extended in [107] by modeling a discrete version of MODE, D-MODE, in the framework of Markov processes and the corresponding convergence properties were developed. However, in most practical situations with finite population size, the optimal solutions will not be present in the initial population. The exploration of MODE would identify the global optimal solution during the evolutionary process and the selection operator would keep those optimal solutions found in the evolution. Mathematical analysis of convergence under such situations is yet to be developed. VII. Engineering Applications of DE Due to the rapidly growing popularity of DE as a simple and robust optimizer, researchers from several domains of science and engineering have been applying DE to solve optimization problems arising in their own fields. The literature on engineering applications of DE is huge and multifaceted. An internet search reveals that the number of DE research articles indexed in SCI database over the span of 2007. July 2009 is 3964 and out of these, there are more than thousands of application papers in diverse areas. For the sake of space economy, in Tables I and II we summarize only the major applications, where DE has been employed to solve the optimization problem, along with the type of the DE used, and the major publications associated with the application. A keen observation of Tables I and II reveals that practitioners mostly prefer to use the classical DE schemes like DE/rand/1/bin, DE/target-to-best/1/bin, and so on for solving domain-specific problems. More research is necessary in order to investigate the applicability of the most state-of-the-art DE-variants (like SaDE [76], DEGL [21], and ODE [82]) outlined in Section IV for obtaining improved performances on practical problems. Specific applications may bear some properties that make it worthwhile revisiting or extending DE so that the optimization matches the problem in the best possible way. Generally any knowledge about the problem should be incorporated into the optimization method and/or the objective function in order to make it more efficient. The interested readers are redirected to appropriate references for details of the applications wherever necessary. Elaborations on some of the applications cited above are available in [71] and [78]. VIII. Drawbacks of DE Like all other metaheuristics, DE also has some drawbacks which we must take a look at before proceeding to the discussion on future research directions with DE. Some of the recent publications [85], [S179] indicate that DE faces significant difficulty on functions that are not linearly separable and can be outperformed by CMA-ES. As pointed out by Sutton et al. [96], on such functions, DE must rely primarily on its differential mutation procedure, which, unlike its recombination strategy (with Cr < 1), is rotationally invariant. In [96], the authors also conjecture that this mutation strategy lacks sufficient selection pressure when appointing target and donor vectors to have satisfactory exploitative power on nonseparable functions. The authors also propose a rank-based parent selection scheme to impose bias on the selection step, so that DE may also learn distribution information from elite individuals in the population and can thus sample the local topology of the fitness landscape better. However, they ended up with the opinion that much more research is necessary in this area to make DE sufficiently robust against the strong interdependency of the search variables. Experimenting with different selection procedures that may increase the generational selective pressure between parents and offspring may also serve as another avenue of future work. In [44], Langdon and Poli made an attempt to evolve certain fitness landscapes with GP in order to demonstrate the benefits and weaknesses of a few population-based metaheuristics like PSO, DE, and CMA-ES. They pointed out that some problem landscapes may deceive DE such that it will get stuck in local optima most of the time; however, over similar landscapes DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 25 PSO will always find the global optima correctly within a maximum time-bound. The authors also indicated that DE sometimes has a limited ability to move its population large distances across the search space if the population is clustered in a limited portion of it. Indeed, in [S180, p. 20], the authors noted that the performance of DE deteriorates on the spiral ¡°long path problem.¡± The work in [44] also identified some landscape in which DE is outperformed by CMA-ES and a non-random gradient search based on Newton-Raphson¡¯s method (abbreviated as N-R in [S180]). A good amount of future research is needed to remove these drawbacks of DE. Also the most effective DE-variants developed so far should be investigated with the problem evolution methodology of Langdon and Poli, to identify their specific weak points over different function surfaces. IX. Potential Future Research Directions with DE Although during the last ten years, research on and with DE has reached an impressive state, there are still many open problems and new application areas are continually emerging for the algorithm. Below, we unfold some important future directions of research in the area of DE. 1) Like many other EAs, the mutation schemes employed by DE are also additive and the donor (mutant), the scaled difference, and the target vectors lie in the same hyper-plane (see Fig. 2). Is it possible to think of a new rotation-based mutation operation where the base vector is first rotated in D-dimensional hyperspace and then perturbed with the scaled difference vector? In this case the rotation will be accomplished by pre-multiplying the base vector with a D¡¿ D linear transformation matrix Q and the donor vector will be formed as V i,G = Q.Xri1 ,G + F ¡¤ (Xri2 ,G . Xri3 ,G). Consider a parameter vector Xi,G with each xj,i,G ¡ô [.a, a] (say) for j = 1, 2...D. Then as per Section IV-D, each component of the opposite vector XO i,G is formed as xO j,i,G = (.a + a) . xj,i,G = .xj,i,G and thus X O i,G = .Xi,G. Evidently, for symmetric search intervals, generation of an opposite vector amounts to rotating the actual vector by 180¡Æ. This technique has been used in ODE to improve the performance of DE. Hence, we propose to generalize this concept, i.e., rotating the mutant vectors at different angles, along with suitable self-adaptation schemes for the rotation matrix Q to improve the explorative power and thus efficiency of DE to a large extent. 2) The effectiveness of conventional DE in solving a numerical optimization problem depends on the selected mutation strategy and its associated parameter values. However, different optimization problems require different mutation strategies with different parameter values depending on the nature of problem (unimodal and multimodal) and available computation resources. In addition, to solve a specific problem, different mutation strategies with different parameter settings may be better during different stages of the evolution than a single mutation strategy with unique parameter settings as in the conventional DE. In the area of machine learning the concept of combining classifiers in an ensemble [S197] is employed to improve the overall classification performance. These classifiers could be based on a variety of classification methodologies. Similar concept was used [53] in conjunction with DE by forming an ensemble of mutation strategies and parameter values where a pool of mutation strategies, along with a pool of values corresponding to each associated parameter competes to produce successful offspring population. The candidate pool of mutation strategies and parameters should be restrictive to avoid the unfavorable influences of less effective mutation strategies and parameters. The mutation strategies or the parameters present in a pool should have diverse characteristics, so that they can exhibit distinct performance characteristics during different stages of the evolution, when dealing with a particular problem. This approach differs from SaDE as the latter adapts the parameter values slowly while the ensemble approach allows the parameters to jump to any appropriate value. This ensemble approach can be investigated further with enhanced mutation strategies and with different crossover approaches to solve different problem scenarios. 3) Future research may focus on integrating the oppositionnumber based initialization and generation jumping with self-adaptive DE variants like SaDE for improving the performance of the later. DEGL [21] puts forward the concept of topological neighborhood (ring shaped) of the population members for devising a local mutation scheme. The effect of various neighborhood topologies (star-shaped, wheel-shaped, fully connected, and so on) on the performance of DEGL should be investigated in future. Integrating DEGL in ensemble of DE schemes [S210], [52], [80], [100] should also be studied in the future. 4) Unlike the significant advancement made in the theoretical understanding of GAs, ES, and EP (see [S84], [S174].[S176]) analysis of DE family of algorithms has still not made a considerable progress. Especially an investigation of the probabilistic convergence properties of DE even on some very simple objective functions remains largely an open problem so far. Concepts like drift analysis, martingale theory [S177] and stochastic Lyapunov energy functions [S178] that have already been applied to the convergence analysis of other real coded EAs may also be investigated in context to DE. 5) Sutton et al. conjectured in [96] that over DE¡¯s weak selective pressure (due to unbiased selection of parents or target vectors) may result in inefficient exploitation when relying on differential mutation, especially on the rotated optimization problems. The authors proposed a rank-based parent selection scheme. It is obtained by sorting the population by fitness and then drawing the indices for base vector and other vectors that constitute 26 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 TABLE I Summary of Applications of DE to Engineering Optimization Problems Sub Areas and Details Types of DE Applied and References Electrical Power Systems Economic dispatch Optimal power flow Power system planning, generation expansion planning Capacitor placement Distribution systems¡¯ network reconfiguration Power filter, power system stabilizer Chaotic DE [S31], hybrid DE with acceleration and migration [S87], DE/rand/1/bin [S88], hybrid DE with improved constraint handling [S89], variable scaling hybrid DE [S90] DE/target-to-best/1/bin [S91], cooperative co-evolutionary DE [S92], DE/rand/1/bin with non-dominated sorting [S93], conventional DE/rand/1/bin [S94], [S96], DE with random localization [S95]. Modified DE with fitness sharing [S97], conventional DE/rand/1/bin [S98], comparison of 10 DE strategies of Storn and Price [S99], robust searching hybird DE [S100] Hybrid of ant system and DE [S49] Hybrid DE with variable scale factor [S101], mixed integer hybrid DE [S185]. Hybrid DE with acceleration and migration operators [S102], DE/targetto- best/1/bin [S103], hybrid of DE with ant systems [S104] Electromagnetism, Propagation, and Microwave Engineering Capacitive voltage divider Electromagnetic inverse scattering Design of circular waveguide mode converters Parameter estimation and property analysis for electromagnetic devices, materials, and machines Electromagnetic imaging Antenna array design MODE and NSDE [S105] DE/rand/1/bin [S106], conventional DE with individuals in groups [S107], dynamic DE [77] DE/rand/1/bin [S108] DE/rand/1/bin [S109].[S111], [S113], DE/target-to-best/1/bin [S112] Conventional DE/rand/1/bin [S114], [S115], DE/best/1/bin [S116] Multimember DE (see [93] for details) [S117], hybrid real/integer-coded DE [S118], DE/rand/1/bin [S119], [S120], modified DE with refreshing distribution operator and fittest individual refinement operator [S121], DE/best/1/bin [S122], MOEA/D-DE [68], [69] Control Systems and Robotics System identification Optimal control problems Controller design and tuning Aircraft control Nonlinear system control Simultaneous localization and modeling problem Robot motion planning and navigation Cartesian robot control Multi-sensor data fusion Conventional DE/rand/1/bin [S123].[S126] DE/rand/1/bin and DE/best/2/bin [S127], modified DE with adjustable control weight gradient methods [S128]. Self adaptive DE [S129], DE/rand/1 with arithmetic crossover [S130], DE/rand/1/bin with random scale factor and time-varying Cr [S131]. Hybrid DE with downhill simplex local optimization [55]. Hybrid DE with convex mutation [15]. DE/rand/1/bin [S132], [S133] DE/rand/1/bin [S134], [S135] Memetic compact DE [61] DE/best/2/bin [S136] DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 27 TABLE II Summary of Applications of DE to Engineering Optimization Problems (Continued from Table I) Sub Areas and Details Types of DE Applied and References Bioinformatics Gene regulatory networks Micro-array data analysis Protein folding Bioprocess optimization DE with adaptive local search (see [22] for details) [63], hybrid of DE and PSO [S137] Multiobjective DE-variants (MODE, DEMO) [S138] DE/rand/1/bin [S139] DE/rand/1/bin [S140] Chemical Engineering Chemical process synthesis and design Phase equilibrium and phase study Parameter estimation of chemical process Modified DE with single array updating [S141], [7], 10 DE-variants of Storn and Price (see [74], [75]) compared in [S142], [S144], multiobjective DE [S143], hybrid DE with migration and acceleration operators [S145]. DE/rand/1/bin [S146]. Hybrid DE with geometric mean mutation [S147], DE/target-tobest/ 1/exp [S148]. Pattern Recognition and Image Processing Data clustering Pixel clustering and regionbased image segmentation Feature extraction Image registration and enhancement Image Watermarking DE/rand/1/bin [S149], DE with random scale factor and time-varying crossover rate [20], DE with neighborhood-based mutation [S150] Modified DE with local and global best mutation [S151], DE with random scale factor and time-varying crossover rate [S152]. DE/rand/1/bin [S153] DE/rand/1/bin [S154], DE with chaotic local search [S155] DE/rand/1/bin and DE/target-to-best/1/bin [S156] Artificial Neural Networks Training of feed-forward ANNs Training of wavelet neural networks Training of B-Spline neural networks DE/rand/1/bin [S157], [S160], generalization-based DE (GDE) [S158], DE/target-to-best/1/bin [S159] DE/rand/1/bin [S161] DE with chaotic sequence-based adjustment of scale factor F [S162] Signal Processing Non-linear ¥ó estimation Digital filter design Fractional order signal processing Dynamic DE [S163] DE/rand/1/bin [S164], [S165], DE with random scale factor [S166] DE/rand/1/bin [S167] Others Layout synthesis for MEMS Engineering design Manufacturing optimization Molecular configuration Urban energy management Optoelectronics Chess evaluation function tuning Improved DE with stochastic ranking (SR) [S168] DE/rand/1/bin [S169], multimember constraint adaptive DE [93] DE/rand/1/bin [S170], hybrid DE with forward/backward transformation [S171] Local search-based DE [S172] Hybrid of DE and CMA-ES [S173] DE/target-to-best/1/bin [S186] DE/rand/1/bin [S228] 28 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 the difference vectors from a linear distribution function [S198], such that the top ranked individual is more likely to be selected than the one with poorer rank. Since high selective pressure can often cause rapid loss of diversity of the population, in order to obtain a better balance between exploration and exploitation (even when the parent selection is biased), a time-varying selection pressure is necessary. One interesting way to achieve this is to introduce an annealing schedule to the bias controlling term of the linear distribution function, such that at the beginning stage of the search the probability of selecting a top ranked individual is small (thus favoring exploration) and it gradually grows with the intensification of the search so that good exploitation can be achieved during the later stages. Also it is worthy to investigate the effect of tournament selection instead of rank-based selection that necessitates the sorting of the population at each generation. 6) In an EA, exploration is directly connected with enabling the algorithm to advance from one optimum to another. In the EA-literature, a less common exploration mechanism is saddle crossing [S199], which consists in gradual change of the position of the whole population along the saddle that connects two adjacent attraction basins of local maxima. Saddle crossing usually takes a few generations and is accompanied with a temporary decrease of the mean population fitness. Fitness proportionate selection without elitism is reported to be the most appropriate to promote saddle crossing, since is implies relatively soft selection [S199]. DE usually employs a very hard selection criterion with one-to-one competition between a parent and its offspring. For this reason, DE is very sensitive to the choice of the initial population and may suffer from the premature convergence [94]. A very interesting future research topic may be to integrate the mutation operator taken from DE with the non-elitist, fitness proportionate selection, without crossover that can result in good saddle crossing abilities of an EA [S200]. This can significantly reduce the risk of premature convergence, even in the case of unfortunate population initialization nearby a local optimum with a large attraction basin. 7) Combinatorial optimization problems deal with discrete parameters and can be found profusely in diverse domains of engineering. As pointed out in Section IV-H, DE already achieved some reputation of solving discrete, binary and mixed-integer problems. However, there is no good evidence so far that DE is applicable to strict-sense combinatorial problems, especially when they are heavily constrained. In [74], the authors discussed the topic of combinatorial problems and they attributed the success of DE-based solutions to combinatorial problems to well-chosen repair mechanisms in the algorithm rather than DE-mutation. Therefore, proving the applicability of DE to strict-sense combinatorial problems remains an open problem so far. Finding a discrete operator that corresponds to the difference vector in the continuous domain is also a challenging issue for future research. Moreover, in discrete DE-variants, it is required that the combination of a base vector and a difference vector (or recombination vector) yields a new valid vector. The validity of the newly generated vector is a big problem for most of the classical combinatorial problems like the traveling salesperson problem. 8) Many objective optimization problems [S181], [S182] typically deal with more than three objective functions. Many conventional MOEAs applying Pareto optimality as a ranking metric may perform poorly over a large number of objective functions. Extending the multiobjective variants of DE to solve many-objective problems remains open as a challenging field of future research so far. X. Conclusion With the increasing complexity of real world optimization problems, demand for robust, fast, and accurate optimizers is on the rise among researchers from various fields. DE emerged as a simple and efficient scheme for global optimization over continuous spaces more than a decade ago. Over the past few years, many researchers have contributed to make it a general and fast optimization method for any kind of objective function by twisting and tuning the various constituents of DE, i.e., initialization, mutation, diversity enhancement, and selection of DE as well as by the choice of the control variables, even though the NFL [S25] suggested already that such a cure-alloptimization algorithm could not exist. Nonetheless the existing literature clearly indicates that DE exhibits remarkable performance in optimizing a wide variety of multi-dimensional, multiobjective and multimodal optimization problems. This paper attempted to provide an overall picture of the state-of-the-art research on and with DE. Starting with a comprehensive introduction to the basic steps of the DE algorithm, it discussed the different schemes of parameter control and adaptation for DE and then overviewed several promising variants of the conventional DE. Next it provided an extensive review of the modifications of DE for tackling constrained, multiobjective, uncertain, and large-scale optimization problems. It gave a brief overview of various most significant engineering applications of DE and unfolded a number of future research directions as well. The content of the paper indicates the fact that DE will continue to remain a vibrant and active field of multi-disciplinary research in the years to come. References [1] H. Abbass, ¡°The self-adaptive Pareto differential evolution algorithm,¡± in Proc. Congr. Evol. Comput., vol. 1. May 2002, pp. 831.836. [2] H. A. Abbass and R. Sarker, ¡°The Pareto differential evolution algorithm,¡± Int. J. Artif. Intell. Tools, vol. 11, no. 4, pp. 531.552, 2002. [3] M. M. Ali and A. Torn, ¡°Population set based global optimization algorithms: Some modifications and numerical studies,¡± Comput. Oper. Res., vol. 31, no. 10, pp. 1703.1725, 2004. [4] M. M. Ali and Z. Kajee-Bagdadi, ¡°A local exploration-based differential evolution algorithm for constrained global optimization,¡± Appl. Math. Comput., vol. 208, no. 1, pp. 31.48, Feb. 2009. [5] R. Angira and A. Santosh, ¡°Optimization of dynamic systems: A trigonometric differential evolution approach,¡± Comput. Chem. Eng., vol. 31, no. 9, pp. 1055.1063, Sep. 2007. DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 29 [6] B. V. Babu and M. M. L. Jehan, ¡°Differential evolution for multiobjective optimization,¡± in Proc. Congr. Evol. Comput., vol. 4. Dec. 2003, pp. 2696.2703. [7] B. V. Babu and R. Angira, ¡°Modified differential evolution (MDE) for optimization of non-linear chemical processes,¡± Comput. Chem. Eng., vol. 30, nos. 6.7, pp. 989.1002, 2006. [8] H.-G. Beyer and K. Deb, ¡°On self-adapting features in real-parameter evolutionary algorithms,¡± IEEE Trans. Evol. Comput., vol. 5, no. 3, pp. 250.270, Jun. 2001. [9] A. Biswas, S. Dasgupta, S. Das, and A. Abraham, ¡°A synergy of differential evolution and bacterial foraging algorithm for global optimization,¡± Neural Netw. World, vol. 17, no. 6, pp. 607.626, 2007. [10] J. Brest, S. Greiner, B. Bo¢§skovi¢¥c, M. Mernik, and V. ¢§Zumer, ¡°Selfadapting control parameters in differential evolution: A comparative study on numerical benchmark problems,¡± IEEE Trans. Evol. Comput., vol. 10, no. 6, pp. 646.657, Dec. 2006. [11] J. Brest and M. S. Maueec, ¡°Population size reduction for the differential evolution algorithm,¡± Appl. Intell., vol. 29, no. 3, pp. 228.247, Dec. 2008. [12] J. Brest, A. Zamuda, B. Boskovic, M. S. Maucec, and V. Zumer, ¡°Highdimensional real-parameter optimization using self-adaptive differential evolution algorithm with population size reduction,¡± in Proc. IEEE Congr. Evol. Comput., Jun. 2008, pp. 2032.2039. [13] J. Brest, A. Zamuda, B. Boskovic, M. S. Maucec, and V. Zumer, ¡°Dynamic optimization using self-adaptive differential evolution,¡± in Proc. IEEE Congr. Evol. Comput., May 2009, pp. 415.422. [14] A. Caponio, F. Neri, and V. Tirronen, ¡°Super-fit control adaptation in memetic differential evolution frameworks,¡± Soft Comput. A Fusion Found. Methodol. Applicat., vol. 13, no. 8, pp. 811.831, 2009. [15] C.-H. Chen, C.-J. Lin, and C.-T. Lin, ¡°Nonlinear system control using adaptive neural fuzzy networks based on a modified differential evolution,¡± IEEE Trans. Syst. Man Cybern. Part C, vol. 39, no. 4, pp. 459.473, Jul. 2009. [16] S. Das, A. Konar, and U. K. Chakraborty, ¡°Improving particle swarm optimization with differentially perturbed velocity,¡± in Proc. Genet. Evol. Comput. Conf., Jun. 2005, pp. 177.184. [17] S. Das, A. Konar, and U. K. Chakraborty, ¡°Two improved differential evolution schemes for faster global search,¡± in Proc. ACM-SIGEVO GECCO, Jun. 2005, pp. 991.998. [18] S. Das, A. Konar, and U. Chakraborty, ¡°Improved differential evolution algorithms for handling noisy optimization problems,¡± in Proc. IEEE Congr. Evol. Comput., vol. 2. 2005, pp. 1691.1698. [19] S. Das, A. Konar, and U. K. Chakraborty, ¡°Annealed differential evolution,¡± in Proc. IEEE Congr. Evol. Comput., 2007, pp. 1926.1933. [20] S. Das, A. Abraham, and A. Konar, ¡°Automatic clustering using an improved differential evolution algorithm,¡± IEEE Trans. Syst. Man Cybern. Part A, vol. 38, no. 1, pp. 218.236, Jan. 2008. [21] S. Das, A. Abraham, U. K. Chakraborty, and A. Konar, ¡°Differential evolution using a neighborhood based mutation operator,¡± IEEE Trans. Evol. Comput., vol. 13, no. 3, pp. 526.553, Jun. 2009. [22] S. Dasgupta, S. Das, A. Biswas, and A. Abraham, ¡°The population dynamics of differential evolution: A mathematical model,¡± in Proc. IEEE Congr. Evol. Comput., Jun. 2008, pp. 1439.1446. [23] S. Dasgupta, S. Das, A. Biswas, and A. Abraham, ¡°On stability and convergence of the population-dynamics in differential evolution,¡± AI Commun., vol. 22, no. 1, pp. 1.20, 2009. [24] K. Deb and H.-G. Beyer, ¡°Self-adaptive genetic algorithms with simulated binary crossover,¡± Evol. Comput., vol. 9, no. 2, pp. 197. 221, Jun. 2001. [25] H.-Y. Fan and J. Lampinen, ¡°A trigonometric mutation operation to differential evolution,¡± J. Global Optimization, vol. 27, no. 1, pp. 105. 129, 2003. [26] V. Feoktistov and S. Janaqi, ¡°Generalization of the strategies in differential evolution,¡± in Proc. 18th IPDPS, Apr. 2004, p. 165a. [27] Y. Gao and Y. Wang, ¡°A memetic differential evolutionary algorithm for high dimensional function spaces optimization,¡± in Proc. 3rd ICNC 20, vol. 4. Aug. 2007, pp. 188.192. [28] V. L. Huang, A. K. Qin, and P. N. Suganthan, ¡°Self-adaptive differential evolution algorithm for constrained real-parameter optimization,¡± in Proc. IEEE Congr. Evol. Comput., Jul. 2006, pp. 324.331. [29] V. L. Huang, A. K. Qin, P. N. Suganthan, and M. F. Tasgetiren, ¡°Multiobjective optimization based on self-adaptive differential evolution algorithm,¡± in Proc. Congr. Evol. Comput., Sep. 2007, pp. 3601.3608. [30] V. L. Huang, S. Z. Zhao, R. Mallipeddi, and P. N. Suganthan, ¡°Multiobjective optimization using self-adaptive differential evolution algorithm (special session and competition on ¡®performance assessment of constrained/ bound constrained multiobjective optimization algorithms¡¯),¡± in Proc. Conf. Congr. Evol. Comput., May 2009, pp. 190.194. [31] F. Huang, L. Wang, and Q. He, ¡°An effective co-evolutionary differential evolution for constrained optimization,¡± Appl. Math. Comput., vol. 186, no. 1, pp. 340.356, Mar. 2007. [32] A. W. Iorio and X. Li, ¡°Solving rotated multiobjective optimization problems using differential evolution,¡± in Proc. AI: Adv. Artif. Intell., LNCS 3339. 2004, pp. 861.872. [33] P. Kaelo and M. M. Ali, ¡°Differential evolution algorithms using hybrid mutation,¡± Comput. Optimization Applicat., vol. 37, pp. 231.246, Jun. 2007. [34] T. Krink, B. Filipi¢§c, and G. B. Fogel, ¡°Noisy optimization problems: A particular challenge for differential evolution,¡± in Proc. IEEE Congr. Evol. Comput., 2004, pp. 332.339. [35] S. Kukkonen and J. Lampinen, ¡°GDE3: The third evolution step of generalized differential evolution,¡± in Proc. IEEE Congr. Evol. Comput., vol. 1. Sep. 2005, pp. 443.450. [36] S. Kukkonen and J. Lampinen, ¡°Constrained real-parameter optimization with generalized differential evolution,¡± in Proc. IEEE Congr. Evol. Comput., Jul. 2006, pp. 911.918. [37] J. Lampinen, ¡°A bibliography of differential evolution algorithm,¡± Lab. Inform. Process., Dept. Inform. Technol., Lappeenranta Univ. Technol., Lappeenranta, Finland, Tech. Rep., 1999 [Online]. Available: http://www.lut.fi/¡­jlampine/debiblio.htm [38] J. Lampinen, ¡°Differential evolution: New naturally parallel approach for engineering design optimization,¡± in Developments in Computational Mechanics with High Performance Computing, B. H. V. Topping, Ed. Edinburgh, U.K.: Civil-Comp Press, 1999, pp. 217.228. [39] J. Lampinen, ¡°A constraint handling approach for the differential evolution algorithm,¡± in Proc. Congr. Evol. Comput., vol. 2. May 2002, pp. 1468.1473. [40] J. Lampinen and I. Zelinka, ¡°Mixed integer-discrete-continuous optimization with differential evolution,¡± in Proc. 5th Int. Mendel Conf. Soft Comput., Jun. 1999, pp. 71.76. [41] J. Lampinen and I. Zelinka, ¡°On stagnation of the differential evolution algorithm,¡± in Proc. 6th Int. Mendel Conf. Soft Comput., Jun. 2000, pp. 76.83. [42] R. Landa Becerra and C. A. Coello Coello, ¡°Solving hard multiobjective optimization problems using ¥å-constraint with cultured differential evolution,¡± in Proc. 9th Int. Conf. Parallel Problem Solving Nature, LNCS 4193. Sep. 2006, pp. 543.552. [43] R. Landa Becerra and C. A. Coello Coello, ¡°Cultured differential evolution for constrained optimization,¡± Comput. Methods Appl. Mech. Eng., vol. 195, nos. 33.36, pp. 4303.4322, Jul. 2006. [44] W. B. Langdon and R. Poli, ¡°Evolving problems to learn about particle swarm optimizers and other search algorithms,¡± IEEE Trans. Evol. Comput., vol. 11, no. 5, pp. 561.578, Oct. 2007. [45] C. Li, S. Yang, T. T. Nguyen, E. L. Yu, X. Yao, Y. Jin, H.-G. Beyer, and P. N. Suganthan, ¡°Benchmark generator for CEC¡¯2009 competition on dynamic optimization,¡± Univ. Leicester, Leicester, U.K., Univ. Birmingham, U.K., Nanyang Technological Univ., Singapore, Tech. Rep., Sep. 2008. [46] H. Li and Q. Zhang, ¡°Multiobjective optimization problems with complicated Pareto sets, MOEA/D and NSGA-II,¡± IEEE Trans. Evol. Comput., vol. 13, no. 2, pp. 284.302, Apr. 2009. [47] J. J. Liang, T. P. Runarsson, E. Mezura-Montes, M. Clerc, P. N. Suganthan, C. A. Coello Coello, and K. Deb, ¡°Problem definitions and evaluation criteria for the CEC 2006 (special session on constrained real-parameter optimization),¡± Nanyang Technol. Univ., Singapore, Tech. Rep., 2006. [48] J. Liu and J. Lampinen, ¡°A fuzzy adaptive differential evolution algorithm,¡± Soft Comput. A Fusion Founda. Methodol. Applicat., vol. 9, no. 6, pp. 448.462, 2005. [49] B. Liu, X. Zhang, and H. Ma, ¡°Hybrid differential evolution for noisy optimization,¡± in Proc. IEEE Congr. Evol. Comput., Jun. 2008, pp. 587.592. [50] R. Mallipeddi and P. N. Suganthan, ¡°Empirical study on the effect of population size on differential evolution algorithm,¡± in Proc. IEEE Congr. Evol. Comput., Jun. 2008, pp. 3663.3670. [51] R. Mallipeddi and P. N. Suganthan, ¡°Differential evolution algorithm with ensemble of populations for global numerical optimization,¡± OPSEARCH, vol. 46, no. 2, pp. 184.213, Jun. 2009. [52] R. Mallipeddi and P. N. Suganthan, ¡°Ensemble of constraint handling techniques,¡± IEEE Trans. Evol. Comput., vol. 14, no. 4, pp. 561.579, Aug. 2010. [53] R. Mallipeddi, P. N. Suganthan, Q. K. Pan, and M. F. Tasgetiren, ¡°Differential evolution algorithm with ensemble of param- 30 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 15, NO. 1, FEBRUARY 2011 eters and mutation strategies,¡± Appl. Soft Comput., to be published. [54] R. Mendes and A. S. Mohais, ¡°DynDE: A differential evolution for dynamic optimization problems,¡± in Proc. IEEE Congr. Evol. Comput., vol. 2. 2005, pp. 2808.2815. [55] P. P. Menon, J. Kim, D. G. Bates, and I. Postlethwaite, ¡°Clearance of nonlinear flight control laws using hybrid evolutionary optimization,¡± IEEE Trans. Evol. Comput., vol. 10, no. 6, pp. 689.699, Dec. 2006. [56] E. Mezura-Montes, J. Vel¢¥azquez-Reyes, and C. A. Coello Coello, ¡°A comparative study of differential evolution variants for global optimization,¡± in Proc. Genet. Evol. Comput. Conf., 2006, pp. 485. 492. [57] E. Mezura-Montes, J. Vel¢¥azquez-Reyes, and C. A. Coello Coello, ¡°Modified differential evolution for constrained optimization,¡± in Proc. IEEE Congr. Evol. Comput., Jul. 2006, pp. 332.339. [58] P. W. Moore and G. K. Venayagamoorthy, ¡°Evolving digital circuit using hybrid particle swarm optimization and differential evolution,¡± Int. J. Neural Syst., vol. 16, no. 3, pp. 163.177, 2006. [59] F. Neri and V. Tirronen, ¡°Scale factor local search in differential evolution,¡± Memetic Comput., vol. 1, no. 2, pp. 153.171, Jun. 2009. [60] F. Neri and V. Tirronen, ¡°Recent advances in differential evolution: A review and experimental analysis,¡± Artif. Intell. Rev., vol. 33, no. 1, pp. 61.106, Feb. 2010. [61] F. Neri and E. Mininno, ¡°Memetic compact differential evolution for Cartesian robot control,¡± IEEE Comput. Intell. Mag., vol. 5, no. 2, pp. 54.65, May 2010. [62] N. Noman and H. Iba, ¡°Enhancing differential evolution performance with local search for high dimensional function optimization,¡± in Proc. Conf. Genet. Evol. Comput., Jun. 2005, pp. 967.974. [63] N. Noman and H. Iba, ¡°Inferring gene regulatory networks using differential evolution with local search heuristics,¡± IEEE/ACM Trans. Comput. Biol. Bioinform., vol. 4, no. 4, pp. 634.647, Oct. 2007. [64] N. Noman and H. Iba, ¡°Accelerating differential evolution using an adaptive local search,¡± IEEE Trans. Evol. Comput., vol. 12, no. 1, pp. 107.125, Feb. 2008. [65] M. G. H. Omran, A. Salman, and A. P. Engelbrecht, ¡°Self-adaptive differential evolution,¡± in Proc. Comput. Intell. Security, Lecture Notes in Artificial Intelligence 3801. 2005, pp. 192.199. [66] M. G. H. Omran, A. P. Engelbrecht, and A. Salman, ¡°Bare bones differential evolution,¡± Eur. J. Oper. Res., vol. 196, no. 1, pp. 128. 139, Jul. 2009. [67] G. Pampara, A. P. Engelbrecht, and N. Franken, ¡°Binary differential evolution,¡± in Proc. IEEE Congr. Evol. Comput., Jul. 2006, pp. 1873. 1879. [68] S. Pal, Q. Boyang, S. Das, and P. N. Suganthan, ¡°Optimal synthesis of linear antenna arrays with multiobjective differential evolution,¡± Prog. Electromag. Res. PIERB, vol. 21, pp. 87.111, 2010. [69] S. Pal, S. Das, A. Basak, and P. N. Suganthan, ¡°Synthesis of difference patterns for monopulse antennas with optimal combination of array-size and number of subarrays: A multiobjective optimization approach,¡± Prog. Electromag. Res. PIERB, vol. 21, pp. 257.280, 2010. [70] K. E. Parsopoulos, D. K. Taoulis, N. G. Pavlidis, V. P. Plagianakos, and M. N. Vrahatis, ¡°Vector evaluated differential evolution for multiobjective optimization,¡± in Proc. Congr. Evol. Comput., vol. 1. Jun. 2004, pp. 204.211. [71] V. P. Plagianakos, D. K. Tasoulis, and M. N. Vrahatis, ¡°A review of major application areas of differential evolution,¡± in Advances in Differential Evolution, SCI 143, U. K. Chakraborty, Ed. Berlin, Germany: Springer, 2008, pp. 197.238. [72] K. V. Price, ¡°Differential evolution vs. the functions of the 2nd ICEO,¡± in Proc. IEEE Int. Conf. Evol. Comput., Apr. 1997, pp. 153.157. [73] K. V. Price and R. Storn, ¡°Differential evolution: A simple evolution strategy for fast optimization,¡± Dr. Dobb¡¯s J., vol. 22, no. 4, pp. 18.24, 1997. [74] K. Price, R. Storn, and J. Lampinen, Differential Evolution.A Practical Approach to Global Optimization. Berlin, Germany: Springer, 2005. [75] K. V. Price, ¡°An introduction to differential evolution,¡± in New Ideas in Optimization, D. Corne, M. Dorigo, and V. Glover, Eds. London, U.K.: McGraw-Hill, 1999, pp. 79.108. [76] A. K. Qin, V. L. Huang, and P. N. Suganthan, ¡°Differential evolution algorithm with strategy adaptation for global numerical optimization,¡± IEEE Trans. Evol. Comput., vol. 13, no. 2, pp. 398.417, Apr. 2009. [77] A. Qing, ¡°Dynamic differential evolution strategy and applications in electromagnetic inverse scattering problems,¡± IEEE Trans. Geosci. Remote Sensing, vol. 44, no. 1, pp. 116.125, Jan. 2006. [78] A. Qing, Differential Evolution.Fundamentals and Applications in Electrical Engineering. New York: Wiley, Sep. 2009. [79] B. Y. Qu and P. N. Suganthan, ¡°Multiobjective evolutionary algorithms based on the summation of normalized objectives and diversified selection,¡± Inform. Sci., vol. 180, no. 17, pp. 3170.3181, Sep. 2010. [80] B. Y. Qu and P. N. Suganthan, ¡°Constrained multiobjective optimization algorithm with ensemble of constraint handling methods,¡± Eng. Optimization, to be published. [81] B. Y. Qu and P. N. Suganthan, ¡°Novel multimodal problems and differential evolution with ensemble of restricted tournament selection,¡± in Proc. IEEE Congr. Evol. Comput., Jul. 2010, pp. 3480.3486. [82] S. Rahnamayan, H. R. Tizhoosh, and M. M. A. Salama, ¡°Oppositionbased differential evolution,¡± IEEE Trans. Evol. Comput., vol. 12, no. 1, pp. 64.79, Feb. 2008. [83] T. Robic and B. Filipic, ¡°DEMO: Differential evolution for multiobjective optimization,¡± in Proc. 3rd Int. Conf. Evol. Multi-Criterion Optimization, LNCS 3410. 2005, pp. 520.533. [84] J. Ronkkonen and J. Lampinen, ¡°On using normally distributed mutation step length for the differential evolution algorithm,¡± in Proc. 9th Int. Conf. Soft Comput. MENDEL, 2003, pp. 11.18. [85] J. Ronkkonen, S. Kukkonen, and K. V. Price, ¡°Real parameter optimization with differential evolution,¡± in Proc. IEEE CEC, vol. 1. 2005, pp. 506.513. [86] L. V. Santana-Quintero and C. A. Coello Coello, ¡°An algorithm based on differential evolution for multiobjective problems,¡± Int. J. Comput. Intell. Res., vol. 1, no. 2, pp. 151.169, 2005. [87] L. V. Santana-Quintero, A. G. Hernandez-Diaz, J. Molina, C. A. Coello Coello, and R. Caballero, ¡°DEMORS: A hybrid multiobjective optimization algorithm using differential evolution and rough sets for constrained problems,¡± Comput. Oper. Res., vol. 37, no. 3, pp. 470.480, Mar. 2010. [88] R. Storn and K. V. Price, ¡°Differential evolution: A simple and efficient adaptive scheme for global optimization over continuous spaces,¡± ICSI, USA, Tech. Rep. TR-95-012, 1995 [Online]. Available: http://icsi.berkeley.edu/¡­storn/litera.html [89] R. Storn and K. V. Price, ¡°Minimizing the real functions of the ICEC 1996 contest by differential evolution,¡± in Proc. IEEE Int. Conf. Evol. Comput., 1996, pp. 842.844. [90] R. Storn, ¡°On the usage of differential evolution for function optimization,¡± in Proc. North Am. Fuzzy Inform. Process. Soc., 1996, pp. 519.523. [91] R. Storn, ¡°Differential evolution design of an IIR-filter with requirements for magnitude and group delay,¡± in Proc. IEEE Int. Conf. Evol. Comput., 1996, pp. 268.273. [92] R. Storn and K. Price, ¡°Differential evolution: A simple and efficient heuristic for global optimization over continuous spaces,¡± J. Global Optimization, vol. 11, no. 4, pp. 341.359, 1997. [93] R. Storn, ¡°System design by constraint adaptation and differential evolution,¡± IEEE Trans. Evol. Comput., vol. 3, no. 1, pp. 22.34, Apr. 1999. [94] R. Storn, ¡°Differential evolution research: Trends and open questions,¡± in Advances in Differential Evolution, U. K. Chakraborty, Ed. Berlin, Germany: Springer, 2008, pp. 1.32. [95] P. N. Suganthan, N. Hansen, J. J. Liang, K. Deb, Y.-P. Chen, A. Auger, and S. Tiwari, ¡°Problem definitions and evaluation criteria for the CEC 2005 special session on real-parameter optimization,¡± Nanyang Technol. Univ., Singapore, Tech. Rep., IIT Kanpur, Kanpur, India, KanGAL Rep. #2005005, May 2005. [96] A. M. Sutton, M. Lunacek, and L. D. Whitley, ¡°Differential evolution and non-separability: Using selective pressure to focus search,¡± in Proc. 9th Annu. Conf. GECCO, Jul. 2007, pp. 1428.1435. [97] T. Takahama and S. Sakai, ¡°Constrained optimization by the ¥å constrained differential evolution with gradient-based mutation and feasible elites,¡± in Proc. IEEE Congr. Evol. Comput., Jul. 2006, pp. 308.315. [98] K. Tang, X. Yao, P. N. Suganthan, C. MacNish, Y. P. Chen, C. M. Chen, and Z. Yang, ¡°Benchmark functions for the CEC¡¯2008 special session and competition on large scale global optimization,¡± Nature Inspired Comput. Applicat. Lab., USTC, China, Nanyang Technol. Univ., Singapore, Tech. Rep., 2007. [99] M. F. Tasgetiren and P. N. Suganthan, ¡°A multi-populated differential evolution algorithm for solving constrained optimization problem,¡± in Proc. IEEE Congr. Evol. Comput., Jul. 2006, pp. 340.354. [100] M. F. Tasgetiren, P. N. Suganthan, and Q. K. Pan, ¡°An ensemble of discrete differential evolution algorithms for solving the generalized traveling salesman problem,¡± Appl. Math. Comput., vol. 215, no. 9, pp. 3356.3368, Jan. 2010. DAS AND SUGANTHAN: DIFFERENTIAL EVOLUTION: A SURVEY OF THE STATE-OF-THE-ART 31 [101] D. K. Tasoulis, N. G. Pavlidis, V. P. Plagianakos, and M. N. Vrahatis, ¡°Parallel differential evolution,¡± in Proc. Congr. Evol. Comput., 2004, pp. 2023.2029. [102] J. Teo, ¡°Exploring dynamic self-adaptive populations in differential evolution,¡± Soft Comput. A Fusion Found. Methodol. Applicat., vol. 10, no. 8, pp. 673.686, 2006. [103] R. Thomsen, ¡°Multimodal optimization using crowding-based differential evolution,¡± in Proc. IEEE Congr. Evol. Comput., 2004, pp. 1382. 1389. [104] J. Vesterstr©ªm and R. A. Thomson, ¡°Comparative study of differential evolution, particle swarm optimization, and evolutionary algorithms on numerical benchmark problems,¡± in Proc. IEEE Congr. Evol. Comput., 2004, pp. 1980.1987. [105] F. Xue, A. C. Sanderson, and R. J. Graves, ¡°Pareto-based multiobjective differential evolution,¡± in Proc. Congr. Evol. Comput., vol. 2. 2003, pp. 862.869. [106] F. Xue, A. C. Sanderson, and R. J. Graves, ¡°Modeling and convergence analysis of a continuous multiobjective differential evolution algorithm,¡± in Proc. IEEE Congr. Evol. Comput., vol. 1. Sep. 2005, pp. 228.235. [107] F. Xue, A. C. Sanderson, and R. J. Graves, ¡°Multiobjective differential evolution: Algorithm, convergence analysis, and applications,¡± in Proc. IEEE Congr. Evol. Comput., vol. 1. Sep. 2005, pp. 743.750. [108] Z. Yang, J. He, and X. Yao, ¡°Making a difference to differential evolution,¡± in Advances in Metaheuristics for Hard Optimization, Z. Michalewicz and P. Siarry, Eds. Berlin, Germany: Springer, 2007, pp. 415.432. [109] Z. Yang, K. Tang, and X. Yao, ¡°Differential evolution for highdimensional function optimization,¡± in Proc. IEEE Congr. Evol. Comput., Sep. 2007, pp. 3523.3530. [110] Z. Yang, K. Tang, and X. Yao, ¡°Large scale evolutionary optimization using cooperative coevolution,¡± Inform. Sci., vol. 178, no. 15, pp. 2985. 2999, 2008. [111] D. Zaharie, ¡°On the explorative power of differential evolution,¡± in Proc. 3rd Int. Workshop Symbolic Numerical Algorithms Scientific Comput., Oct. 2001 [Online]. Available: http://web.info.uvt.ro/¡­dzaharie/online.papers.html [112] D. Zaharie, ¡°Critical values for the control parameters of differential evolution algorithms,¡± in Proc. 8th Int. Mendel Conf. Soft Comput., 2002, pp. 62.67. [113] D. Zaharie, ¡°Parameter adaptation in differential evolution by controlling the population diversity,¡± in Proc. 4th Int. Workshop Symbolic Numeric Algorithms Sci. Comput., 2002, pp. 385.397. [114] D. Zaharie, ¡°Statistical properties of differential evolution and related random search algorithms,¡± in Proc. Int. Conf. Comput. Statist., Aug. 2008, pp. 473.485. [115] D. Zaharie, ¡°Influence of crossover on the behavior of differential evolution algorithms,¡± Appl. Soft Comput., vol. 9, no. 3, pp. 1126. 1138, Jun. 2009. [116] A. Zamuda, J. Brest, B. Boskovic, and V. Zumer, ¡°Differential evolution for multiobjective optimization with self adaptation,¡± in Proc. Congr. Evol. Comput., Sep. 2007, pp. 3617.3624. [117] M. Zhang, W. Luo, and X. Wang, ¡°Differential evolution with dynamic stochastic selection for constrained optimization,¡± Inform. Sci., vol. 178, no. 15, pp. 3043.3074, Aug. 2008. [118] J. Zhang and A. C. Sanderson, ¡°JADE: Adaptive differential evolution with optional external archive,¡± IEEE Trans. Evol. Comput., vol. 13, no. 5, pp. 945.958, Oct. 2009. [119] W.-J. Zhang and X.-F. Xie, ¡°DEPSO: Hybrid particle swarm with differential evolution operator,¡± in Proc. IEEE Int. Conf. Syst. Man Cybern., 2003, pp. 3816.3821. [120] K. Zielinski, D. Peters, and R. Laur, ¡°Run time analysis regarding stopping criteria for differential evolution and particle swarm optimization,¡± in Proc. 1st Int. Conf. Exp./Process/System Modelling/ Simulation/Optimization, 2005 [Online]. Available: http://www. item.uni-bremen.de/research/papers/paper.pdf/Zielinski.Karin/zielinski05run. pdf [121] K. Zielinski and R. Laur, ¡°Constrained single-objective optimization using differential evolution,¡± in Proc. IEEE Congr. Evol. Comput., Jul. 2006, pp. 927.934. Swagatam Das (M¡¯10) received the B.E. Tel. E., M.E. Tel. E. (control engineering specialization), and Ph.D. degrees, all from Jadavpur University, Kolkata, India, in 2003, 2005, and 2009, respectively. He is currently an Assistant Professor with the Department of Electronics and Telecommunication Engineering, Jadavpur University. He has published more than 100 research articles in peer-reviewed journals and international conferences. He has coauthored a research monograph on metaheuristic clustering techniques published by Springer, Berlin, Germany, in 2009. His current research interests include evolutionary computing, swarm intelligence, pattern recognition, bioinformatics, control systems engineering, and digital signal processing. Dr. Das serves as an Associate Editor for the Information Sciences Journal (Elsevier), and as an Editorial Board Member of the International Journal of Artificial Intelligence and Soft Computing and the International Journal of Adaptive and Autonomous Communication Systems. He is a Founding Co- Editor-in-Chief of Swarm and Evolutionary Computation, an international journal from Elsevier. He has been acting as a Regular Reviewer for journals like Pattern Recognition, IEEE Transactions on Evolutionary Computation, IEEE/ACM Transactions on Computational Biology and Bioinformatics, and IEEE Transactions on SMC Part A and Part B. Ponnuthurai Nagaratnam Suganthan (M¡¯91. SM¡¯01) received the B.A. degree, the Postgraduate Certificate, and the M.A. degree in electrical and information engineering from the University of Cambridge, Cambridge, U.K., in 1990, 1992, and 1994, respectively, and the Ph.D. degree from the School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore. He was a Pre-Doctoral Research Assistant with the Department of Electrical Engineering, University of Sydney, Sydney, Australia, from 1995 to 1996, and was a Lecturer with the Department of Computer Science and Electrical Engineering, University of Queensland, Brisbane, Australia, from 1996 to 1999. Since 1999, he has been with the School of Electrical and Electronic Engineering, Nanyang Technological University, where he was previously an Assistant Professor and is currently an Associate Professor. His current research interests include evolutionary computation, pattern recognition, multiobjective evolutionary algorithms, bioinformatics, applications of evolutionary computation, and neural networks. Dr. Suganthan is an Associate Editor of the journals IEEE Transactions on Evolutionary Computation, Information Sciences, Pattern Recognition, and the International Journal of Swarm Intelligence Research. He is a Founding Co-Editor-in-Chief of Swarm and Evolutionary Computation, an international journal from Elsevier.","['ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'differential', 'evolution', 'survey', 'state', 'art', 'das', 'member', 'ieee', 'suganthan', 'member', 'ieee', 'abstract', 'differential', 'evolution', 'powerful', 'stochastic', 'real', 'parameter', 'optimization', 'algorithms', 'current', 'similar', 'computational', 'steps', 'employed', 'standard', 'evolutionary', 'algorithm', 'traditional', 'eas', 'variants', 'perturb', 'population', 'members', 'scaled', 'differences', 'selected', 'distinct', 'population', 'members', 'separate', 'probability', 'distribution', 'used', 'generating', 'offspring', 'drawn', 'attention', 'many', 'researchers', 'world', 'resulting', 'variants', 'basic', 'algorithm', 'improved', 'performance', 'presents', 'detailed', 'review', 'basic', 'concepts', 'survey', 'major', 'variants', 'application', 'multiobjective', 'constrained', 'large', 'scale', 'uncertain', 'optimization', 'problems', 'theoretical', 'studies', 'conducted', 'provides', 'overview', 'significant', 'engineering', 'applications', 'powerful', 'nature', 'index', 'terms', 'free', 'optimization', 'differential', 'evolution', 'direct', 'search', 'evolutionary', 'algorithms', 'eas', 'genetic', 'algorithms', 'gas', 'metaheuristics', 'particle_swarm', 'optimization', 'pso', 'introduction', 'tackle', 'complex', 'computational', 'problems', 'researchers', 'looking', 'nature', 'years', 'model', 'metaphor', 'inspiration', 'optimization', 'many', 'natural', 'processes', 'evolution', 'years', 'species', 'adapt', 'physical', 'structures', 'fit', 'environments', 'observation', 'underlying', 'relation', 'optimization', 'biological', 'evolution', 'led', 'development', 'important', 'paradigm', 'computational', 'intelligence', 'evolutionary', 'computing', 'techniques', 'performing', 'complex', 'search', 'optimization', 'evolutionary', 'computation', 'uses', 'progress', 'development', 'population', 'population', 'selected', 'random', 'search', 'parallel', 'processing', 'achieve', 'desired', 'end', 'paradigm', 'evolutionary', 'computing', 'techniques', 'idea', 'manuscript', 'received', 'september', 'revised', 'june', 'accepted', 'june', 'date', 'date', 'current', 'version', 'february', 'supported', 'science', 'technology', 'research', 'singapore', 'grant', 'das', 'department', 'electronics', 'engineering', 'university', 'india', 'mail', 'suganthan', 'school', 'electrical', 'electronic', 'engineering', 'nanyang', 'technological', 'university', 'singapore', 'mail', 'ntu', 'edu', 'versions', 'figures', 'available', 'online', 'http', 'ieee', 'org', 'digital', 'object', 'identifier', 'principles', 'problem', 'solving', 'distinct', 'idea', 'started', 'developed', 'different', 'evolutionary', 'programming', 'introduced', 'fogel', 'usa', 'rechenberg', 'schwefel', 'introduced', 'evolution', 'strategies', 'ess', 'germany', 'decade', 'holland', 'university', 'michigan', 'ann', 'arbor', 'devised', 'independent', 'method', 'evolution', 'solve', 'practical', 'optimization', 'problems', 'called', 'genetic', 'algorithm', 'areas', 'developed', 'years', 'different', 'representatives', 'technology', 'called', 'evolutionary', 'computing', 'fourth', 'following', 'general', 'ideas', 'started', 'genetic', 'programming', 'field', 'nature', 'inspired', 'metaheuristics', 'evolutionary', 'algorithms', 'comprising', 'gas', 'ess', 'differential', 'evolution', 'swarm', 'intelligence', 'algorithms', 'ant', 'colony', 'optimization', 'particle_swarm', 'optimization', 'pso', 'bees', 'algorithm', 'foraging', 'optimization', 'field', 'extends', 'sense', 'include', 'self', 'organizing', 'systems', 'artificial', 'life', 'digital', 'memetic', 'algorithms', 'search', 'artificial', 'immune', 'systems', 'evolution', 'model', 'algorithm', 'emerged', 'competitive', 'form', 'evolutionary', 'computing', 'decade', 'written', 'article', 'technical', 'report', 'storn', 'price', 'success', 'demonstrated', 'international', 'contest', 'evolutionary', 'optimization', 'conjunction', 'ieee', 'international', 'conference', 'evolutionary', 'computation', 'cec', 'third', 'international', 'contest', 'evolutionary', 'optimization', 'japan', 'turned', 'best', 'evolutionary', 'algorithm', 'solving', 'real', 'valued', 'test', 'function', 'suite', 'given', 'non', 'evolutionary', 'algorithms', 'applicable', 'solved', 'test', 'problems', 'faster', 'price', 'presented', 'second', 'international', 'contest', 'evolutionary', 'optimization', 'space', 'reference', 'list', 'published', 'line', 'ieee', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'turned', 'best', 'competing', 'algorithms', 'journal', 'describing', 'algorithm', 'sufficient', 'details', 'followed', 'quick', 'cec', 'competition', 'real', 'parameter', 'optimization', 'problems', 'classical', 'rank', 'self', 'adaptive', 'variant', 'called', 'sade', 'third', 'rank', 'performed', 'problems', 'powerful', 'variant', 'known', 'matrix', 'adaptation', 'cma', 'yielded', 'results', 'classical', 'self', 'adaptive', 'many', 'improved', 'variants', 'improved', 'sade', 'jde', 'opposition', 'ode', 'global', 'local', 'degl', 'jade', 'discussed', 'subsequent', 'sections', 'period', 'hence', 'comparison', 'needed', 'determine', 'variants', 'compete', 'cma', 'many', 'real', 'parameter', 'optimizers', 'standard', 'numerical', 'benchmarks', 'interesting', 'note', 'variants', 'continued', 'front', 'subsequent', 'cec', 'competitions', 'cec', 'competition', 'constrained', 'real', 'parameter', 'optimization', 'rank', 'cec', 'competition', 'multiobjective', 'optimization', 'second', 'rank', 'cec', 'competition', 'large', 'scale', 'global', 'optimization', 'third', 'rank', 'cec', 'competition', 'multiobjective', 'optimization', 'rank', 'taken', 'algorithm', 'moea', 'unconstrained', 'problems', 'cec', 'competition', 'evolutionary', 'computation', 'dynamic', 'uncertain', 'environments', 'rank', 'observe', 'single', 'search', 'paradigm', 'pso', 'able', 'competitive', 'cec', 'competitions', 'detailed', 'discussion', 'variants', 'optimization', 'complex', 'environments', 'provided', 'section', 'individual', 'trial', 'solutions', 'constitute', 'population', 'called', 'parameter', 'vectors', 'computational', 'steps', 'employed', 'standard', 'traditional', 'eas', 'employs', 'difference', 'parameter', 'vectors', 'explore', 'objective', 'function', 'landscape', 'respect', 'nelder', 'mead', 'algorithm', 'controlled', 'random', 'search', 'algorithm', 'relied', 'difference', 'vectors', 'perturb', 'current', 'trial', 'solutions', 'started', 'find', 'several', 'significant', 'applications', 'optimization', 'problems', 'diverse', 'domains', 'science', 'engineering', 'point', 'reasons', 'researchers', 'looking', 'attractive', 'optimization', 'survey', 'reasons', 'become', 'obvious', 'compared', 'eas', 'much', 'simple', 'straightforward', 'implement', 'main', 'algorithm', 'takes', 'lines', 'code', 'programming', 'simplicity', 'code', 'important', 'fields', 'programming', 'looking', 'algorithm', 'implemented', 'tuned', 'solve', 'domain', 'specific', 'problems', 'note', 'pso', 'easy', 'code', 'performance', 'variants', 'pso', 'variants', 'wide', 'variety', 'problems', 'indicated', 'studies', 'cec', 'competition', 'series', 'indicated', 'recent', 'studies', 'simplicity', 'much', 'performance', 'comparison', 'several', 'others', 'current', 'interest', 'wide', 'variety', 'problems', 'including', 'unimodal', 'multimodal', 'separable', 'non', 'separable', 'strong', 'eas', 'able', 'cec', 'competition', 'non', 'separable', 'objective', 'functions', 'performance', 'terms', 'accuracy', 'convergence', 'speed', 'robustness', 'makes', 'attractive', 'applications', 'various', 'real', 'world', 'optimization', 'problems', 'finding', 'approximate', 'solution', 'reasonable', 'amount', 'computational', 'much', 'weighted', 'number', 'control', 'parameters', 'classical', 'effects', 'parameters', 'performance', 'algorithm', 'discussed', 'next', 'section', 'simple', 'adaptation', 'rules', 'devised', 'improve', 'performance', 'algorithm', 'large', 'extent', 'computational', 'space', 'complexity', 'low', 'compared', 'competitive', 'real', 'parameter', 'optimizers', 'cma', 'feature', 'helps', 'extending', 'handling', 'large', 'scale', 'expensive', 'optimization', 'problems', 'cma', 'remains', 'competitive', 'problems', 'variables', 'difficult', 'extend', 'higher', 'dimensional', 'problems', 'due', 'update', 'operations', 'matrices', 'size', 'number', 'variables', 'issues', 'popularity', 'researchers', 'short', 'evident', 'past', 'decade', 'research', 'become', 'huge', 'exists', 'significant', 'survey', 'papers', 'eas', 'swarm', 'intelligence', 'algorithms', 'best', 'knowledge', 'extensive', 'review', 'article', 'entire', 'current', 'research', 'published', 'published', 'article', 'neri', 'tirronen', 'reviewed', 'number', 'variants', 'single', 'objective', 'optimization', 'problems', 'made', 'experimental', 'comparison', 'variants', 'set', 'numerical', 'benchmarks', 'article', 'address', 'issues', 'adapting', 'complex', 'optimization', 'environments', 'involving', 'multiple', 'constrained', 'objective', 'functions', 'noise', 'uncertainty', 'fitness', 'landscape', 'large', 'number', 'search', 'variables', 'focus', 'recent', 'engineering', 'applications', 'theoretical', 'analysis', 'attempts', 'provide', 'comprehensive', 'survey', 'algorithm', 'basic', 'concepts', 'different', 'structures', 'variants', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'fig', 'main', 'stages', 'algorithm', 'solving', 'constrained', 'multiobjective', 'dynamic', 'large', 'scale', 'optimization', 'problems', 'applications', 'variants', 'practical', 'optimization', 'problems', 'rest', 'follows', 'section', 'basic', 'concepts', 'related', 'classical', 'explained', 'original', 'formulation', 'algorithm', 'real', 'number', 'space', 'section', 'iii', 'discusses', 'parameter', 'adaptation', 'control', 'schemes', 'section', 'provides', 'overview', 'several', 'variants', 'algorithm', 'section', 'provides', 'extensive', 'survey', 'applications', 'discrete', 'constrained', 'multiobjective', 'dynamic', 'optimization', 'problems', 'theoretical', 'analysis', 'reviewed', 'section', 'section', 'vii', 'provides', 'overview', 'significant', 'engineering', 'applications', 'drawbacks', 'pointed', 'section', 'viii', 'section', 'number', 'future', 'research', 'issues', 'related', 'section', 'differential', 'basic', 'concepts', 'formulation', 'continuous', 'real', 'space', 'deal', 'classical', 'problem', 'search', 'optimization', 'optimization', 'means', 'action', 'finding', 'best', 'solution', 'problem', 'given', 'constraints', 'optimizing', 'performance', 'system', 'finding', 'set', 'values', 'system', 'parameters', 'overall', 'performance', 'system', 'best', 'given', 'conditions', 'parameters', 'system', 'performance', 'represented', 'vector', 'real', 'parameter', 'optimization', 'name', 'implies', 'parameter', 'real', 'number', 'measure', 'best', 'performance', 'achieved', 'objective', 'function', 'fitness', 'function', 'designed', 'system', 'task', 'optimization', 'search', 'parameter', 'vector', 'objective', 'function', 'non', 'large', 'finite', 'set', 'domain', 'search', 'unconstrained', 'optimization', 'problems', 'max', 'min', 'minimization', 'loss', 'generality', 'general', 'optimization', 'task', 'complicated', 'existence', 'non', 'linear', 'objective', 'functions', 'multiple', 'local', 'minima', 'local', 'minimum', 'defined', 'indicates', 'distance', 'measure', 'simple', 'real', 'parameter', 'optimization', 'algorithm', 'works', 'simple', 'cycle', 'stages', 'presented', 'fig', 'explain', 'stage', 'sections', 'initialization', 'parameter', 'vectors', 'searches', 'global', 'optimum', 'point', 'dimensional', 'real', 'parameter', 'space', 'population', 'dimensional', 'real', 'valued', 'parameter', 'vectors', 'vector', 'known', 'chromosome', 'forms', 'candidate', 'solution', 'multidimensional', 'optimization', 'problem', 'denote', 'subsequent', 'generations', 'gmax', 'parameter', 'vectors', 'likely', 'changed', 'different', 'generations', 'following', 'notation', 'representing', 'ith', 'vector', 'population', 'current', 'generation', 'parameter', 'problem', 'certain', 'range', 'value', 'parameter', 'restricted', 'parameters', 'related', 'physical', 'components', 'measures', 'natural', 'bounds', 'example', 'parameter', 'length', 'mass', 'cannot', 'negative', 'initial', 'population', 'cover', 'range', 'much', 'possible', 'individuals', 'search', 'space', 'constrained', 'minimum', 'maximum', 'bounds', 'xmin', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'hence', 'initialize', 'jth', 'component', 'ith', 'vector', 'min', 'randi', 'max', 'min', 'randi', 'distributed', 'random', 'number', 'lying', 'randi', 'component', 'vector', 'mutation', 'difference', 'vectors', 'mutation', 'means', 'change', 'gene', 'characteristics', 'chromosome', 'context', 'evolutionary', 'computing', 'paradigm', 'mutation', 'seen', 'change', 'perturbation', 'random', 'element', 'literature', 'parent', 'vector', 'current', 'generation', 'called', 'target', 'vector', 'mutant', 'vector', 'obtained', 'differential', 'mutation', 'operation', 'known', 'donor', 'vector', 'offspring', 'formed', 'donor', 'target', 'vector', 'called', 'trial', 'vector', 'simplest', 'forms', 'mutation', 'create', 'donor', 'vector', 'ith', 'target', 'vector', 'current', 'population', 'distinct', 'parameter', 'vectors', 'sampled', 'current', 'population', 'indices', 'exclusive', 'integers', 'chosen', 'range', 'different', 'base', 'vector', 'index', 'indices', 'generated', 'mutant', 'vector', 'difference', 'vectors', 'scaled', 'number', 'lies', 'interval', 'scaled', 'difference', 'added', 'third', 'obtain', 'donor', 'vector', 'process', 'process', 'illustrated', 'parameter', 'space', 'showing', 'constant', 'cost', 'arbitrary', 'objective', 'function', 'fig', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'fig', 'simple', 'mutation', 'scheme', 'space', 'crossover', 'enhance', 'potential', 'diversity', 'population', 'crossover', 'operation', 'comes', 'generating', 'donor', 'vector', 'mutation', 'donor', 'vector', 'components', 'target', 'vector', 'operation', 'form', 'trial', 'vector', 'family', 'algorithms', 'kinds', 'crossover', 'methods', 'exponential', 'point', 'binomial', 'uniform', 'exponential', 'crossover', 'choose', 'integer', 'numbers', 'integer', 'starting', 'point', 'target', 'vector', 'crossover', 'exchange', 'components', 'donor', 'vector', 'starts', 'choose', 'integer', 'interval', 'denotes', 'number', 'components', 'donor', 'vector', 'target', 'vector', 'choosing', 'trial', 'vector', 'obtained', 'according', 'following', 'pseudo', 'code', 'rand', 'called', 'crossover', 'rate', 'appears', 'control', 'parameter', 'hence', 'effect', 'probability', 'positive', 'integer', 'lying', 'interval', 'donor', 'vector', 'set', 'chosen', 'shown', 'hand', 'binomial', 'crossover', 'performed', 'variables', 'whenever', 'generated', 'number', 'equal', 'value', 'case', 'number', 'parameters', 'inherited', 'donor', 'binomial', 'distribution', 'scheme', 'outlined', 'randi', 'jrand', 'fig', 'different', 'possible', 'trial', 'vectors', 'formed', 'due', 'uniform', 'binomial', 'crossover', 'target', 'mutant', 'vectors', 'search', 'space', 'randi', 'distributed', 'random', 'number', 'called', 'anew', 'jth', 'component', 'ith', 'parameter', 'vector', 'jrand', 'chosen', 'index', 'ensures', 'gets', 'least', 'component', 'vector', 'generation', 'note', 'additional', 'demand', 'true', 'probability', 'pcr', 'component', 'trial', 'vector', 'inherited', 'donor', 'observe', 'search', 'space', 'possible', 'trial', 'vectors', 'result', 'crossing', 'mutant', 'donor', 'vector', 'target', 'vector', 'trial', 'vectors', 'follows', 'components', 'inherited', 'component', 'comes', 'second', 'component', 'comes', 'second', 'possible', 'trial', 'vectors', 'due', 'uniform', 'crossover', 'illustrated', 'fig', 'selection', 'keep', 'population', 'size', 'constant', 'subsequent', 'generations', 'next', 'step', 'algorithm', 'selection', 'determine', 'target', 'trial', 'vector', 'next', 'generation', 'selection', 'operation', 'described', 'objective', 'function', 'minimized', 'trial', 'vector', 'yields', 'equal', 'lower', 'value', 'objective', 'function', 'replaces', 'corresponding', 'target', 'vector', 'next', 'generation', 'target', 'population', 'hence', 'population', 'gets', 'respect', 'minimization', 'objective', 'function', 'remains', 'fitness', 'deteriorates', 'note', 'target', 'vector', 'replaced', 'trial', 'vector', 'yields', 'value', 'objective', 'function', 'feature', 'enables', 'vectors', 'move', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'algorithm', 'pseudo', 'code', 'algorithm', 'binomial', 'crossover', 'step', 'values', 'control', 'parameters', 'scale', 'factor', 'crossover', 'rate', 'population', 'size', 'user', 'step', 'set', 'generation', 'number', 'initialize', 'population', 'individuals', 'individual', 'distributed', 'range', 'xmin', 'xmin', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'step', 'stopping', 'criterion', 'satisfied', 'individual', 'step', 'mutation', 'step', 'generate', 'donor', 'vector', 'corresponding', 'ith', 'target', 'vector', 'differential', 'mutation', 'scheme', 'step', 'crossover', 'step', 'generate', 'trial', 'vector', 'ith', 'target', 'vector', 'binomial', 'crossover', 'following', 'randi', 'jrand', 'step', 'selection', 'step', 'evaluate', 'trial', 'vector', 'end', 'end', 'step', 'increase', 'generation', 'count', 'end', 'flat', 'fitness', 'landscapes', 'generations', 'note', 'terms', 'objective', 'function', 'value', 'fitness', 'minimization', 'problems', 'lower', 'objective', 'function', 'value', 'higher', 'fitness', 'summary', 'iteration', 'iteration', 'classical', 'algorithm', 'consists', 'basic', 'steps', 'initialization', 'population', 'search', 'variable', 'vectors', 'mutation', 'crossover', 'recombination', 'selection', 'illustrated', 'stages', 'present', 'whole', 'algorithm', 'pseudo', 'code', 'condition', 'defined', 'ways', 'fixed', 'number', 'iterations', 'gmax', 'large', 'value', 'gmax', 'depending', 'complexity', 'objective', 'function', 'best', 'fitness', 'population', 'change', 'successive', 'iterations', 'pre', 'specified', 'objective', 'function', 'value', 'family', 'storn', 'price', 'process', 'mutation', 'scheme', 'previous', 'section', 'illustrated', 'basic', 'steps', 'simple', 'mutation', 'scheme', 'uses', 'selected', 'vector', 'weighted', 'difference', 'vector', 'perturb', 'hence', 'literature', 'particular', 'mutation', 'scheme', 'given', 'referred', 'rand', 'used', 'conjunction', 'binomial', 'crossover', 'procedure', 'called', 'rand_bin', 'idea', 'different', 'schemes', 'named', 'general', 'used', 'stands', 'differential', 'evolution', 'represents', 'string', 'base', 'vector', 'perturbed', 'number', 'difference', 'vectors', 'considered', 'perturbation', 'stands', 'type', 'crossover', 'used', 'exp', 'exponential', 'bin', 'binomial', 'different', 'mutation', 'schemes', 'suggested', 'storn', 'price', 'summarized', 'best', 'xbest', 'target', 'best', 'xbest', 'best', 'xbest', 'rand', 'indices', 'exclusive', 'integers', 'chosen', 'range', 'different', 'base', 'index', 'indices', 'generated', 'donor', 'vector', 'scaling', 'factor', 'positive', 'control', 'parameter', 'scaling', 'difference', 'vectors', 'best', 'best', 'individual', 'vector', 'best', 'fitness', 'objective', 'function', 'value', 'minimization', 'problem', 'population', 'generation', 'note', 'strategies', 'creating', 'donor', 'vector', 'mutated', 'example', 'listed', 'vector', 'recombinant', 'xbest', 'storn', 'price', 'suggested', 'total', 'ten', 'different', 'working', 'strategies', 'guidelines', 'applying', 'strategies', 'given', 'problem', 'strategies', 'derived', 'different', 'mutation', 'schemes', 'outlined', 'mutation', 'strategy', 'combined', 'exponential', 'type', 'crossover', 'binomial', 'type', 'crossover', 'yielded', 'total', 'strategies', 'fact', 'many', 'linear', 'vector', 'combinations', 'used', 'mutation', 'general', 'single', 'mutation', 'method', 'described', 'turned', 'best', 'problems', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'various', 'mutation', 'schemes', 'need', 'investigation', 'determine', 'perform', 'kind', 'problems', 'yield', 'poor', 'results', 'initial', 'direction', 'undertaken', 'mezura', 'montes', 'compared', 'different', 'test', 'suite', 'benchmark', 'problems', 'authors', 'took', 'account', 'interesting', 'mutation', 'scheme', 'known', 'rand', 'dir', 'incorporates', 'objective', 'function', 'information', 'guide', 'direction', 'donor', 'vectors', 'following', 'distinct', 'population', 'members', 'experiments', 'performed', 'mezura', 'montes', 'indicate', 'best', 'bin', 'best', 'solution', 'find', 'search', 'directions', 'binomial', 'crossover', 'competitive', 'scheme', 'characteristics', 'problem', 'solved', 'final', 'accuracy', 'robustness', 'results', 'authors', 'mention', 'unimodal', 'separable', 'functions', 'rand', 'dir', 'achieved', 'results', 'unimodal', 'non', 'separable', 'functions', 'best', 'bin', 'yielded', 'best', 'performance', 'variant', 'successful', 'optimizing', 'multimodal', 'separable', 'benchmarks', 'rand_bin', 'rand', 'dir', 'provided', 'performances', 'similar', 'quality', 'class', 'functions', 'multimodal', 'non', 'separable', 'functions', 'rand', 'dir', 'competitive', 'faster', 'converge', 'global', 'optimum', 'eas', 'differences', 'section', 'briefly', 'discuss', 'differs', 'eas', 'real', 'parameter', 'optimization', 'following', 'indicate', 'number', 'parent', 'vectors', 'denote', 'size', 'child', 'population', 'mutation', 'context', 'gas', 'eas', 'mutation', 'random', 'change', 'parameter', 'real', 'valued', 'eas', 'simulate', 'effects', 'mutation', 'increments', 'generated', 'predefined', 'fixed', 'probability', 'density', 'function', 'pdf', 'differs', 'algorithms', 'fact', 'base', 'vectors', 'secondary', 'parents', 'scaled', 'population', 'derived', 'difference', 'vectors', 'generations', 'pass', 'differences', 'tend', 'adapt', 'natural', 'scaling', 'problem', 'example', 'population', 'becomes', 'variable', 'remains', 'difference', 'vectors', 'sampled', 'small', 'former', 'variable', 'large', 'latter', 'automatic', 'adaptation', 'improves', 'convergence', 'algorithm', 'words', 'require', 'specification', 'adaptation', 'absolute', 'step', 'size', 'variable', 'generations', 'requires', 'specification', 'single', 'relative', 'scale', 'factor', 'variables', 'difference', 'vector', 'mutation', 'main', 'strength', 'idea', 'difference', 'population', 'members', 'recombination', 'eas', 'schaffer', 'came', 'idea', 'difference', 'recombination', 'operator', 'called', 'crossover', 'operator', 'real', 'coded', 'gas', 'used', 'selection', 'differential', 'defined', 'difference', 'mean', 'fitness', 'selected', 'parents', 'mean', 'fitness', 'population', 'design', 'criteria', 'recombination', 'operators', 'used', 'fuzzy', 'recombination', 'deb', 'agrawal', 'simulated', 'binary', 'crossover', 'sbx', 'works', 'parent', 'solutions', 'creates', 'offspring', 'solutions', 'simulate', 'working', 'principle', 'single', 'point', 'crossover', 'operator', 'binary', 'strings', 'sbx', 'probability', 'distribution', 'used', 'create', 'offspring', 'depends', 'spread', 'factor', 'defined', 'ratio', 'absolute', 'difference', 'children', 'values', 'parent', 'values', 'sbx', 'analyzed', 'detail', 'deb', 'beyer', 'uniform', 'normal', 'distribution', 'crossover', 'simplex', 'crossover', 'operators', 'generate', 'direction', 'vectors', 'chosen', 'parents', 'taking', 'difference', 'parent', 'vector', 'mean', 'vector', 'direction', 'vectors', 'probability', 'creating', 'offspring', 'mean', 'vector', 'reduced', 'maximum', 'probability', 'assigned', 'mean', 'vector', 'uniform', 'probability', 'creating', 'offspring', 'restricted', 'region', 'called', 'simplex', 'deb', 'parent', 'crossover', 'operator', 'offspring', 'parent', 'chosen', 'difference', 'vector', 'calculated', 'parent', 'mean', 'chosen', 'parents', 'scaled', 'difference', 'distinct', 'population', 'members', 'perturb', 'third', 'done', 'finds', 'operation', 'nelder', 'mead', 'search', 'price', 'algorithm', 'due', 'space', 'possible', 'discuss', 'algorithms', 'sufficient', 'details', 'interested', 'readers', 'point', 'nelder', 'mead', 'algorithm', 'number', 'sample', 'vectors', 'difference', 'vector', 'generated', 'corresponding', 'dimensionality', 'search', 'space', 'becomes', 'drawback', 'complicated', 'objective', 'functions', 'require', 'many', 'points', 'form', 'clear', 'model', 'surface', 'nelder', 'mead', 'operations', 'difference', 'vectors', 'form', 'arithmetic', 'recombination', 'difference', 'vector', 'perturbation', 'schemes', 'mutation', 'operation', 'fundamental', 'aspects', 'type', 'mutation', 'fact', 'vector', 'generated', 'difference', 'vectors', 'population', 'employing', 'pdf', 'leads', 'main', 'contour', 'matching', 'term', 'explained', 'price', 'contour', 'matching', 'adaptation', 'vector', 'population', 'promising', 'regions', 'fitness', 'landscape', 'investigated', 'advantages', 'difference', 'vectors', 'mutation', 'step', 'size', 'adapted', 'objective', 'function', 'landscape', 'price', 'contour', 'matching', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'fig', 'empirical', 'distributions', 'candidate', 'trial', 'vectors', 'different', 'values', 'important', 'selection', 'basin', 'basin', 'search', 'points', 'move', 'basin', 'attraction', 'local', 'minimum', 'pso', 'stochastic', 'attraction', 'best', 'neighborhood', 'best', 'positions', 'scaled', 'difference', 'vectors', 'velocity', 'update', 'formula', 'pso', 'target', 'best', 'scheme', 'generates', 'mutated', 'recombinant', 'crossover', 'crossover', 'create', 'single', 'trial', 'vector', 'gas', 'vectors', 'produce', 'trial', 'vectors', 'point', 'crossover', 'note', 'depends', 'mutation', 'generate', 'offspring', 'crossover', 'operator', 'associated', 'popular', 'crossover', 'techniques', 'real', 'coded', 'gas', 'point', 'crossover', 'offspring', 'vector', 'blocks', 'parameters', 'adjacent', 'inherited', 'different', 'parent', 'vectors', 'studies', 'point', 'crossover', 'indicate', 'number', 'crossover', 'points', 'reduces', 'bias', 'parameters', 'vector', 'cost', 'increasing', 'disruption', 'parameters', 'analyzed', 'price', 'exponential', 'crossover', 'employs', 'point', 'crossover', 'objective', 'reducing', 'individual', 'bias', 'inherent', 'point', 'crossover', 'eliminated', 'determined', 'independent', 'random', 'trials', 'procedure', 'known', 'uniform', 'crossover', 'literature', 'employs', 'discrete', 'recombination', 'binomial', 'crossover', 'selection', 'selection', 'applied', 'evolutionary', 'process', 'different', 'stages', 'stage', 'parent', 'selection', 'decide', 'vectors', 'current', 'population', 'undergo', 'recombination', 'second', 'selection', 'choose', 'vectors', 'parent', 'offspring', 'populations', 'survive', 'next', 'generation', 'gas', 'select', 'parents', 'fitness', 'gives', 'individuals', 'equal', 'chance', 'selected', 'parents', 'individual', 'chance', 'selected', 'mutation', 'recombination', 'base', 'vectors', 'picked', 'fitness', 'values', 'offspring', 'vectors', 'allowed', 'done', 'simple', 'gas', 'guarantee', 'best', 'solution', 'lost', 'best', 'solution', 'called', 'elitism', 'plays', 'important', 'role', 'convergence', 'algorithm', 'global', 'optimum', 'reason', 'speed', 'improvement', 'offers', 'eas', 'including', 'versions', 'account', 'current', 'population', 'next', 'generation', 'best', 'children', 'become', 'parents', 'next', 'generation', 'next', 'generation', 'best', 'vectors', 'combined', 'parent', 'child', 'populations', 'selection', 'scheme', 'closer', 'spirit', 'elitist', 'ranking', 'combined', 'population', 'former', 'employs', 'competition', 'parent', 'vector', 'offspring', 'tournament', 'selection', 'selection', 'competitions', 'parent', 'offspring', 'generated', 'mutation', 'recombination', 'comparing', 'trial', 'vector', 'offspring', 'best', 'performing', 'vectors', 'index', 'ensures', 'solution', 'index', 'parent', 'offspring', 'competition', 'superior', 'ability', 'maintain', 'population', 'diversity', 'compared', 'ranking', 'tournament', 'selection', 'offspring', 'dominate', 'population', 'iii', 'control', 'parameters', 'differential', 'evolution', 'main', 'control', 'parameters', 'algorithm', 'mutation', 'scale', 'factor', 'crossover', 'constant', 'population', 'size', 'section', 'focus', 'effect', 'parameters', 'performance', 'state', 'art', 'methods', 'tuning', 'parameters', 'volume', 'research', 'undertaken', 'improve', 'performance', 'tuning', 'control', 'parameters', 'storn', 'price', 'indicated', 'reasonable', 'value', 'chosen', 'dimensionality', 'problem', 'initial', 'choice', 'effective', 'range', 'parameter', 'controls', 'many', 'parameters', 'changed', 'population', 'member', 'low', 'value', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'small', 'number', 'parameters', 'changed', 'generation', 'movement', 'tends', 'current', 'coordinate', 'axes', 'hand', 'high', 'values', 'cause', 'directions', 'mutant', 'vector', 'inherited', 'generation', 'axis', 'steps', 'effect', 'illustrated', 'fig', 'showing', 'values', 'empirical', 'distribution', 'candidate', 'trial', 'vectors', 'obtained', 'running', 'single', 'starting', 'population', 'ten', 'vectors', 'generations', 'selection', 'interesting', 'note', 'point', 'algorithms', 'classic', 'rand_bin', 'performance', 'invariant', 'setting', 'crossover', 'vector', 'level', 'operation', 'makes', 'trial', 'vector', 'pure', 'mutant', 'location', 'respect', 'function', 'mutant', 'trial', 'vectors', 'change', 'coordinate', 'rotation', 'constant', 'sampled', 'distribution', 'trial', 'vector', 'low', 'value', 'results', 'search', 'changes', 'direction', 'small', 'subset', 'directions', 'effective', 'strategy', 'functions', 'separable', 'evaluated', 'different', 'parameter', 'settings', 'rosenbrock', 'rastrigin', 'functions', 'experimental', 'results', 'global', 'optimum', 'searching', 'capability', 'convergence', 'speed', 'sensitive', 'choice', 'control', 'parameters', 'choice', 'population', 'size', 'scaling', 'factor', 'crossover', 'rate', 'authors', 'state', 'choice', 'lie', 'function', 'separable', 'function', 'parameters', 'dependent', 'literature', 'several', 'counter', 'reported', 'concerning', 'rules', 'choosing', 'control', 'parameters', 'solve', 'practical', 'problems', 'lack', 'sufficient', 'experimental', 'objective', 'functions', 'sensitive', 'proper', 'choice', 'parameter', 'settings', 'researchers', 'started', 'consider', 'techniques', 'self', 'adaptation', 'find', 'optimal', 'set', 'control', 'parameters', 'self', 'adaptation', 'applied', 'control', 'parameters', 'liu', 'lampinen', 'introduced', 'fuzzy', 'adaptive', 'differential', 'evolution', 'fuzzy', 'logic', 'controllers', 'inputs', 'incorporate', 'relative', 'function', 'values', 'individuals', 'successive', 'generations', 'adapt', 'parameters', 'mutation', 'crossover', 'operation', 'context', 'qin', 'came', 'sade', 'algorithm', 'trial', 'vector', 'generation', 'strategies', 'associated', 'control', 'parameters', 'self', 'adapted', 'learning', 'previous', 'experiences', 'generating', 'promising', 'solutions', 'parameter', 'sade', 'normal', 'distribution', 'mean', 'value', 'standard', 'deviation', 'denoted', 'set', 'values', 'sampled', 'normal', 'distribution', 'applied', 'target', 'vector', 'current', 'population', 'sade', 'attempts', 'maintain', 'exploitation', 'small', 'values', 'exploration', 'large', 'values', 'power', 'entire', 'evolution', 'process', 'sade', 'range', 'values', 'given', 'problem', 'according', 'previous', 'values', 'generated', 'trial', 'vectors', 'entering', 'next', 'generation', 'assumed', 'normal', 'distribution', 'mean', 'value', 'crm', 'standard', 'deviation', 'std', 'denoted', 'crm', 'std', 'crm', 'initialized', 'std', 'set', 'small', 'value', 'guarantee', 'values', 'generated', 'crm', 'std', 'crm', 'hence', 'value', 'std', 'set', 'note', 'self', 'adaptive', 'schemes', 'sade', 'parameters', 'adjusted', 'standard', 'deviation', 'normal', 'distribution', 'self', 'adaptive', 'performs', 'standard', 'sensitive', 'parameters', 'replaced', 'sensitive', 'parameters', 'self', 'adaptive', 'fitness', 'adaptation', 'system', 'evolving', 'populations', 'implemented', 'crossover', 'rate', 'fixed', 'empirical', 'study', 'value', 'updated', 'generation', 'means', 'following', 'scheme', 'max', 'lmin', 'lmin', 'lower', 'bound', 'fmin', 'minimum', 'maximum', 'objective', 'function', 'values', 'individuals', 'populations', 'obtained', 'generation', 'brest', 'self', 'adaptation', 'scheme', 'control', 'parameters', 'encoded', 'control', 'parameters', 'individual', 'adjusted', 'introducing', 'parameters', 'algorithm', 'called', 'jde', 'set', 'values', 'assigned', 'individual', 'population', 'dimensions', 'vector', 'values', 'encoded', 'control', 'parameters', 'lead', 'individuals', 'turn', 'likely', 'survive', 'produce', 'offspring', 'parameter', 'values', 'control', 'parameters', 'next', 'generation', 'computed', 'follows', 'probability', 'probability', 'lower', 'upper', 'lie', 'brest', 'used', 'takes', 'value', 'takes', 'value', 'values', 'obtained', 'mutation', 'performed', 'influence', 'mutation', 'crossover', 'selection', 'operations', 'vector', 'zaharie', 'parameter', 'adaptation', 'strategy', 'ade', 'idea', 'controlling', 'population', 'diversity', 'implemented', 'approach', 'following', 'line', 'zaharie', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'designed', 'adaptive', 'pareto', 'algorithm', 'multiobjective', 'optimization', 'analyzed', 'parallel', 'implementation', 'abbass', 'self', 'adapted', 'crossover', 'rate', 'multiobjective', 'optimization', 'problems', 'encoding', 'value', 'individual', 'search', 'variables', 'scaling', 'factor', 'generated', 'variable', 'gaussian', 'distribution', 'upper', 'limit', 'scale', 'factor', 'taken', 'mean', 'solution', 'possible', 'date', 'benchmark', 'function', 'optimized', 'required', 'zaharie', 'derived', 'lower', 'limit', 'study', 'small', 'population', 'converge', 'absence', 'selection', 'pressure', 'zaharie', 'following', 'relation', 'variance', 'original', 'population', 'step', 'variance', 'trial', 'population', 'pcr', 'probability', 'crossover', 'zaharie', 'jrand', 'part', 'became', 'absolute', 'probability', 'component', 'target', 'vector', 'exchanged', 'donor', 'vector', 'zaharie', 'used', 'notation', 'pcr', 'denote', 'probability', 'control', 'parameter', 'combinations', 'equation', 'pcr', 'considered', 'critical', 'result', 'population', 'variance', 'remains', 'constant', 'random', 'selection', 'step', 'according', 'critical', 'value', 'fcrit', 'population', 'variance', 'decreases', 'fcrit', 'increases', 'fcrit', 'solving', 'fcrit', 'pcr', 'zaharie', 'fcrit', 'lower', 'limit', 'value', 'sense', 'smaller', 'values', 'convergence', 'flat', 'objective', 'function', 'landscape', 'trial', 'vectors', 'accepted', 'selection', 'pressure', 'omran', 'introduced', 'self', 'adaptive', 'scaling', 'factor', 'parameter', 'generated', 'value', 'individual', 'normal', 'distribution', 'approach', 'called', 'sde', 'tested', 'benchmark', 'functions', 'performed', 'versions', 'adapting', 'control', 'parameters', 'adapted', 'population', 'size', 'teo', 'self', 'adaptive', 'population', 'size', 'abbreviated', 'self', 'adaptive', 'pareto', 'mallipeddi', 'suganthan', 'investigated', 'effect', 'population', 'size', 'quality', 'solutions', 'computational', 'effort', 'required', 'set', 'problems', 'chosen', 'test', 'suite', 'cec', 'special', 'session', 'real', 'parameter', 'optimization', 'authors', 'presented', 'method', 'reducing', 'population', 'size', 'method', 'improves', 'efficiency', 'robustness', 'algorithm', 'applied', 'variant', 'algorithm', 'mallipeddi', 'suganthan', 'algorithm', 'ensemble', 'parallel', 'populations', 'number', 'function', 'evaluations', 'fes', 'allocated', 'population', 'self', 'adapted', 'learning', 'previous', 'experiences', 'generating', 'superior', 'solutions', 'suitable', 'population', 'size', 'parameter', 'settings', 'determined', 'match', 'different', 'search', 'evolution', 'phases', 'self', 'adaptation', 'made', 'vary', 'improving', 'performances', 'price', 'defined', 'terms', 'context', 'practice', 'generating', 'value', 'parameter', 'called', 'parameter', 'index', 'choosing', 'anew', 'vector', 'indicated', 'population', 'running', 'index', 'length', 'vector', 'factor', 'applied', 'components', 'difference', 'vector', 'das', 'used', 'made', 'vary', 'vector', 'suggested', 'second', 'scheme', 'called', 'varying', 'scale', 'factor', 'individuals', 'sample', 'diverse', 'search', 'space', 'stages', 'search', 'exploration', 'stages', 'scale', 'factor', 'helps', 'adjust', 'trial', 'solutions', 'explore', 'small', 'space', 'global', 'optimum', 'lies', 'exploitation', 'works', 'chaotic', 'combined', 'order', 'enhance', 'population', 'diversity', 'avoid', 'state', 'stagnation', 'standard', 'global', 'optimum', 'obvious', 'reasons', 'means', 'population', 'converged', 'local', 'optimum', 'point', 'population', 'remaining', 'diverse', 'individuals', 'enter', 'population', 'algorithm', 'progress', 'finding', 'solutions', 'theory', 'study', 'behavior', 'deterministic', 'nonlinear', 'systems', 'chaotic', 'scale', 'factor', 'generations', 'map', 'simplest', 'dynamic', 'systems', 'chaotic', 'behavior', 'following', 'important', 'variants', 'continuous', 'single', 'objective', 'optimization', 'attention', 'researchers', 'diverse', 'domains', 'knowledge', 'world', 'resulted', 'variants', 'basic', 'algorithm', 'variants', 'devised', 'tackle', 'specific', 'applications', 'others', 'generalized', 'numerical', 'optimization', 'section', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'discussion', 'variants', 'developed', 'past', 'decade', 'competitive', 'existing', 'best', 'known', 'real', 'parameter', 'optimizers', 'differential', 'evolution', 'trigonometric', 'mutation', 'fan', 'lampinen', 'trigonometric', 'mutation', 'operator', 'speed', 'performance', 'implement', 'scheme', 'target', 'vector', 'distinct', 'vectors', 'selected', 'population', 'suppose', 'ith', 'target', 'vector', 'selected', 'population', 'members', 'indices', 'exclusive', 'integers', 'chosen', 'range', 'different', 'index', 'formed', 'according', 'following', 'equations', 'function', 'minimized', 'let', 'trigonometric', 'mutation', 'rate', 'interval', 'trigonometric', 'mutation', 'scheme', 'expressed', 'rand', 'scheme', 'fan', 'used', 'trigonometric', 'mutation', 'probability', 'mutation', 'scheme', 'rand', 'probability', 'differential', 'evolution', 'arithmetic', 'recombination', 'binomial', 'crossover', 'scheme', 'employed', 'variants', 'creates', 'combinations', 'parameters', 'parameter', 'values', 'binomial', 'crossover', 'spirit', 'discrete', 'recombination', 'used', 'conjunction', 'many', 'eas', 'continuous', 'arithmetic', 'recombination', 'individual', 'components', 'trial', 'vector', 'expressed', 'linear', 'combination', 'components', 'mutant', 'donor', 'vector', 'target', 'vector', 'common', 'form', 'arithmetic', 'recombination', 'vectors', 'adopted', 'eas', 'put', 'coefficient', 'combination', 'constant', 'random', 'variable', 'speaking', 'coefficient', 'sampled', 'anew', 'vector', 'resulting', 'process', 'known', 'line', 'recombination', 'combination', 'coefficient', 'anew', 'component', 'vectors', 'crossed', 'process', 'known', 'fig', 'domains', 'different', 'recombinant', 'vectors', 'generated', 'discrete', 'line', 'random', 'intermediate', 'recombination', 'intermediate', 'recombination', 'jth', 'component', 'fig', 'shows', 'regions', 'discrete', 'line', 'arithmetic', 'recombination', 'donor', 'vector', 'target', 'vector', 'coefficient', 'combination', 'distributed', 'random', 'number', 'recombinant', 'vectors', 'occupy', 'opposite', 'remaining', 'trial', 'vectors', 'created', 'discrete', 'recombination', 'line', 'recombination', 'name', 'suggests', 'searches', 'axis', 'recombinant', 'vectors', 'intermediate', 'recombination', 'entire', 'dimensional', 'volume', 'contained', 'fig', 'discrete', 'intermediate', 'recombination', 'invariant', 'processes', 'coordinate', 'system', 'angle', 'turn', 'area', 'intermediate', 'recombination', 'hand', 'line', 'recombination', 'invariant', 'recombination', 'process', 'invariant', 'price', 'trial', 'vector', 'generation', 'strategy', 'current', 'rand', 'replaces', 'binomial', 'crossover', 'operator', 'invariant', 'arithmetic', 'line', 'recombination', 'operator', 'generate', 'trial', 'vector', 'combining', 'target', 'vector', 'corresponding', 'donor', 'vector', 'follows', 'incorporating', 'combination', 'coefficient', 'shown', 'effective', 'chosen', 'uniform', 'random', 'distribution', 'constant', 'parameter', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'fig', 'change', 'trial', 'vectors', 'generated', 'discrete', 'random', 'intermediate', 'recombination', 'due', 'rotation', 'coordinate', 'system', 'indicate', 'trial', 'vectors', 'due', 'discrete', 'recombination', 'rotated', 'coordinate', 'system', 'rand', 'algorithm', 'price', 'state', 'art', 'rand', 'algorithm', 'trial', 'vectors', 'pure', 'occur', 'probability', 'pure', 'occur', 'probability', 'variant', 'shown', 'yield', 'competitive', 'results', 'classical', 'variants', 'rand_bin', 'target', 'best', 'bin', 'recent', 'comparative', 'study', 'scheme', 'trial', 'vector', 'generation', 'outlined', 'price', 'recommended', 'choice', 'parameter', 'given', 'rand', 'algorithm', 'provides', 'simple', 'implement', 'axis', 'search', 'indicating', 'combination', 'coefficient', 'arithmetic', 'crossover', 'scale', 'factor', 'scheme', 'provides', 'efficient', 'solutions', 'functions', 'best', 'minimized', 'mutation', 'recombination', 'functions', 'solved', 'operations', 'note', 'parameter', 'algorithm', 'relative', 'importance', 'mutation', 'arithmetic', 'recombination', 'schemes', 'price', 'value', 'interesting', 'investigate', 'possible', 'self', 'adapt', 'algorithm', 'able', 'decide', 'optimal', 'value', 'parameter', 'special', 'properties', 'objective', 'function', 'test', 'opposition', 'differential', 'evolution', 'concept', 'opposition', 'learning', 'introduced', 'applications', 'introduced', 'ode', 'faster', 'global', 'search', 'optimization', 'algorithm', 'finds', 'important', 'applications', 'noisy', 'optimization', 'problems', 'conventional', 'enhanced', 'opposition', 'number', 'optimization', 'concept', 'levels', 'population', 'initialization', 'generation', 'jumping', 'local', 'improvement', 'population', 'best', 'member', 'absence', 'priori', 'information', 'actual', 'optima', 'starts', 'random', 'improve', 'chance', 'starting', 'solution', 'fitness', 'opposite', 'solution', 'fitter', 'guess', 'opposite', 'guess', 'chosen', 'initial', 'solution', 'explained', 'according', 'probability', 'theory', 'guess', 'lower', 'fitness', 'value', 'opposite', 'guess', 'starting', 'fitter', 'potential', 'convergence', 'approach', 'applied', 'initial', 'solutions', 'solution', 'current', 'population', 'population', 'converge', 'smaller', 'neighborhood', 'surrounding', 'optimum', 'taking', 'opposition', 'moves', 'increase', 'diversity', 'population', 'addition', 'population', 'converges', 'magnitude', 'difference', 'vectors', 'become', 'smaller', 'difference', 'vectors', 'generated', 'parents', 'opposite', 'move', 'large', 'resulting', 'larger', 'perturbation', 'mutant', 'vector', 'ode', 'possesses', 'superior', 'capability', 'jump', 'local', 'optima', 'steps', 'ode', 'define', 'opposite', 'numbers', 'definition', 'let', 'real', 'number', 'defined', 'interval', 'opposite', 'number', 'defined', 'ode', 'changes', 'classical', 'concept', 'opposite', 'numbers', 'following', 'different', 'stages', 'opposition', 'population', 'initialization', 'distributed', 'random', 'population', 'generated', 'opposite', 'population', 'calculated', 'kth', 'opposite', 'individual', 'corresponding', 'kth', 'parameter', 'vector', 'following', 'denote', 'interval', 'parameter', 'kth', 'vector', 'fittest', 'individuals', 'selected', 'set', 'initial', 'population', 'opposition', 'generation', 'jumping', 'stage', 'iteration', 'generating', 'population', 'evolutionary', 'process', 'opposite', 'population', 'calculated', 'probability', 'fittest', 'individuals', 'selected', 'current', 'population', 'corresponding', 'opposite', 'population', 'opposition', 'best', 'individual', 'jumping', 'phase', 'difference', 'offspring', 'best', 'individual', 'current', 'population', 'created', 'best', 'xbest', 'different', 'random', 'integer', 'indices', 'selected', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'real', 'constant', 'next', 'opposite', 'offspring', 'generated', 'current', 'best', 'member', 'replaced', 'fittest', 'member', 'set', 'xbest', 'best', 'neighborhood', 'mutation', 'efficiency', 'eas', 'depends', 'extent', 'explorative', 'course', 'search', 'exploitation', 'means', 'ability', 'search', 'algorithm', 'information', 'collected', 'search', 'goal', 'exploration', 'process', 'allows', 'introduction', 'information', 'population', 'exploration', 'helps', 'algorithm', 'search', 'regions', 'large', 'search', 'volume', 'das', 'kinds', 'topological', 'neighborhood', 'models', 'order', 'achieve', 'balance', 'explorative', 'resulting', 'algorithm', 'called', 'degl', 'put', 'improvement', 'target', 'best', 'scheme', 'shows', 'poor', 'performance', 'multimodal', 'fitness', 'landscapes', 'noted', 'studies', 'mezura', 'montes', 'price', 'suppose', 'population', 'generation', 'vector', 'indices', 'sorted', 'obtained', 'initialization', 'order', 'preserve', 'diversity', 'neighborhood', 'vector', 'define', 'neighborhood', 'integer', 'neighborhood', 'size', 'smaller', 'population', 'size', 'consisting', 'vectors', 'assume', 'vectors', 'organized', 'ring', 'topology', 'respect', 'indices', 'vectors', 'immediate', 'neighbors', 'vector', 'member', 'population', 'local', 'donor', 'vector', 'created', 'employing', 'best', 'fittest', 'vector', 'neighborhood', 'member', 'vectors', 'chosen', 'neighborhood', 'model', 'expressed', 'indicates', 'best', 'vector', 'neighborhood', 'global', 'donor', 'vector', 'created', 'best', 'best', 'indicates', 'best', 'vector', 'entire', 'population', 'iteration', 'scaling', 'factors', 'combine', 'local', 'global', 'donor', 'vectors', 'weight', 'form', 'actual', 'donor', 'vector', 'algorithm', 'addition', 'donor', 'vector', 'generation', 'scheme', 'reduces', 'best', 'hence', 'latter', 'considered', 'special', 'case', 'general', 'strategy', 'involving', 'global', 'local', 'neighborhood', 'vector', 'note', 'target', 'best', 'present', 'form', 'exploitation', 'vectors', 'best', 'position', 'found', 'entire', 'population', 'converging', 'faster', 'point', 'degl', 'vector', 'neighborhood', 'set', 'parameter', 'vectors', 'connected', 'experience', 'updating', 'position', 'graph', 'connections', 'called', 'neighborhood', 'structure', 'neighborhood', 'connections', 'independent', 'positions', 'pointed', 'vectors', 'local', 'model', 'whenever', 'parameter', 'vector', 'points', 'region', 'search', 'space', 'influences', 'immediate', 'neighbors', 'second', 'degree', 'neighbors', 'influenced', 'connected', 'become', 'successful', 'information', 'spread', 'population', 'regarding', 'best', 'position', 'neighborhood', 'attraction', 'specific', 'points', 'weaker', 'reduces', 'local', 'minima', 'adaptive', 'selection', 'mutation', 'strategies', 'number', 'trial', 'vector', 'generation', 'strategies', 'effective', 'certain', 'problems', 'perform', 'others', 'qin', 'self', 'adaptive', 'variant', 'sade', 'control', 'parameter', 'values', 'trial', 'vector', 'generation', 'strategies', 'self', 'adapted', 'learning', 'previous', 'experiences', 'generating', 'promising', 'solutions', 'possible', 'determine', 'suitable', 'generation', 'strategy', 'parameter', 'settings', 'match', 'different', 'phases', 'search', 'process', 'evolution', 'sade', 'effective', 'trial', 'vector', 'generation', 'strategies', 'rand_bin', 'rand', 'best', 'bin', 'rand_bin', 'current', 'rand', 'chosen', 'constitute', 'strategy', 'candidate', 'pool', 'variants', 'binomial', 'type', 'crossover', 'last', 'uses', 'arithmetic', 'recombination', 'described', 'section', 'sade', 'algorithm', 'target', 'vector', 'current', 'population', 'trial', 'vector', 'generation', 'strategy', 'selected', 'candidate', 'pool', 'according', 'probability', 'learned', 'success', 'rate', 'generating', 'improved', 'solutions', 'survive', 'next', 'generation', 'certain', 'number', 'previous', 'generations', 'called', 'learning', 'period', 'selected', 'strategy', 'applied', 'corresponding', 'target', 'vector', 'generate', 'trial', 'vector', 'generation', 'probabilities', 'choosing', 'strategy', 'candidate', 'pool', 'summed', 'probabilities', 'equal', 'total', 'number', 'strategies', 'pool', 'adapted', 'evolution', 'success', 'failure', 'rates', 'previous', 'generations', 'probabilities', 'place', 'larger', 'success', 'rate', 'kth', 'strategy', 'pool', 'previous', 'generations', 'larger', 'probability', 'applying', 'generate', 'trial', 'vectors', 'current', 'generation', 'performance', 'sade', 'compared', 'conventional', 'adaptive', 'variants', 'ade', 'sde', 'jde', 'discussed', 'section', 'iii', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'suite', 'bound', 'constrained', 'numerical', 'optimization', 'problems', 'authors', 'reported', 'sade', 'effective', 'obtaining', 'quality', 'solutions', 'smaller', 'standard', 'deviations', 'higher', 'success', 'rates', 'adaptive', 'current', 'pbest', 'mutation', 'order', 'avoid', 'need', 'problem', 'specific', 'parameter', 'tuning', 'improve', 'convergence', 'characteristics', 'adaptive', 'variant', 'called', 'jade', 'algorithm', 'mutation', 'strategy', 'referred', 'authors', 'current', 'pbest', 'uses', 'external', 'archive', 'track', 'previous', 'history', 'success', 'failure', 'control', 'parameters', 'adaptive', 'manner', 'generations', 'current', 'pbest', 'strategy', 'greedy', 'generalization', 'current', 'strategy', 'best', 'individual', 'current', 'best', 'strategy', 'current', 'pbest', 'strategy', 'information', 'solutions', 'moreover', 'explored', 'inferior', 'solutions', 'incorporated', 'strategy', 'current', 'pbest', 'external', 'archive', 'generates', 'donor', 'vector', 'best', 'best', 'chosen', 'top', 'individuals', 'current', 'population', 'scale', 'factor', 'associated', 'ith', 'individual', 'updated', 'generation', 'jade', 'external', 'archive', 'explored', 'inferior', 'solutions', 'let', 'denote', 'archive', 'inferior', 'solutions', 'denote', 'current', 'population', 'current', 'external', 'archive', 'generates', 'donor', 'vector', 'best', 'best', 'selected', 'selected', 'random', 'current', 'population', 'archive', 'archive', 'operation', 'made', 'simple', 'avoid', 'significant', 'computation', 'archive', 'generation', 'parent', 'solutions', 'fail', 'selection', 'process', 'added', 'archive', 'archive', 'size', 'certain', 'threshold', 'solutions', 'eliminated', 'archive', 'keep', 'archive', 'size', 'fixed', 'hybrid', 'algorithms', 'context', 'metaheuristics', 'process', 'combining', 'best', 'features', 'algorithms', 'form', 'algorithm', 'expected', 'outperform', 'application', 'specific', 'general', 'benchmark', 'problems', 'past', 'years', 'several', 'global', 'optimization', 'algorithms', 'pso', 'ant', 'colony', 'systems', 'artificial', 'immune', 'systems', 'foraging', 'optimization', 'algorithm', 'bfoa', 'simulated', 'annealing', 'researchers', 'attempted', 'different', 'local', 'search', 'techniques', 'basic', 'improve', 'exploitation', 'abilities', 'section', 'discuss', 'hybrid', 'algorithms', 'parts', 'present', 'synergy', 'global', 'search', 'methods', 'second', 'review', 'local', 'search', 'algorithms', 'synergy', 'global', 'optimization', 'algorithms', 'concept', 'particle', 'swarms', 'introduced', 'human', 'social', 'become', 'popular', 'efficient', 'global', 'search', 'optimization', 'technique', 'synergy', 'pso', 'reported', 'combined', 'swarm', 'differential', 'evolution', 'algorithm', 'hybrid', 'optimizer', 'pso', 'optimizer', 'particle', 'positions', 'updated', 'offspring', 'fitness', 'particles', 'pso', 'swarm', 'specified', 'intervals', 'xie', 'popular', 'hybrid', 'algorithm', 'called', 'depso', 'original', 'pso', 'algorithm', 'operator', 'alternate', 'iterations', 'iterations', 'depso', 'achieved', 'convergence', 'results', 'original', 'algorithms', 'certain', 'constrained', 'optimization', 'problems', 'das', 'presented', 'coupled', 'synergy', 'pso', 'called', 'particle_swarm', 'optimization', 'perturbed', 'velocity', 'pso', 'pso', 'introduces', 'differential', 'operator', 'velocity', 'update', 'scheme', 'pso', 'conventional', 'pso', 'particle', 'shifted', 'location', 'location', 'yields', 'fitness', 'value', 'type', 'selection', 'strategy', 'incorporated', 'swarm', 'dynamics', 'hybrid', 'pso', 'similar', 'spirit', 'algorithm', 'pso', 'rand_bin', 'modified', 'pso', 'ring', 'topology', 'liu', 'similar', 'depso', 'used', 'train', 'artificial', 'neural', 'networks', 'reported', 'pso', 'hybrid', 'optimizer', 'gbest', 'model', 'best', 'bin', 'particular', 'hybrid', 'chaotic', 'local', 'search', 'improve', 'local', 'exploitation', 'ability', 'depso', 'named', 'algorithm', 'employed', 'select', 'control', 'parameters', 'line', 'pso', 'words', 'serves', 'meta', 'optimizer', 'optimization', 'search', 'behavior', 'hybrid', 'optimizer', 'pso', 'regarded', 'operators', 'generate', 'candidate', 'solutions', 'level', 'dimensional', 'components', 'individuals', 'omran', 'presented', 'pso', 'depso', 'named', 'depso', 'similar', 'hybrid', 'described', 'rand_bin', 'pso', 'pso', 'factor', 'alternate', 'stochastic', 'pso', 'level', 'whole', 'individual', 'individual', 'generation', 'updating', 'method', 'pso', 'probability', 'controlling', 'selection', 'updating', 'method', 'scaling', 'factor', 'dynamic', 'adaptive', 'second', 'hybrid', 'method', 'combined', 'pso', 'xue', 'described', 'scheme', 'operators', 'pso', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'das', 'modified', 'selection', 'mechanism', 'classical', 'family', 'concepts', 'probability', 'inferior', 'solutions', 'iterations', 'biswas', 'synergistic', 'bfoa', 'foraging', 'optimization', 'process', 'animal', 'maximize', 'energy', 'unit', 'foraging', 'bfoa', 'foraging', 'behavior', 'group', 'computational', 'step', 'bfoa', 'stochastic', 'gradient', 'search', 'coupled', 'type', 'mutation', 'crossing', 'optimization', 'agents', 'leading', 'hybrid', 'algorithm', 'called', 'differential', 'evolution', 'ant', 'colony', 'optimizer', 'propose', 'hybrid', 'binary', 'tackling', 'discrete', 'optimization', 'problems', 'ali', 'attraction', 'concept', 'algorithm', 'mutation', 'operation', 'original', 'synergy', 'local', 'search', 'methods', 'local', 'search', 'algorithms', 'explore', 'small', 'neighborhood', 'candidate', 'solution', 'search', 'space', 'optimal', 'point', 'found', 'bound', 'noman', 'iba', 'crossover', 'adaptive', 'local', 'search', 'operation', 'improve', 'performance', 'classical', 'candidate', 'solution', 'solution', 'choice', 'move', 'taken', 'information', 'solutions', 'current', 'hence', 'name', 'local', 'search', 'choice', 'solution', 'done', 'taking', 'criterion', 'metaheuristic', 'takes', 'name', 'authors', 'length', 'search', 'adjusted', 'hill', 'climbing', 'heuristic', 'crossover', 'local', 'search', 'adaptive', 'length', 'adaptive', 'length', 'resulted', 'variant', 'called', 'authors', 'simplex', 'crossover', 'scheme', 'real', 'coded', 'gas', 'experimental', 'results', 'reported', 'noman', 'iba', 'indicated', 'outperform', 'classical', 'rand_bin', 'terms', 'convergence', 'speed', 'set', 'chosen', 'numerical', 'benchmarks', 'overall', 'performance', 'adaptive', 'scheme', 'crossover', 'strategies', 'overall', 'performance', 'algorithm', 'shown', 'superior', 'least', 'comparable', 'memetic', 'algorithms', 'selected', 'literature', 'yang', 'neighborhood', 'search', 'appears', 'main', 'strategy', 'resulting', 'algorithm', 'known', 'nsde', 'performs', 'mutation', 'adding', 'distributed', 'random', 'value', 'target', 'vector', 'component', 'following', 'randi', 'usual', 'difference', 'vector', 'denotes', 'cauchy', 'random', 'variable', 'scale', 'parameter', 'yang', 'used', 'self', 'adaptive', 'nsde', 'cooperative', 'coevolution', 'framework', 'capable', 'optimizing', 'large', 'scale', 'non', 'separable', 'problems', 'dimensions', 'random', 'scheme', 'adaptive', 'problem', 'decomposition', 'coevolution', 'similar', 'spirit', 'study', 'yang', 'self', 'adaptive', 'neighborhood', 'search', 'sansde', 'sansde', 'incorporates', 'self', 'adaptation', 'ideas', 'qin', 'sade', 'self', 'adaptive', 'strategies', 'self', 'adaptive', 'choice', 'mutation', 'strategy', 'alternatives', 'self', 'adaptation', 'scale', 'factor', 'self', 'adaptation', 'crossover', 'rate', 'yang', 'works', 'nsde', 'sansde', 'topological', 'neighborhood', 'mutation', 'scheme', 'authors', 'keep', 'scale', 'factor', 'non', 'random', 'ring', 'shaped', 'neighborhood', 'topology', 'inspired', 'pso', 'defined', 'index', 'graph', 'parameter', 'vectors', 'local', 'neighborhood', 'mutation', 'model', 'weight', 'factor', 'kinds', 'mutation', 'models', 'made', 'self', 'adaptive', 'variants', 'algorithms', 'described', 'represent', 'recent', 'growing', 'areas', 'research', 'evolutionary', 'computation', 'term', 'used', 'denote', 'synergy', 'evolutionary', 'approach', 'separate', 'individual', 'learning', 'local', 'improvement', 'procedures', 'problem', 'search', 'neri', 'tirronen', 'employs', 'self', 'adaptive', 'scheme', 'local', 'search', 'algorithms', 'algorithm', 'referred', 'authors', 'scale', 'factor', 'local', 'search', 'differential', 'evolution', 'local', 'search', 'algorithms', 'value', 'scale', 'factor', 'corresponding', 'offspring', 'higher', 'fitness', 'generation', 'executed', 'local', 'search', 'algorithms', 'global', 'search', 'generate', 'offspring', 'higher', 'fitness', 'promote', 'generation', 'enhanced', 'solutions', 'evolutionary', 'framework', 'tirronen', 'employing', 'local', 'search', 'algorithms', 'means', 'fitness', 'diversity', 'adaptation', 'probabilistic', 'scheme', 'digital', 'produced', 'industrial', 'process', 'incorporated', 'pso', 'algorithms', 'nelder', 'mead', 'algorithm', 'rosenbrock', 'algorithm', 'framework', 'main', 'idea', 'pso', 'improve', 'solution', 'poor', 'fitness', 'include', 'population', 'solution', 'called', 'authors', 'fit', 'individual', 'leading', 'search', 'local', 'main', 'search', 'improvement', 'performance', 'role', 'algorithms', 'much', 'clear', 'variants', 'discrete', 'binary', 'optimization', 'devised', 'real', 'parameter', 'optimization', 'years', 'researchers', 'tried', 'modify', 'tackling', 'binary', 'discrete', 'optimization', 'problems', 'research', 'lampinen', 'zelinka', 'focused', 'direction', 'conference', 'article', 'mendel', 'handling', 'integer', 'variables', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'recommended', 'parameter', 'values', 'objective', 'function', 'evaluation', 'population', 'works', 'point', 'values', 'pointed', 'changes', 'effective', 'objective', 'function', 'landscape', 'point', 'view', 'introducing', 'flat', 'areas', 'fitness', 'landscape', 'self', 'adaptive', 'reproduction', 'scheme', 'able', 'move', 'flat', 'areas', 'lampinen', 'zelinka', 'came', 'straightforward', 'approach', 'optimizing', 'discrete', 'parameters', 'limited', 'set', 'standard', 'values', 'example', 'size', 'size', 'limited', 'set', 'available', 'standard', 'sizes', 'discrete', 'value', 'optimized', 'works', 'integer', 'value', 'index', 'points', 'actual', 'discrete', 'value', 'discrete', 'set', 'available', 'values', 'sequence', 'index', 'assigned', 'refer', 'available', 'value', 'works', 'indices', 'optimizing', 'index', 'integer', 'variable', 'objective', 'function', 'evaluation', 'actual', 'discrete', 'value', 'pointed', 'index', 'used', 'tasgetiren', 'presented', 'algorithm', 'solve', 'permutation', 'scheduling', 'problem', 'criterion', 'traditional', 'continuous', 'algorithm', 'smallest', 'position', 'value', 'rule', 'presented', 'continuous', 'vector', 'discrete', 'job', 'permutation', 'presented', 'variant', 'solving', 'scheduling', 'problems', 'tasgetiren', 'discrete', 'differential', 'evolution', 'algorithm', 'dde', 'scheduling', 'problem', 'total', 'flow', 'criterion', 'dde', 'discrete', 'version', 'mutation', 'crossover', 'operator', 'employed', 'order', 'improve', 'solution', 'quality', 'variable', 'neighborhood', 'local', 'search', 'dde', 'algorithm', 'dde', 'algorithm', 'presented', 'tasgetiren', 'total', 'common', 'due', 'date', 'single', 'machine', 'mutation', 'crossover', 'operator', 'used', 'binary', 'context', 'local', 'search', 'employed', 'improve', 'solution', 'quality', 'similar', 'approach', 'working', 'continuous', 'domain', 'presented', 'solve', 'total', 'common', 'due', 'date', 'single', 'machine', 'continuous', 'vector', 'fact', 'value', 'equal', 'string', 'indicates', 'corresponding', 'job', 'job', 'selfadaptive', 'differential', 'evolution', 'heuristic', 'stage', 'scheduling', 'problem', 'minimize', 'maximum', 'times', 'presented', 'dde', 'solve', 'permutation', 'scheduling', 'problem', 'approach', 'solve', 'scheduling', 'problem', 'tasgetiren', 'developed', 'dde', 'single', 'machine', 'total', 'weighted', 'problem', 'sequence', 'dependent', 'times', 'novel', 'speed', 'methods', 'presented', 'developed', 'novel', 'differential', 'evolution', 'algorithm', 'criteria', 'flow', 'shop', 'scheduling', 'problems', 'wang', 'hybrid', 'discrete', 'differential', 'evolution', 'algorithm', 'flow', 'shop', 'scheduling', 'problems', 'criteria', 'presented', 'solve', 'multiobjective', 'flow', 'shop', 'scheduling', 'limited', 'tasgetiren', 'ensemble', 'discrete', 'differential', 'evolution', 'algorithms', 'solving', 'generalized', 'traveling', 'salesman', 'problem', 'fact', 'ensemble', 'procedures', 'iterated', 'greedy', 'algorithm', 'crossover', 'operators', 'achieved', 'parallel', 'populations', 'addition', 'presented', 'variant', 'solving', 'constrained', 'scheduling', 'problems', 'dde', 'applied', 'solve', 'permutation', 'flow', 'shop', 'scheduling', 'problems', 'additional', 'discrete', 'combinatorial', 'applications', 'algorithms', 'presented', 'detail', 'variant', 'binary', 'problem', 'spaces', 'basic', 'search', 'mechanism', 'classical', 'algorithm', 'named', 'authors', 'angle', 'employs', 'trigonometric', 'function', 'bit', 'string', 'trigonometric', 'generating', 'function', 'used', 'angle', 'function', 'function', 'given', 'single', 'element', 'set', 'intervals', 'determined', 'required', 'number', 'bits', 'need', 'generated', 'used', 'evolve', 'trigonometric', 'function', 'continuous', 'space', 'binary', 'space', 'evolving', 'higher', 'dimensional', 'binary', 'solution', 'angle', 'used', 'reduce', 'complexity', 'problem', 'continuous', 'valued', 'problem', 'used', 'discrete', 'binary', 'differential', 'evolution', 'approach', 'solve', 'unit', 'problem', 'parallel', 'huge', 'development', 'computational', 'resources', 'parallel', 'computing', 'emerged', 'form', 'high', 'performance', 'computation', 'many', 'carried', 'principle', 'large', 'problems', 'divided', 'smaller', 'ones', 'solved', 'parallel', 'eas', 'improving', 'speed', 'accuracy', 'expensive', 'optimization', 'problems', 'fact', 'member', 'population', 'evaluated', 'phase', 'algorithm', 'communication', 'individuals', 'reproduction', 'phase', 'made', 'parallel', 'pair', 'vectors', 'attempt', 'distribute', 'connected', 'local', 'area', 'networks', 'made', 'lampinen', 'method', 'whole', 'population', 'kept', 'master', 'processor', 'individuals', 'performing', 'operations', 'lampinen', 'scheme', 'overcome', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'drawbacks', 'due', 'speed', 'parallel', 'scheme', 'entire', 'subpopulation', 'processor', 'different', 'subpopulations', 'evolve', 'solution', 'promote', 'information', 'sharing', 'best', 'individual', 'subpopulation', 'allowed', 'move', 'subpopulations', 'according', 'predefined', 'topology', 'operation', 'known', 'migration', 'parallel', 'literature', 'model', 'gas', 'migration', 'chosen', 'individual', 'subpopulation', 'suggested', 'replace', 'member', 'best', 'member', 'subpopulation', 'topological', 'neighborhood', 'former', 'subpopulation', 'following', 'scale', 'factor', 'mechanism', 'conjunction', 'distributed', 'ring', 'topology', 'migration', 'scheme', 'framework', 'sub', 'population', 'characterized', 'scale', 'factor', 'value', 'probabilistic', 'criterion', 'individual', 'best', 'performance', 'neighbor', 'population', 'replaces', 'selected', 'individual', 'target', 'subpopulation', 'target', 'sub', 'population', 'individual', 'scale', 'factor', 'seems', 'promising', 'current', 'stage', 'evolution', 'complex', 'environments', 'section', 'handling', 'multiobjective', 'constrained', 'large', 'scale', 'optimization', 'problems', 'modifications', 'optimization', 'dynamic', 'uncertain', 'environments', 'multiobjective', 'optimization', 'due', 'multiple', 'criteria', 'nature', 'real', 'world', 'problems', 'multiobjective', 'optimization', 'problems', 'engineering', 'applications', 'name', 'indicates', 'multiobjective', 'optimization', 'problems', 'multiple', 'objectives', 'optimized', 'results', 'group', 'alternative', 'solutions', 'considered', 'equivalent', 'absence', 'information', 'concerning', 'others', 'concepts', 'dominance', 'presented', 'following', 'definition', 'consider', 'loss', 'generality', 'following', 'multiobjective', 'optimization', 'problem', 'decision', 'variables', 'parameters', 'objectives', 'minimize', 'called', 'decision', 'parameter', 'vector', 'parameter', 'space', 'objective', 'vector', 'objective', 'space', 'decision', 'vector', 'said', 'dominate', 'decision', 'vector', 'written', 'minimization', 'define', 'non', 'dominated', 'pareto', 'optimal', 'solutions', 'follows', 'definition', 'let', 'arbitrary', 'decision', 'vector', 'decision', 'vector', 'said', 'non', 'dominated', 'regarding', 'set', 'vector', 'dominate', 'decision', 'parameter', 'vector', 'called', 'non', 'dominated', 'regarding', 'whole', 'parameter', 'space', 'many', 'evolutionary', 'algorithms', 'researchers', 'tackle', 'multiobjective', 'problems', 'recent', 'past', 'extends', 'handling', 'problems', 'idea', 'pareto', 'dominance', 'rand_bin', 'external', 'archive', 'called', 'pareto', 'optimal', 'set', 'authors', 'known', 'current', 'non', 'dominated', 'set', 'used', 'store', 'non', 'dominated', 'solutions', 'obtained', 'search', 'approach', 'incorporates', 'fitness', 'sharing', 'maintain', 'diversity', 'presented', 'pareto', 'differential', 'evolution', 'algorithm', 'problems', 'continuous', 'variables', 'achieved', 'competitive', 'results', 'compared', 'evolution', 'algorithms', 'literature', 'obvious', 'select', 'best', 'crossover', 'mutation', 'rates', 'running', 'algorithm', 'different', 'rates', 'main', 'population', 'reproduction', 'undertaken', 'non', 'dominated', 'solutions', 'offspring', 'population', 'dominate', 'main', 'parent', 'distance', 'metric', 'used', 'maintain', 'diversity', 'abbass', 'presented', 'approach', 'called', 'memetic', 'pareto', 'artificial', 'neural', 'networks', 'approach', 'consists', 'enhanced', 'local', 'search', 'algorithm', 'order', 'speed', 'convergence', 'kukkonen', 'lampinen', 'extended', 'rand_bin', 'solve', 'multiobjective', 'optimization', 'problems', 'approach', 'called', 'generalized', 'differential', 'evolution', 'version', 'approach', 'authors', 'modified', 'original', 'selection', 'operation', 'introducing', 'pareto', 'dominance', 'selection', 'criterion', 'second', 'version', 'called', 'crowding', 'distance', 'measure', 'used', 'select', 'best', 'solution', 'deal', 'regarding', 'slow', 'convergence', 'kukkonen', 'lampinen', 'improved', 'version', 'called', 'combination', 'versions', 'pareto', 'differential', 'evolution', 'algorithm', 'version', 'added', 'growing', 'population', 'size', 'nondominated', 'sorting', 'nsgaii', 'improve', 'distribution', 'solutions', 'final', 'pareto', 'front', 'decrease', 'sensitivity', 'approach', 'initial', 'parameters', 'coello', 'coello', 'approach', 'populations', 'main', 'population', 'used', 'select', 'parents', 'secondary', 'external', 'population', 'concept', 'dominance', 'adopted', 'nondominated', 'solutions', 'found', 'distribute', 'uniform', 'xue', 'came', 'multiobjective', 'mode', 'best', 'individual', 'adopted', 'create', 'offspring', 'pareto', 'approach', 'introduced', 'implement', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'selection', 'best', 'individual', 'solution', 'dominated', 'set', 'non', 'dominated', 'individuals', 'identified', 'best', 'individual', 'picked', 'set', 'authors', 'selection', 'pareto', 'ranking', 'crowding', 'distance', 'order', 'produce', 'maintain', 'distributed', 'solutions', 'presented', 'multiobjective', 'optimization', 'called', 'algorithm', 'advantages', 'mechanisms', 'pareto', 'ranking', 'crowding', 'distance', 'sorting', 'maintains', 'population', 'extended', 'created', 'part', 'subsequent', 'enables', 'fast', 'convergence', 'true', 'pareto', 'front', 'non', 'dominated', 'sorting', 'crowding', 'distance', 'derived', 'nsga', 'extended', 'population', 'uniform', 'spread', 'solutions', 'non', 'dominated', 'sorting', 'nsde', 'simple', 'nsga', 'difference', 'approach', 'nsga', 'method', 'generating', 'individuals', 'nsga', 'uses', 'real', 'coded', 'crossover', 'mutation', 'operator', 'nsde', 'operators', 'replaced', 'operators', 'differential', 'evolution', 'nsde', 'shown', 'outperform', 'nsga', 'set', 'rotated', 'problems', 'strong', 'variables', 'researchers', 'approaches', 'non', 'pareto', 'multiobjective', 'concepts', 'combination', 'functions', 'problem', 'transformation', 'example', 'algorithm', 'problems', 'uses', 'rand_bin', 'variant', 'different', 'mechanisms', 'solve', 'objective', 'problems', 'incorporating', 'objective', 'function', 'constraint', 'function', 'zhang', 'multiobjective', 'differential', 'evolution', 'algorithm', 'decomposition', 'moea', 'continuous', 'multiobjective', 'optimization', 'problems', 'variable', 'rand_bin', 'scheme', 'used', 'generating', 'trial', 'solutions', 'neighborhood', 'sub', 'problems', 'generated', 'defined', 'similar', 'optimal', 'solutions', 'introduce', 'general', 'class', 'continuous', 'problems', 'complicated', 'pareto', 'set', 'reported', 'moea', 'nsga', 'type', 'reproduction', 'operators', 'summation', 'normalized', 'objective', 'values', 'diversified', 'selection', 'approach', 'used', 'need', 'performing', 'non', 'dominated', 'sorting', 'authors', 'consider', 'approaches', 'set', 'schemes', 'mixed', 'multiobjective', 'algorithm', 'examples', 'combined', 'techniques', 'vector', 'evaluated', 'coello', 'coello', 'constraint', 'technique', 'single', 'objective', 'evolutionary', 'optimizer', 'concept', 'self', 'adaptive', 'extended', 'handle', 'problems', 'constrained', 'optimization', 'real', 'world', 'optimization', 'problems', 'finding', 'solution', 'optimal', 'constraints', 'general', 'formulation', 'constrained', 'optimization', 'given', 'following', 'definition', 'find', 'minimize', 'subjected', 'inequality', 'constraints', 'constraints', 'boundary', 'constraints', 'min', 'max', 'boundary', 'constraints', 'common', 'real', 'world', 'applications', 'parameters', 'related', 'physical', 'components', 'measures', 'natural', 'bounds', 'resistance', 'mass', 'object', 'negative', 'order', 'tackle', 'boundary', 'constraints', 'penalty', 'methods', 'solutions', 'restricted', 'areas', 'action', 'objective', 'function', 'criterion', 'uses', 'following', 'kinds', 'penalty', 'method', 'handle', 'boundary', 'constraint', 'violation', 'penalty', 'parameter', 'vector', 'falls', 'pre', 'defined', 'lower', 'upper', 'bounds', 'objective', 'function', 'value', 'vector', 'made', 'high', 'fixed', 'number', 'guarantee', 'gets', 'selected', 'adaptive', 'penalty', 'similar', 'penalty', 'increase', 'objective', 'function', 'value', 'vector', 'depend', 'number', 'parameters', 'violating', 'bound', 'constraints', 'violation', 'random', 'replaces', 'parameter', 'bounds', 'chosen', 'value', 'allowed', 'range', 'following', 'parameter', 'bound', 'corresponding', 'parameter', 'base', 'vector', 'known', 'extension', 'handling', 'inequality', 'constrained', 'optimization', 'problems', 'design', 'storn', 'called', 'constraint', 'adaptation', 'generates', 'children', 'individual', 'selected', 'distinct', 'individuals', 'current', 'generation', 'individuals', 'survive', 'next', 'generation', 'mezura', 'montes', 'used', 'concept', 'solve', 'constrained', 'optimization', 'problems', 'zhang', 'mixed', 'dynamic', 'stochastic', 'ranking', 'framework', 'obtained', 'promising', 'performance', 'benchmarks', 'taken', 'cec', 'competition', 'constrained', 'optimization', 'lampinen', 'applied', 'tackle', 'constrained', 'problems', 'pareto', 'dominance', 'constraints', 'space', 'mezura', 'montes', 'deb', 'rules', 'deal', 'constraints', 'kukkonen', 'lampinen', 'presented', 'approach', 'solve', 'constrained', 'multiobjective', 'optimization', 'problems', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'used', 'deb', 'rules', 'solve', 'constrained', 'optimization', 'problems', 'researchers', 'tried', 'hybrid', 'approaches', 'gradient', 'mutation', 'derived', 'constraint', 'equations', 'pso', 'algorithm', 'uses', 'dynamic', 'control', 'constraint', 'violation', 'specified', 'level', 'achieved', 'rank', 'cec', 'competition', 'constrained', 'real', 'parameter', 'optimization', 'tasgetiren', 'suganthan', 'presented', 'multi', 'algorithm', 'solve', 'real', 'parameter', 'constrained', 'optimization', 'problems', 'employed', 'threshold', 'algorithm', 'infeasible', 'solutions', 'mezura', 'montes', 'approach', 'attempts', 'increase', 'probability', 'parent', 'generate', 'offspring', 'done', 'solution', 'generate', 'offspring', 'different', 'mutation', 'operator', 'information', 'best', 'solution', 'population', 'information', 'current', 'parent', 'find', 'search', 'directions', 'hand', 'studies', 'reported', 'regarding', 'parameter', 'control', 'constrained', 'optimization', 'brest', 'adaptive', 'parameter', 'control', 'parameters', 'related', 'crossover', 'mutation', 'operators', 'huang', 'used', 'adaptive', 'mechanism', 'select', 'set', 'variants', 'used', 'generation', 'vectors', 'success', 'measure', 'moreover', 'adapted', 'parameters', 'control', 'variation', 'operators', 'mezura', 'montes', 'presented', 'adaptive', 'parameter', 'control', 'diversity', 'differential', 'evolution', 'dde', 'algorithm', 'constrained', 'optimization', 'parameters', 'scale', 'factor', 'crossover', 'rate', 'number', 'offspring', 'generated', 'target', 'vector', 'self', 'adapted', 'encoding', 'individual', 'fourth', 'parameter', 'called', 'selection', 'ratio', 'controlled', 'deterministic', 'approach', 'huang', 'presented', 'cooperative', 'approach', 'conjunction', 'constrained', 'optimization', 'problems', 'algorithm', 'special', 'penalty', 'function', 'designed', 'handle', 'constraints', 'second', 'evolution', 'model', 'presented', 'employed', 'perform', 'evolutionary', 'search', 'spaces', 'solutions', 'penalty', 'factors', 'solutions', 'penalty', 'factors', 'evolve', 'self', 'satisfactory', 'solutions', 'suitable', 'penalty', 'factors', 'obtained', 'ali', 'local', 'exploration', 'constrained', 'global', 'optimization', 'used', 'restricted', 'version', 'pattern', 'search', 'method', 'local', 'technique', 'constraint', 'handling', 'methods', 'feasible', 'points', 'parameter', 'free', 'penalty', 'employed', 'extended', 'handle', 'constrained', 'problems', 'stage', 'hybrid', 'approach', 'version', 'used', 'generate', 'initial', 'approximation', 'pareto', 'front', 'second', 'stage', 'set', 'theory', 'used', 'improve', 'spread', 'quality', 'initial', 'approximation', 'large', 'scale', 'optimization', 'past', 'several', 'kinds', 'nature', 'inspired', 'optimization', 'algorithms', 'designed', 'applied', 'solve', 'optimization', 'problems', 'approaches', 'shown', 'search', 'abilities', 'applied', 'dimensional', 'problems', 'performance', 'deteriorates', 'dimensionality', 'search', 'space', 'increases', 'reasons', 'appear', 'complexity', 'problem', 'increases', 'size', 'problem', 'successful', 'search', 'strategy', 'longer', 'capable', 'finding', 'optimal', 'solution', 'second', 'solution', 'space', 'problem', 'increases', 'problem', 'size', 'efficient', 'search', 'strategy', 'required', 'explore', 'promising', 'regions', 'given', 'performance', 'basic', 'schemes', 'increase', 'problem', 'dimensions', 'important', 'attempts', 'made', 'researchers', 'suitable', 'handling', 'large', 'scale', 'optimization', 'problems', 'noman', 'iba', 'fittest', 'individual', 'crossover', 'local', 'search', 'method', 'scheme', 'search', 'capability', 'exploration', 'neighborhood', 'best', 'solution', 'successive', 'generations', 'memetic', 'version', 'shown', 'obtain', 'solution', 'lower', 'number', 'evaluations', 'higher', 'dimensional', 'functions', 'memetic', 'high', 'dimensional', 'optimization', 'presented', 'wang', 'stochastic', 'properties', 'chaotic', 'system', 'used', 'spread', 'individuals', 'search', 'spaces', 'much', 'possible', 'simplex', 'search', 'method', 'employed', 'speed', 'local', 'operators', 'help', 'algorithm', 'jump', 'point', 'terms', 'optimizing', 'high', 'dimensional', 'problems', 'cooperative', 'evolution', 'gas', 'following', 'strategy', 'effective', 'choice', 'problem', 'decomposition', 'object', 'vectors', 'smaller', 'subcomponents', 'optimize', 'subcomponents', 'evolve', 'certain', 'optimizer', 'cooperative', 'combination', 'combine', 'subcomponents', 'form', 'whole', 'system', 'authors', 'variants', 'self', 'adaptive', 'nsde', 'sansde', 'synergy', 'works', 'reported', 'cooperative', 'evolutionary', 'framework', 'novel', 'strategies', 'problem', 'decomposition', 'subcomponents', 'algorithms', 'tested', 'set', 'used', 'benchmarks', 'scaled', 'dimensions', 'important', 'extension', 'performance', 'rotated', 'high', 'dimensional', 'functions', 'reported', 'authors', 'random', 'scheme', 'adaptive', 'problem', 'decomposition', 'coevolution', 'theoretical', 'analysis', 'presented', 'show', 'framework', 'effective', 'optimizing', 'large', 'non', 'separable', 'problems', 'theoretical', 'analysis', 'illustrates', 'strategies', 'help', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'variable', 'non', 'separable', 'problems', 'devised', 'cooperative', 'micro', 'employs', 'small', 'cooperative', 'subpopulations', 'individuals', 'subcomponents', 'original', 'problem', 'solution', 'subcomponents', 'combined', 'subpopulations', 'complete', 'solutions', 'problem', 'variant', 'large', 'scale', 'global', 'optimization', 'original', 'extended', 'normal', 'self', 'adaptation', 'control', 'parameters', 'combined', 'cooperative', 'evolution', 'dimension', 'decomposition', 'mechanism', 'approaches', 'presented', 'framework', 'gaussian', 'process', 'solving', 'large', 'scale', 'expensive', 'problems', 'brest', 'investigated', 'self', 'adaptive', 'abbreviated', 'control', 'parameters', 'self', 'adapted', 'population', 'size', 'reduction', 'method', 'used', 'algorithm', 'employs', 'mechanism', 'changing', 'probability', 'fitness', 'values', 'chosen', 'vectors', 'mutation', 'step', 'algorithm', 'achieved', 'third', 'rank', 'cec', 'special', 'session', 'competition', 'high', 'dimensional', 'real', 'parameter', 'optimization', 'included', 'non', 'separable', 'functions', 'schwefel', 'problem', 'griewank', 'function', 'function', 'optimization', 'dynamic', 'uncertain', 'environments', 'many', 'real', 'world', 'applications', 'eas', 'deal', 'optimization', 'problems', 'presence', 'wide', 'range', 'general', 'ways', 'uncertainty', 'computing', 'environment', 'fitness', 'function', 'noisy', 'second', 'design', 'variables', 'parameters', 'change', 'optimization', 'quality', 'obtained', 'optimal', 'solution', 'robust', 'changes', 'deviations', 'optimal', 'point', 'third', 'fitness', 'function', 'means', 'fitness', 'function', 'approximation', 'errors', 'optimum', 'problem', 'solved', 'changes', 'location', 'optimizer', 'able', 'track', 'optimum', 'cases', 'eas', 'additional', 'measures', 'able', 'noisy', 'problem', 'deterministic', 'choice', 'scale', 'factor', 'greedy', 'selection', 'methods', 'standard', 'fail', 'handling', 'noisy', 'fitness', 'function', 'shown', 'looking', 'problem', 'different', 'perspective', 'employs', 'much', 'deterministic', 'search', 'logic', 'noisy', 'environment', 'tends', 'das', 'made', 'attempt', 'improve', 'performance', 'noisy', 'functions', 'varying', 'scale', 'factor', 'incorporating', 'greedy', 'selection', 'mechanisms', 'threshold', 'selection', 'stochastic', 'selection', 'liu', 'combined', 'advantages', 'algorithm', 'optimal', 'computing', 'allocation', 'technique', 'simulated', 'annealing', 'algorithm', 'robust', 'hybrid', 'method', 'abbreviated', 'noisy', 'environments', 'presented', 'algorithm', 'developed', 'optimize', 'varying', 'objective', 'functions', 'need', 'parameter', 'control', 'strategy', 'main', 'components', 'follows', 'usage', 'several', 'populations', 'parallel', 'usage', 'uniform', 'maintain', 'diversity', 'population', 'approaches', 'population', 'best', 'individual', 'population', 'gets', 'best', 'individual', 'population', 'population', 'absolute', 'best', 'individual', 'kept', 'various', 'populations', 'population', 'vectors', 'adding', 'random', 'deviation', 'components', 'authors', 'show', 'algorithm', 'capable', 'solving', 'moving', 'benchmark', 'described', 'brest', 'investigated', 'self', 'adaptive', 'algorithm', 'jde', 'control', 'parameters', 'self', 'adapted', 'multi', 'population', 'method', 'mechanism', 'used', 'handle', 'dynamic', 'fitness', 'landscapes', 'algorithm', 'achieved', 'rank', 'competition', 'evolutionary', 'computation', 'dynamic', 'uncertain', 'environments', 'presented', 'trigonometric', 'differential', 'evolution', 'algorithm', 'fan', 'lampinen', 'trigonometric', 'mutation', 'scheme', 'solving', 'dynamic', 'optimization', 'problems', 'chemical', 'engineering', 'multimodal', 'optimization', 'niching', 'many', 'practical', 'objective', 'functions', 'multimodal', 'likely', 'several', 'high', 'quality', 'global', 'local', 'solutions', 'desirable', 'identify', 'many', 'solutions', 'possible', 'appropriate', 'solution', 'chosen', 'order', 'identify', 'many', 'solutions', 'multimodal', 'optimization', 'problem', 'several', 'niching', 'techniques', 'developed', 'niching', 'method', 'maintain', 'multiple', 'single', 'population', 'order', 'locate', 'different', 'optima', 'niching', 'techniques', 'include', 'crowding', 'fitness', 'sharing', 'restricted', 'tournament', 'selection', 'crowding', 'method', 'allows', 'competition', 'limited', 'resources', 'similar', 'individuals', 'niche', 'similarity', 'measured', 'distance', 'individuals', 'method', 'compares', 'offspring', 'sampled', 'individuals', 'current', 'population', 'similar', 'individual', 'replaced', 'offspring', 'superior', 'extended', 'crowding', 'scheme', 'named', 'crowding', 'solve', 'multimodal', 'optimization', 'problems', 'offspring', 'generated', 'compete', 'similar', 'measured', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'euclidean', 'distance', 'individual', 'population', 'offspring', 'replace', 'individual', 'fitness', 'value', 'fitness', 'sharing', 'method', 'population', 'different', 'according', 'parameter', 'space', 'similarity', 'individuals', 'individual', 'information', 'individuals', 'niche', 'fitness', 'ith', 'individual', 'represented', 'following', 'equation', 'dij', 'sharing', 'function', 'calculated', 'dij', 'dij', 'dij', 'dij', 'distance', 'individuals', 'sharing', 'population', 'size', 'constant', 'called', 'sharing', 'level', 'fitness', 'sharing', 'concept', 'form', 'sharing', 'restricted', 'tournament', 'selection', 'method', 'uses', 'tournament', 'selection', 'multimodal', 'optimization', 'algorithm', 'chooses', 'random', 'sample', 'window', 'size', 'individuals', 'population', 'nearest', 'offspring', 'euclidean', 'real', 'variables', 'hamming', 'binary', 'variables', 'distance', 'measure', 'nearest', 'member', 'individuals', 'compete', 'offspring', 'higher', 'fitness', 'survive', 'next', 'generation', 'implemented', 'ensemble', 'different', 'window', 'sizes', 'search', 'method', 'analytical', 'studies', 'theoretical', 'empirical', 'properties', 'evolutionary', 'algorithms', 'important', 'search', 'efficient', 'algorithms', 'compared', 'works', 'concerning', 'empirical', 'study', 'parameter', 'selection', 'tuning', 'process', 'much', 'research', 'devoted', 'search', 'mechanism', 'convergence', 'properties', 'area', 'remains', 'open', 'future', 'research', 'discuss', 'analytical', 'results', 'obtained', 'population', 'variance', 'explorative', 'power', 'significant', 'theoretical', 'results', 'reported', 'extended', 'zaharie', 'analyzed', 'influence', 'variation', 'operators', 'mutation', 'recombination', 'parameters', 'expected', 'population', 'variance', 'zaharie', 'showed', 'expected', 'population', 'variance', 'applying', 'mutation', 'recombination', 'selection', 'greater', 'algorithm', 'analyzed', 'finding', 'explain', 'extent', 'performance', 'certain', 'test', 'functions', 'zaharie', 'analyzed', 'impact', 'expected', 'population', 'mean', 'variance', 'several', 'variants', 'mutation', 'crossover', 'operators', 'used', 'algorithms', 'analysis', 'simple', 'variance', 'mutation', 'operator', 'differences', 'impact', 'population', 'variance', 'classical', 'operators', 'presented', 'preliminary', 'analysis', 'distribution', 'probability', 'population', 'case', 'algorithm', 'binary', 'encoding', 'role', 'crossover', 'influence', 'crossover', 'rate', 'distribution', 'number', 'mutated', 'components', 'probability', 'component', 'taken', 'mutant', 'vector', 'mutation', 'probability', 'analyzed', 'several', 'variants', 'crossover', 'including', 'classical', 'binomial', 'exponential', 'strategies', 'crossover', 'variant', 'crossover', 'rate', 'mutation', 'probability', 'identified', 'impact', 'choice', 'adaptation', 'control', 'parameters', 'analyzed', 'numerical', 'experiments', 'author', 'illustrates', 'fact', 'difference', 'binomial', 'exponential', 'crossover', 'variants', 'due', 'different', 'distributions', 'number', 'mutated', 'components', 'hand', 'behavior', 'exponential', 'crossover', 'variants', 'found', 'sensitive', 'problem', 'size', 'behavior', 'variants', 'binomial', 'crossover', 'evolutionary', 'search', 'dynamics', 'theoretical', 'studies', 'evolutionary', 'carried', 'dasgupta', 'authors', 'simple', 'mathematical', 'model', 'underlying', 'evolutionary', 'dynamics', 'population', 'evolving', 'rand_bin', 'algorithm', 'model', 'fact', 'dimension', 'dimensional', 'objective', 'function', 'separable', 'function', 'optimized', 'sequence', 'optimization', 'processes', 'model', 'fundamental', 'dynamics', 'search', 'agent', 'parameter', 'vector', 'employs', 'gradient', 'type', 'search', 'strategy', 'uses', 'analytical', 'gradient', 'learning', 'rate', 'parameter', 'depends', 'control', 'parameters', 'scale', 'factor', 'crossover', 'rate', 'due', 'gradient', 'type', 'search', 'strategy', 'converges', 'much', 'faster', 'variants', 'pso', 'uni', 'benchmarks', 'stability', 'convergence', 'behavior', 'dynamics', 'analyzed', 'stability', 'equilibrium', 'points', 'final', 'stages', 'search', 'rate', 'convergence', 'uni', 'functions', 'found', 'depend', 'analysis', 'undertaken', 'limited', 'practical', 'point', 'view', 'authors', 'considered', 'fitness', 'landscape', 'multi', 'dimensional', 'search', 'space', 'future', 'research', 'probabilistic', 'convergence', 'simple', 'objective', 'functions', 'open', 'problem', 'working', 'eas', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'complexity', 'complexity', 'analysis', 'population', 'stochastic', 'search', 'techniques', 'critical', 'issue', 'right', 'investigated', 'complexity', 'various', 'stopping', 'criteria', 'authors', 'pointed', 'generation', 'loop', 'conducted', 'loop', 'mutation', 'crossover', 'operations', 'performed', 'component', 'level', 'vector', 'number', 'fundamental', 'operations', 'rand_bin', 'proportional', 'total', 'number', 'conducted', 'termination', 'algorithm', 'algorithm', 'fixed', 'number', 'generations', 'gmax', 'complexity', 'gmax', 'moreover', 'authors', 'maximum', 'distance', 'criterion', 'yields', 'best', 'overall', 'performance', 'algorithm', 'note', 'criteria', 'execution', 'algorithms', 'maximum', 'distance', 'vector', 'best', 'population', 'member', 'given', 'threshold', 'convergence', 'multiobjective', 'xue', 'performed', 'mathematical', 'modeling', 'convergence', 'analysis', 'continuous', 'multiobjective', 'differential', 'evolution', 'certain', 'authors', 'investigated', 'population', 'evolution', 'mode', 'reproduction', 'operators', 'differential', 'mutation', 'crossover', 'assuming', 'population', 'initialized', 'sampling', 'gaussian', 'distribution', 'given', 'mean', 'standard', 'deviation', 'simple', 'mathematics', 'initial', 'population', 'gaussian', 'distributed', 'contains', 'pareto', 'optimal', 'set', 'subsequent', 'populations', 'generated', 'mode', 'selection', 'gaussian', 'distributed', 'population', 'mean', 'converges', 'center', 'pareto', 'optimal', 'set', 'solution', 'vector', 'belonging', 'population', 'generation', 'random', 'solution', 'distributed', 'probability', 'support', 'defined', 'works', 'extended', 'modeling', 'discrete', 'version', 'mode', 'mode', 'framework', 'markov', 'processes', 'corresponding', 'convergence', 'properties', 'developed', 'practical', 'situations', 'finite', 'population', 'size', 'optimal', 'solutions', 'present', 'initial', 'population', 'exploration', 'mode', 'identify', 'global', 'optimal', 'solution', 'evolutionary', 'process', 'selection', 'operator', 'keep', 'optimal', 'solutions', 'found', 'evolution', 'mathematical', 'analysis', 'convergence', 'situations', 'developed', 'vii', 'engineering', 'applications', 'due', 'growing', 'popularity', 'simple', 'robust', 'optimizer', 'researchers', 'several', 'domains', 'science', 'engineering', 'applying', 'solve', 'optimization', 'problems', 'fields', 'literature', 'engineering', 'applications', 'huge', 'internet', 'search', 'number', 'research', 'sci', 'july', 'application', 'papers', 'diverse', 'areas', 'space', 'tables', 'major', 'applications', 'employed', 'solve', 'optimization', 'problem', 'type', 'used', 'major', 'publications', 'associated', 'application', 'observation', 'tables', 'prefer', 'classical', 'schemes', 'rand_bin', 'target', 'best', 'bin', 'solving', 'domain', 'specific', 'problems', 'research', 'necessary', 'order', 'investigate', 'applicability', 'state', 'art', 'variants', 'sade', 'degl', 'ode', 'outlined', 'section', 'obtaining', 'improved', 'performances', 'practical', 'problems', 'specific', 'applications', 'properties', 'extending', 'optimization', 'problem', 'best', 'possible', 'knowledge', 'problem', 'incorporated', 'optimization', 'method', 'objective', 'function', 'order', 'efficient', 'interested', 'readers', 'appropriate', 'references', 'details', 'applications', 'necessary', 'applications', 'available', 'viii', 'drawbacks', 'metaheuristics', 'drawbacks', 'discussion', 'future', 'research', 'directions', 'recent', 'publications', 'indicate', 'significant', 'difficulty', 'functions', 'separable', 'outperformed', 'cma', 'pointed', 'functions', 'differential', 'mutation', 'procedure', 'recombination', 'strategy', 'invariant', 'authors', 'mutation', 'strategy', 'sufficient', 'selection', 'pressure', 'target', 'donor', 'vectors', 'satisfactory', 'power', 'functions', 'authors', 'propose', 'rank', 'parent', 'selection', 'scheme', 'bias', 'selection', 'step', 'learn', 'distribution', 'information', 'elite', 'individuals', 'population', 'sample', 'local', 'topology', 'fitness', 'landscape', 'much', 'research', 'necessary', 'area', 'robust', 'strong', 'search', 'variables', 'different', 'selection', 'procedures', 'increase', 'generational', 'selective', 'pressure', 'parents', 'offspring', 'future', 'made', 'attempt', 'evolve', 'certain', 'fitness', 'landscapes', 'order', 'demonstrate', 'population', 'metaheuristics', 'pso', 'cma', 'pointed', 'problem', 'landscapes', 'stuck', 'local', 'optima', 'similar', 'landscapes', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'pso', 'find', 'global', 'optima', 'maximum', 'bound', 'authors', 'indicated', 'limited', 'ability', 'move', 'population', 'large', 'distances', 'search', 'space', 'population', 'limited', 'portion', 'authors', 'noted', 'performance', 'deteriorates', 'path', 'problem', 'identified', 'landscape', 'outperformed', 'cma', 'non', 'random', 'gradient', 'search', 'method', 'abbreviated', 'amount', 'future', 'research', 'needed', 'drawbacks', 'effective', 'variants', 'developed', 'investigated', 'problem', 'evolution', 'methodology', 'identify', 'specific', 'points', 'different', 'function', 'potential', 'future', 'research', 'directions', 'last', 'ten', 'years', 'research', 'reached', 'state', 'many', 'open', 'problems', 'application', 'areas', 'algorithm', 'important', 'future', 'directions', 'research', 'area', 'many', 'eas', 'mutation', 'schemes', 'employed', 'donor', 'mutant', 'scaled', 'difference', 'target', 'vectors', 'lie', 'fig', 'possible', 'rotation', 'mutation', 'operation', 'base', 'vector', 'rotated', 'dimensional', 'perturbed', 'scaled', 'difference', 'vector', 'case', 'rotation', 'pre', 'base', 'vector', 'linear', 'transformation', 'matrix', 'donor', 'vector', 'formed', 'consider', 'parameter', 'vector', 'section', 'component', 'opposite', 'vector', 'formed', 'symmetric', 'search', 'intervals', 'generation', 'opposite', 'vector', 'actual', 'vector', 'technique', 'used', 'ode', 'improve', 'performance', 'hence', 'propose', 'concept', 'mutant', 'vectors', 'different', 'suitable', 'self', 'adaptation', 'schemes', 'rotation', 'matrix', 'improve', 'explorative', 'power', 'efficiency', 'large', 'extent', 'effectiveness', 'conventional', 'solving', 'numerical', 'optimization', 'problem', 'depends', 'selected', 'mutation', 'strategy', 'associated', 'parameter', 'values', 'different', 'optimization', 'problems', 'require', 'different', 'mutation', 'strategies', 'different', 'parameter', 'values', 'depending', 'nature', 'problem', 'unimodal', 'multimodal', 'available', 'computation', 'resources', 'addition', 'solve', 'specific', 'problem', 'different', 'mutation', 'strategies', 'different', 'parameter', 'settings', 'different', 'stages', 'evolution', 'single', 'mutation', 'strategy', 'unique', 'parameter', 'settings', 'conventional', 'area', 'machine', 'learning', 'concept', 'combining', 'ensemble', 'employed', 'improve', 'overall', 'classification', 'performance', 'variety', 'classification', 'methodologies', 'similar', 'concept', 'used', 'conjunction', 'ensemble', 'mutation', 'strategies', 'parameter', 'values', 'pool', 'mutation', 'strategies', 'pool', 'values', 'corresponding', 'associated', 'parameter', 'produce', 'successful', 'offspring', 'population', 'candidate', 'pool', 'mutation', 'strategies', 'parameters', 'avoid', 'influences', 'effective', 'mutation', 'strategies', 'parameters', 'mutation', 'strategies', 'parameters', 'present', 'pool', 'diverse', 'characteristics', 'distinct', 'performance', 'characteristics', 'different', 'stages', 'evolution', 'particular', 'problem', 'approach', 'differs', 'sade', 'latter', 'parameter', 'values', 'ensemble', 'approach', 'allows', 'parameters', 'jump', 'appropriate', 'value', 'ensemble', 'approach', 'investigated', 'enhanced', 'mutation', 'strategies', 'different', 'crossover', 'approaches', 'solve', 'different', 'problem', 'scenarios', 'future', 'research', 'focus', 'initialization', 'generation', 'jumping', 'self', 'adaptive', 'variants', 'sade', 'improving', 'performance', 'degl', 'concept', 'topological', 'neighborhood', 'ring', 'shaped', 'population', 'members', 'local', 'mutation', 'scheme', 'effect', 'various', 'neighborhood', 'shaped', 'wheel', 'shaped', 'connected', 'performance', 'degl', 'investigated', 'future', 'degl', 'ensemble', 'schemes', 'studied', 'future', 'significant', 'made', 'theoretical', 'understanding', 'gas', 'analysis', 'family', 'algorithms', 'made', 'considerable', 'progress', 'investigation', 'probabilistic', 'convergence', 'properties', 'simple', 'objective', 'functions', 'remains', 'open', 'problem', 'concepts', 'analysis', 'theory', 'stochastic', 'energy', 'functions', 'applied', 'convergence', 'analysis', 'real', 'coded', 'eas', 'investigated', 'context', 'selective', 'pressure', 'due', 'selection', 'parents', 'target', 'vectors', 'result', 'exploitation', 'relying', 'differential', 'mutation', 'rotated', 'optimization', 'problems', 'authors', 'rank', 'parent', 'selection', 'scheme', 'obtained', 'sorting', 'population', 'fitness', 'indices', 'base', 'vector', 'vectors', 'constitute', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'table', 'summary', 'applications', 'engineering', 'optimization', 'problems', 'sub', 'areas', 'details', 'types', 'applied', 'references', 'electrical', 'power', 'systems', 'optimal', 'power', 'flow', 'power', 'system', 'planning', 'generation', 'planning', 'distribution', 'systems', 'network', 'power', 'power', 'system', 'chaotic', 'hybrid', 'acceleration', 'migration', 'rand_bin', 'hybrid', 'improved', 'constraint', 'handling', 'variable', 'scaling', 'hybrid', 'target', 'best', 'bin', 'cooperative', 'evolutionary', 'rand_bin', 'non', 'dominated', 'sorting', 'conventional', 'rand_bin', 'random', 'modified', 'fitness', 'sharing', 'conventional', 'rand_bin', 'comparison', 'strategies', 'storn', 'price', 'robust', 'searching', 'hybrid', 'ant', 'system', 'hybrid', 'variable', 'scale', 'factor', 'mixed', 'integer', 'hybrid', 'hybrid', 'acceleration', 'migration', 'operators', 'best', 'bin', 'hybrid', 'ant', 'systems', 'engineering', 'design', 'mode', 'parameter', 'estimation', 'property', 'analysis', 'machines', 'array', 'design', 'mode', 'nsde', 'rand_bin', 'conventional', 'individuals', 'dynamic', 'rand_bin', 'rand_bin', 'target', 'best', 'bin', 'conventional', 'rand_bin', 'best', 'bin', 'details', 'hybrid', 'real', 'integer', 'coded', 'rand_bin', 'modified', 'distribution', 'operator', 'fittest', 'individual', 'operator', 'best', 'bin', 'moea', 'control', 'systems', 'robotics', 'system', 'optimal', 'control', 'problems', 'design', 'tuning', 'control', 'nonlinear', 'system', 'control', 'simultaneous', 'modeling', 'problem', 'planning', 'control', 'multi', 'data', 'fusion', 'conventional', 'rand_bin', 'rand_bin', 'best', 'bin', 'modified', 'control', 'weight', 'gradient', 'methods', 'self', 'adaptive', 'rand', 'arithmetic', 'crossover', 'rand_bin', 'random', 'scale', 'factor', 'varying', 'hybrid', 'simplex', 'local', 'optimization', 'hybrid', 'convex', 'mutation', 'rand_bin', 'rand_bin', 'memetic', 'best', 'bin', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'table', 'summary', 'applications', 'engineering', 'optimization', 'problems', 'continued', 'table', 'sub', 'areas', 'details', 'types', 'applied', 'references', 'bioinformatics', 'gene', 'networks', 'micro', 'array', 'data', 'analysis', 'optimization', 'adaptive', 'local', 'search', 'details', 'hybrid', 'pso', 'multiobjective', 'variants', 'mode', 'rand_bin', 'rand_bin', 'chemical', 'engineering', 'chemical', 'process', 'synthesis', 'design', 'phase', 'equilibrium', 'phase', 'study', 'parameter', 'estimation', 'chemical', 'process', 'modified', 'single', 'array', 'updating', 'variants', 'storn', 'price', 'compared', 'multiobjective', 'hybrid', 'migration', 'acceleration', 'operators', 'rand_bin', 'hybrid', 'mean', 'mutation', 'target', 'exp', 'pattern', 'recognition', 'image', 'processing', 'data', 'clustering', 'pixel', 'clustering', 'image', 'feature', 'image', 'registration', 'image', 'rand_bin', 'random', 'scale', 'factor', 'varying', 'crossover', 'rate', 'neighborhood', 'mutation', 'modified', 'local', 'global', 'best', 'mutation', 'random', 'scale', 'factor', 'varying', 'crossover', 'rate', 'rand_bin', 'rand_bin', 'chaotic', 'local', 'search', 'rand_bin', 'target', 'best', 'bin', 'artificial', 'neural', 'networks', 'training', 'training', 'neural', 'networks', 'training', 'neural', 'networks', 'rand_bin', 'generalization', 'target', 'best', 'bin', 'rand_bin', 'chaotic', 'sequence', 'scale', 'factor', 'signal', 'processing', 'non', 'linear', 'estimation', 'digital', 'design', 'fractional', 'order', 'signal', 'processing', 'dynamic', 'rand_bin', 'random', 'scale', 'factor', 'rand_bin', 'others', 'layout', 'synthesis', 'engineering', 'design', 'manufacturing', 'optimization', 'energy', 'management', 'evaluation', 'function', 'tuning', 'improved', 'stochastic', 'ranking', 'rand_bin', 'constraint', 'adaptive', 'rand_bin', 'hybrid', 'backward', 'transformation', 'local', 'search', 'hybrid', 'cma', 'target', 'best', 'bin', 'rand_bin', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'difference', 'vectors', 'linear', 'distribution', 'function', 'top', 'individual', 'likely', 'selected', 'rank', 'high', 'selective', 'pressure', 'cause', 'loss', 'diversity', 'population', 'order', 'obtain', 'balance', 'exploration', 'exploitation', 'parent', 'selection', 'varying', 'selection', 'pressure', 'necessary', 'interesting', 'achieve', 'introduce', 'annealing', 'bias', 'controlling', 'term', 'linear', 'distribution', 'function', 'beginning', 'stage', 'search', 'probability', 'top', 'individual', 'small', 'exploration', 'search', 'exploitation', 'achieved', 'stages', 'investigate', 'effect', 'tournament', 'selection', 'rank', 'selection', 'sorting', 'population', 'generation', 'exploration', 'connected', 'algorithm', 'optimum', 'literature', 'common', 'exploration', 'mechanism', 'saddle', 'crossing', 'consists', 'change', 'position', 'whole', 'population', 'saddle', 'adjacent', 'attraction', 'local', 'saddle', 'crossing', 'takes', 'generations', 'decrease', 'mean', 'population', 'fitness', 'fitness', 'proportionate', 'selection', 'elitism', 'reported', 'appropriate', 'promote', 'saddle', 'crossing', 'implies', 'soft', 'selection', 'employs', 'hard', 'selection', 'criterion', 'competition', 'parent', 'offspring', 'reason', 'sensitive', 'choice', 'initial', 'population', 'premature', 'convergence', 'interesting', 'future', 'research', 'mutation', 'operator', 'taken', 'non', 'elitist', 'fitness', 'proportionate', 'selection', 'crossover', 'result', 'saddle', 'crossing', 'abilities', 'reduce', 'premature', 'convergence', 'case', 'population', 'initialization', 'local', 'optimum', 'large', 'attraction', 'basin', 'combinatorial', 'optimization', 'problems', 'deal', 'discrete', 'parameters', 'found', 'diverse', 'domains', 'engineering', 'pointed', 'section', 'achieved', 'solving', 'discrete', 'binary', 'mixed', 'integer', 'problems', 'evidence', 'applicable', 'sense', 'combinatorial', 'problems', 'constrained', 'authors', 'discussed', 'combinatorial', 'problems', 'success', 'solutions', 'combinatorial', 'problems', 'chosen', 'mechanisms', 'algorithm', 'mutation', 'applicability', 'sense', 'combinatorial', 'problems', 'remains', 'open', 'problem', 'finding', 'discrete', 'operator', 'difference', 'vector', 'continuous', 'domain', 'issue', 'future', 'research', 'moreover', 'discrete', 'variants', 'required', 'combination', 'base', 'vector', 'difference', 'vector', 'recombination', 'vector', 'yields', 'vector', 'generated', 'vector', 'problem', 'classical', 'combinatorial', 'problems', 'traveling', 'problem', 'many', 'objective', 'optimization', 'problems', 'deal', 'objective', 'functions', 'many', 'conventional', 'moeas', 'applying', 'pareto', 'optimality', 'ranking', 'metric', 'perform', 'large', 'number', 'objective', 'functions', 'extending', 'multiobjective', 'variants', 'solve', 'many', 'objective', 'problems', 'remains', 'open', 'field', 'future', 'research', 'conclusion', 'increasing', 'complexity', 'real', 'world', 'optimization', 'problems', 'demand', 'robust', 'fast', 'optimizers', 'researchers', 'various', 'fields', 'emerged', 'simple', 'efficient', 'scheme', 'global', 'optimization', 'continuous', 'spaces', 'decade', 'past', 'years', 'many', 'researchers', 'general', 'fast', 'optimization', 'method', 'kind', 'objective', 'function', 'tuning', 'various', 'initialization', 'mutation', 'diversity', 'selection', 'choice', 'control', 'variables', 'suggested', 'algorithm', 'exist', 'existing', 'literature', 'indicates', 'performance', 'optimizing', 'wide', 'variety', 'multi', 'dimensional', 'multiobjective', 'multimodal', 'optimization', 'problems', 'attempted', 'provide', 'overall', 'state', 'art', 'research', 'starting', 'comprehensive', 'introduction', 'basic', 'steps', 'algorithm', 'discussed', 'different', 'schemes', 'parameter', 'control', 'adaptation', 'several', 'promising', 'variants', 'conventional', 'next', 'provided', 'extensive', 'review', 'modifications', 'tackling', 'constrained', 'multiobjective', 'uncertain', 'large', 'scale', 'optimization', 'problems', 'brief', 'overview', 'various', 'significant', 'engineering', 'applications', 'number', 'future', 'research', 'directions', 'content', 'indicates', 'fact', 'continue', 'remain', 'field', 'multi', 'research', 'years', 'references', 'abbass', 'self', 'adaptive', 'pareto', 'differential', 'evolution', 'algorithm', 'proc', 'congr_evol', 'comput', 'vol', 'abbass', 'pareto', 'differential', 'evolution', 'algorithm', 'int', 'intell', 'tools', 'vol', 'ali', 'population', 'set', 'global', 'optimization', 'algorithms', 'modifications', 'numerical', 'studies', 'comput', 'oper', 'res', 'vol', 'ali', 'local', 'exploration', 'differential', 'evolution', 'algorithm', 'constrained', 'global', 'optimization', 'appl', 'math', 'comput', 'vol', 'feb', 'optimization', 'dynamic', 'systems', 'trigonometric', 'differential', 'evolution', 'approach', 'comput', 'eng', 'vol', 'sep', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'differential', 'evolution', 'multiobjective', 'optimization', 'proc', 'congr_evol', 'comput', 'vol', 'dec', 'modified', 'differential', 'evolution', 'optimization', 'non', 'linear', 'chemical', 'processes', 'comput', 'eng', 'vol', 'beyer', 'deb', 'self', 'adapting', 'features', 'real', 'parameter', 'evolutionary', 'algorithms', 'ieee', 'trans', 'evol_comput', 'vol', 'jun', 'biswas', 'dasgupta', 'das', 'abraham', 'synergy', 'differential', 'evolution', 'foraging', 'algorithm', 'global', 'optimization', 'neural', 'world', 'vol', 'brest', 'greiner', 'mernik', 'zumer', 'control', 'parameters', 'differential', 'evolution', 'comparative', 'study', 'numerical', 'benchmark', 'problems', 'ieee', 'trans', 'evol_comput', 'vol', 'dec', 'brest', 'population', 'size', 'reduction', 'differential', 'evolution', 'algorithm', 'appl', 'intell', 'vol', 'dec', 'brest', 'boskovic', 'zumer', 'real', 'parameter', 'optimization', 'self', 'adaptive', 'differential', 'evolution', 'algorithm', 'population', 'size', 'reduction', 'proc', 'ieee', 'congr_evol', 'comput', 'jun', 'brest', 'boskovic', 'zumer', 'dynamic', 'optimization', 'self', 'adaptive', 'differential', 'evolution', 'proc', 'ieee', 'congr_evol', 'comput', 'neri', 'tirronen', 'fit', 'control', 'adaptation', 'memetic', 'differential', 'evolution', 'soft', 'comput', 'fusion', 'found', 'applicat', 'vol', 'chen', 'lin', 'lin', 'nonlinear', 'system', 'control', 'adaptive', 'neural', 'fuzzy', 'networks', 'modified', 'differential', 'evolution', 'ieee', 'trans', 'syst', 'man', 'cybern', 'part', 'vol', 'jul', 'das', 'konar', 'chakraborty', 'improving', 'particle_swarm', 'optimization', 'perturbed', 'velocity', 'proc', 'genet', 'evol_comput', 'conf', 'jun', 'das', 'konar', 'chakraborty', 'improved', 'differential', 'evolution', 'schemes', 'faster', 'global', 'search', 'proc', 'acm', 'jun', 'das', 'konar', 'chakraborty', 'improved', 'differential', 'evolution', 'algorithms', 'handling', 'noisy', 'optimization', 'problems', 'proc', 'ieee', 'congr_evol', 'comput', 'vol', 'das', 'konar', 'chakraborty', 'differential', 'evolution', 'proc', 'ieee', 'congr_evol', 'comput', 'das', 'abraham', 'konar', 'automatic', 'clustering', 'improved', 'differential', 'evolution', 'algorithm', 'ieee', 'trans', 'syst', 'man', 'cybern', 'part', 'vol', 'jan', 'das', 'abraham', 'chakraborty', 'konar', 'differential', 'evolution', 'neighborhood', 'mutation', 'operator', 'ieee', 'trans', 'evol_comput', 'vol', 'jun', 'dasgupta', 'das', 'biswas', 'abraham', 'population', 'dynamics', 'differential', 'evolution', 'mathematical', 'model', 'proc', 'ieee', 'congr_evol', 'comput', 'jun', 'dasgupta', 'das', 'biswas', 'abraham', 'stability', 'convergence', 'population', 'dynamics', 'differential', 'evolution', 'vol', 'deb', 'beyer', 'self', 'adaptive', 'genetic', 'algorithms', 'simulated', 'binary', 'crossover', 'evol_comput', 'vol', 'jun', 'fan', 'lampinen', 'trigonometric', 'mutation', 'operation', 'differential', 'evolution', 'global', 'optimization', 'vol', 'generalization', 'strategies', 'differential', 'evolution', 'proc', 'apr', 'wang', 'memetic', 'differential', 'evolutionary', 'algorithm', 'high', 'dimensional', 'function', 'spaces', 'optimization', 'proc', 'vol', 'aug', 'huang', 'qin', 'suganthan', 'self', 'adaptive', 'differential', 'evolution', 'algorithm', 'constrained', 'real', 'parameter', 'optimization', 'proc', 'ieee', 'congr_evol', 'comput', 'jul', 'huang', 'qin', 'suganthan', 'tasgetiren', 'multiobjective', 'optimization', 'self', 'adaptive', 'differential', 'evolution', 'algorithm', 'proc', 'congr_evol', 'comput', 'sep', 'huang', 'mallipeddi', 'suganthan', 'multiobjective', 'optimization', 'self', 'adaptive', 'differential', 'evolution', 'algorithm', 'special', 'session', 'competition', 'performance', 'assessment', 'constrained', 'bound', 'constrained', 'multiobjective', 'optimization', 'algorithms', 'proc', 'conf', 'congr_evol', 'comput', 'huang', 'wang', 'effective', 'evolutionary', 'differential', 'evolution', 'constrained', 'optimization', 'appl', 'math', 'comput', 'vol', 'mar', 'solving', 'rotated', 'multiobjective', 'optimization', 'problems', 'differential', 'evolution', 'proc', 'intell', 'ali', 'differential', 'evolution', 'algorithms', 'hybrid', 'mutation', 'comput', 'optimization', 'applicat', 'vol', 'jun', 'fogel', 'noisy', 'optimization', 'problems', 'particular', 'differential', 'evolution', 'proc', 'ieee', 'congr_evol', 'comput', 'kukkonen', 'lampinen', 'third', 'evolution', 'step', 'generalized', 'differential', 'evolution', 'proc', 'ieee', 'congr_evol', 'comput', 'vol', 'sep', 'kukkonen', 'lampinen', 'constrained', 'real', 'parameter', 'optimization', 'generalized', 'differential', 'evolution', 'proc', 'ieee', 'congr_evol', 'comput', 'jul', 'lampinen', 'differential', 'evolution', 'algorithm', 'inform', 'process', 'dept', 'inform', 'technol', 'univ', 'technol', 'tech', 'rep', 'online', 'available', 'http', 'www', 'lampinen', 'differential', 'evolution', 'parallel', 'approach', 'engineering', 'design', 'optimization', 'computational', 'mechanics', 'high', 'performance', 'computing', 'press', 'lampinen', 'constraint', 'handling', 'approach', 'differential', 'evolution', 'algorithm', 'proc', 'congr_evol', 'comput', 'vol', 'lampinen', 'zelinka', 'mixed', 'integer', 'discrete', 'continuous', 'optimization', 'differential', 'evolution', 'proc', 'int', 'mendel', 'conf', 'soft', 'comput', 'jun', 'lampinen', 'zelinka', 'stagnation', 'differential', 'evolution', 'algorithm', 'proc', 'int', 'mendel', 'conf', 'soft', 'comput', 'jun', 'coello', 'coello', 'solving', 'hard', 'multiobjective', 'optimization', 'problems', 'constraint', 'differential', 'evolution', 'proc', 'int', 'conf', 'parallel', 'problem', 'solving', 'nature', 'sep', 'coello', 'coello', 'differential', 'evolution', 'constrained', 'optimization', 'comput', 'methods', 'appl', 'eng', 'vol', 'jul', 'evolving', 'problems', 'learn', 'particle_swarm', 'optimizers', 'search', 'algorithms', 'ieee', 'trans', 'evol_comput', 'vol', 'oct', 'yang', 'yao', 'beyer', 'suganthan', 'benchmark', 'cec', 'competition', 'dynamic', 'optimization', 'univ', 'univ', 'nanyang', 'technological', 'univ', 'singapore', 'tech', 'rep', 'sep', 'zhang', 'multiobjective', 'optimization', 'problems', 'complicated', 'pareto', 'sets', 'moea', 'nsga', 'ieee', 'trans', 'evol_comput', 'vol', 'apr', 'mezura', 'montes', 'suganthan', 'coello', 'coello', 'deb', 'problem', 'definitions', 'evaluation', 'criteria', 'cec', 'special', 'session', 'constrained', 'real', 'parameter', 'optimization', 'nanyang', 'technol', 'univ', 'singapore', 'tech', 'rep', 'liu', 'lampinen', 'fuzzy', 'adaptive', 'differential', 'evolution', 'algorithm', 'soft', 'comput', 'fusion', 'applicat', 'vol', 'liu', 'zhang', 'hybrid', 'differential', 'evolution', 'noisy', 'optimization', 'proc', 'ieee', 'congr_evol', 'comput', 'jun', 'mallipeddi', 'suganthan', 'empirical', 'study', 'effect', 'population', 'size', 'differential', 'evolution', 'algorithm', 'proc', 'ieee', 'congr_evol', 'comput', 'jun', 'mallipeddi', 'suganthan', 'differential', 'evolution', 'algorithm', 'ensemble', 'populations', 'global', 'numerical', 'optimization', 'vol', 'jun', 'mallipeddi', 'suganthan', 'ensemble', 'constraint', 'handling', 'techniques', 'ieee', 'trans', 'evol_comput', 'vol', 'aug', 'mallipeddi', 'suganthan', 'tasgetiren', 'differential', 'evolution', 'algorithm', 'ensemble', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'february', 'mutation', 'strategies', 'appl', 'soft', 'comput', 'published', 'differential', 'evolution', 'dynamic', 'optimization', 'problems', 'proc', 'ieee', 'congr_evol', 'comput', 'vol', 'nonlinear', 'control', 'hybrid', 'evolutionary', 'optimization', 'ieee', 'trans', 'evol_comput', 'vol', 'dec', 'mezura', 'montes', 'coello', 'coello', 'comparative', 'study', 'differential', 'evolution', 'variants', 'global', 'optimization', 'proc', 'genet', 'evol_comput', 'conf', 'mezura', 'montes', 'coello', 'coello', 'modified', 'differential', 'evolution', 'constrained', 'optimization', 'proc', 'ieee', 'congr_evol', 'comput', 'jul', 'evolving', 'digital', 'hybrid', 'particle_swarm', 'optimization', 'differential', 'evolution', 'int', 'neural', 'syst', 'vol', 'neri', 'tirronen', 'scale', 'factor', 'local', 'search', 'differential', 'evolution', 'memetic', 'comput', 'vol', 'jun', 'neri', 'tirronen', 'recent', 'advances', 'differential', 'evolution', 'review', 'experimental', 'analysis', 'intell', 'vol', 'feb', 'neri', 'memetic', 'differential', 'evolution', 'control', 'ieee', 'comput', 'intell', 'vol', 'noman', 'iba', 'differential', 'evolution', 'performance', 'local', 'search', 'high', 'dimensional', 'function', 'optimization', 'proc', 'conf', 'genet', 'evol_comput', 'jun', 'noman', 'iba', 'gene', 'networks', 'differential', 'evolution', 'local', 'search', 'heuristics', 'ieee', 'acm', 'trans', 'comput', 'vol', 'oct', 'noman', 'iba', 'differential', 'evolution', 'adaptive', 'local', 'search', 'ieee', 'trans', 'evol_comput', 'vol', 'feb', 'omran', 'self', 'adaptive', 'differential', 'evolution', 'proc', 'comput', 'intell', 'lecture', 'notes', 'artificial', 'intelligence', 'omran', 'differential', 'evolution', 'oper', 'res', 'vol', 'jul', 'binary', 'differential', 'evolution', 'proc', 'ieee', 'congr_evol', 'comput', 'jul', 'das', 'suganthan', 'optimal', 'synthesis', 'linear', 'multiobjective', 'differential', 'evolution', 'res', 'vol', 'das', 'suganthan', 'synthesis', 'difference', 'patterns', 'optimal', 'combination', 'array', 'size', 'number', 'multiobjective', 'optimization', 'approach', 'res', 'vol', 'vector', 'evaluated', 'differential', 'evolution', 'multiobjective', 'optimization', 'proc', 'congr_evol', 'comput', 'vol', 'jun', 'review', 'major', 'application', 'areas', 'differential', 'evolution', 'advances', 'differential', 'evolution', 'sci', 'chakraborty', 'berlin', 'germany', 'springer', 'price', 'differential', 'evolution', 'functions', 'proc', 'ieee', 'int', 'conf', 'evol_comput', 'apr', 'price', 'storn', 'differential', 'evolution', 'simple', 'evolution', 'strategy', 'fast', 'optimization', 'vol', 'price', 'storn', 'lampinen', 'differential', 'evolution', 'practical', 'approach', 'global', 'optimization', 'berlin', 'germany', 'springer', 'price', 'introduction', 'differential', 'evolution', 'ideas', 'optimization', 'corne', 'dorigo', 'eds', 'hill', 'qin', 'huang', 'suganthan', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'ieee', 'trans', 'evol_comput', 'vol', 'apr', 'dynamic', 'differential', 'evolution', 'strategy', 'applications', 'problems', 'ieee', 'trans', 'vol', 'jan', 'differential', 'evolution', 'applications', 'electrical', 'engineering', 'york', 'wiley', 'sep', 'suganthan', 'multiobjective', 'evolutionary', 'algorithms', 'summation', 'normalized', 'objectives', 'diversified', 'selection', 'inform', 'sci', 'vol', 'sep', 'suganthan', 'constrained', 'multiobjective', 'optimization', 'algorithm', 'ensemble', 'constraint', 'handling', 'methods', 'eng', 'optimization', 'published', 'suganthan', 'novel', 'multimodal', 'problems', 'differential', 'evolution', 'ensemble', 'restricted', 'tournament', 'selection', 'proc', 'ieee', 'congr_evol', 'comput', 'jul', 'differential', 'evolution', 'ieee', 'trans', 'evol_comput', 'vol', 'feb', 'differential', 'evolution', 'multiobjective', 'optimization', 'proc', 'int', 'conf', 'evol', 'multi', 'criterion', 'optimization', 'lampinen', 'distributed', 'mutation', 'step', 'length', 'differential', 'evolution', 'algorithm', 'proc', 'int', 'conf', 'soft', 'comput', 'mendel', 'kukkonen', 'price', 'real', 'parameter', 'optimization', 'differential', 'evolution', 'proc', 'ieee', 'cec', 'vol', 'coello', 'coello', 'algorithm', 'differential', 'evolution', 'multiobjective', 'problems', 'int', 'comput', 'intell', 'res', 'vol', 'coello', 'coello', 'hybrid', 'multiobjective', 'optimization', 'algorithm', 'differential', 'evolution', 'sets', 'constrained', 'problems', 'comput', 'oper', 'res', 'vol', 'mar', 'storn', 'price', 'differential', 'evolution', 'simple', 'efficient', 'adaptive', 'scheme', 'global', 'optimization', 'continuous', 'spaces', 'icsi', 'usa', 'tech', 'rep', 'online', 'available', 'http', 'icsi', 'berkeley', 'edu', 'storn', 'html', 'storn', 'price', 'real', 'functions', 'contest', 'differential', 'evolution', 'proc', 'ieee', 'int', 'conf', 'evol_comput', 'storn', 'usage', 'differential', 'evolution', 'function', 'optimization', 'proc', 'fuzzy', 'inform', 'process', 'storn', 'differential', 'evolution', 'design', 'requirements', 'magnitude', 'group', 'proc', 'ieee', 'int', 'conf', 'evol_comput', 'storn', 'price', 'differential', 'evolution', 'simple', 'efficient', 'heuristic', 'global', 'optimization', 'continuous', 'spaces', 'global', 'optimization', 'vol', 'storn', 'system', 'design', 'constraint', 'adaptation', 'differential', 'evolution', 'ieee', 'trans', 'evol_comput', 'vol', 'apr', 'storn', 'differential', 'evolution', 'research', 'open', 'advances', 'differential', 'evolution', 'chakraborty', 'berlin', 'germany', 'springer', 'suganthan', 'deb', 'chen', 'problem', 'definitions', 'evaluation', 'criteria', 'cec', 'special', 'session', 'real', 'parameter', 'optimization', 'nanyang', 'technol', 'univ', 'singapore', 'tech', 'rep', 'kanpur', 'kanpur', 'india', 'rep', 'differential', 'evolution', 'non', 'selective', 'pressure', 'focus', 'search', 'proc', 'conf', 'jul', 'constrained', 'optimization', 'constrained', 'differential', 'evolution', 'gradient', 'mutation', 'feasible', 'proc', 'ieee', 'congr_evol', 'comput', 'jul', 'tang', 'yao', 'suganthan', 'chen', 'chen', 'yang', 'benchmark', 'functions', 'cec', 'special', 'session', 'competition', 'large', 'scale', 'global', 'optimization', 'nature', 'inspired', 'comput', 'applicat', 'china', 'nanyang', 'technol', 'univ', 'singapore', 'tech', 'rep', 'tasgetiren', 'suganthan', 'multi', 'differential', 'evolution', 'algorithm', 'solving', 'constrained', 'optimization', 'problem', 'proc', 'ieee', 'congr_evol', 'comput', 'jul', 'tasgetiren', 'suganthan', 'ensemble', 'discrete', 'differential', 'evolution', 'algorithms', 'solving', 'generalized', 'traveling', 'salesman', 'problem', 'appl', 'math', 'comput', 'vol', 'jan', 'das', 'suganthan', 'differential', 'evolution', 'survey', 'state', 'art', 'parallel', 'differential', 'evolution', 'proc', 'congr_evol', 'comput', 'teo', 'dynamic', 'self', 'adaptive', 'populations', 'differential', 'evolution', 'soft', 'comput', 'fusion', 'found', 'applicat', 'vol', 'multimodal', 'optimization', 'crowding', 'differential', 'evolution', 'proc', 'ieee', 'congr_evol', 'comput', 'comparative', 'study', 'differential', 'evolution', 'particle_swarm', 'optimization', 'evolutionary', 'algorithms', 'numerical', 'benchmark', 'problems', 'proc', 'ieee', 'congr_evol', 'comput', 'xue', 'sanderson', 'pareto', 'multiobjective', 'differential', 'evolution', 'proc', 'congr_evol', 'comput', 'vol', 'xue', 'sanderson', 'modeling', 'convergence', 'analysis', 'continuous', 'multiobjective', 'differential', 'evolution', 'algorithm', 'proc', 'ieee', 'congr_evol', 'comput', 'vol', 'sep', 'xue', 'sanderson', 'multiobjective', 'differential', 'evolution', 'algorithm', 'convergence', 'analysis', 'applications', 'proc', 'ieee', 'congr_evol', 'comput', 'vol', 'sep', 'yang', 'yao', 'making', 'difference', 'differential', 'evolution', 'advances', 'metaheuristics', 'hard', 'optimization', 'michalewicz', 'eds', 'berlin', 'germany', 'springer', 'yang', 'tang', 'yao', 'differential', 'evolution', 'function', 'optimization', 'proc', 'ieee', 'congr_evol', 'comput', 'sep', 'yang', 'tang', 'yao', 'large', 'scale', 'evolutionary', 'optimization', 'cooperative', 'coevolution', 'inform', 'sci', 'vol', 'zaharie', 'explorative', 'power', 'differential', 'evolution', 'proc', 'int', 'workshop', 'numerical', 'algorithms', 'scientific', 'comput', 'oct', 'online', 'available', 'http', 'online', 'papers', 'html', 'zaharie', 'critical', 'values', 'control', 'parameters', 'differential', 'evolution', 'algorithms', 'proc', 'int', 'mendel', 'conf', 'soft', 'comput', 'zaharie', 'parameter', 'adaptation', 'differential', 'evolution', 'controlling', 'population', 'diversity', 'proc', 'int', 'workshop', 'algorithms', 'sci', 'comput', 'zaharie', 'statistical', 'properties', 'differential', 'evolution', 'related', 'random', 'search', 'algorithms', 'proc', 'int', 'conf', 'comput', 'aug', 'zaharie', 'influence', 'crossover', 'behavior', 'differential', 'evolution', 'algorithms', 'appl', 'soft', 'comput', 'vol', 'jun', 'brest', 'boskovic', 'zumer', 'differential', 'evolution', 'multiobjective', 'optimization', 'self', 'adaptation', 'proc', 'congr_evol', 'comput', 'sep', 'zhang', 'wang', 'differential', 'evolution', 'dynamic', 'stochastic', 'selection', 'constrained', 'optimization', 'inform', 'sci', 'vol', 'aug', 'zhang', 'sanderson', 'jade', 'adaptive', 'differential', 'evolution', 'external', 'archive', 'ieee', 'trans', 'evol_comput', 'vol', 'oct', 'zhang', 'xie', 'depso', 'hybrid', 'particle_swarm', 'differential', 'evolution', 'operator', 'proc', 'ieee', 'int', 'conf', 'syst', 'man', 'cybern', 'run', 'analysis', 'regarding', 'stopping', 'criteria', 'differential', 'evolution', 'particle_swarm', 'optimization', 'proc', 'int', 'conf', 'exp', 'process', 'system', 'simulation', 'optimization', 'online', 'available', 'http', 'www', 'uni', 'research', 'papers', 'pdf', 'pdf', 'constrained', 'single', 'objective', 'optimization', 'differential', 'evolution', 'proc', 'ieee', 'congr_evol', 'comput', 'jul', 'das', 'received', 'control', 'engineering', 'degrees', 'university', 'india', 'assistant', 'professor', 'department', 'electronics', 'engineering', 'university', 'published', 'research', 'reviewed', 'journals', 'international', 'research', 'metaheuristic', 'clustering', 'techniques', 'published', 'springer', 'berlin', 'germany', 'current', 'research', 'interests', 'include', 'evolutionary', 'computing', 'swarm', 'intelligence', 'pattern', 'recognition', 'bioinformatics', 'control', 'systems', 'engineering', 'digital', 'signal', 'processing', 'das', 'serves', 'associate', 'editor', 'information', 'sciences', 'journal', 'elsevier', 'member', 'international', 'journal', 'artificial', 'intelligence', 'soft', 'computing', 'international', 'journal', 'adaptive', 'communication', 'systems', 'editor', 'swarm', 'evolutionary', 'computation', 'international', 'journal', 'elsevier', 'acting', 'journals', 'pattern', 'recognition', 'ieee', 'transactions', 'evolutionary', 'computation', 'ieee', 'acm', 'transactions', 'computational', 'biology', 'bioinformatics', 'ieee', 'transactions', 'smc', 'part', 'part', 'suganthan', 'received', 'degree', 'degree', 'electrical', 'information', 'engineering', 'university', 'cambridge', 'cambridge', 'degree', 'school', 'electrical', 'electronic', 'engineering', 'nanyang', 'technological', 'university', 'singapore', 'pre', 'research', 'assistant', 'department', 'electrical', 'engineering', 'university', 'department', 'computer', 'science', 'electrical', 'engineering', 'university', 'school', 'electrical', 'electronic', 'engineering', 'nanyang', 'technological', 'university', 'assistant', 'professor', 'associate', 'professor', 'current', 'research', 'interests', 'include', 'evolutionary', 'computation', 'pattern', 'recognition', 'multiobjective', 'evolutionary', 'algorithms', 'bioinformatics', 'applications', 'evolutionary', 'computation', 'neural', 'networks', 'suganthan', 'associate', 'editor', 'journals', 'ieee', 'transactions', 'evolutionary', 'computation', 'information', 'sciences', 'pattern', 'recognition', 'international', 'journal', 'swarm', 'intelligence', 'research', 'editor', 'swarm', 'evolutionary', 'computation', 'international', 'journal', 'elsevier']"
8,3,1,"398 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 Differential Evolution Algorithm With Strategy Adaptation for Global Numerical Optimization A. K. Qin, V. L. Huang, and P. N. Suganthan Abstract—Differential evolution (DE) is an efficient and powerful population-based stochastic search technique for solving optimization problems over continuous space, which has been widely applied in many scientific and engineering fields. However, the success of DEin solving a specific problem crucially depends on appropriately choosing trial vector generation strategies and their associated control parameter values. Employing a trial-and-error scheme to search for the most suitable strategy and its associated parameter settings requires high computational costs. Moreover, at different stages of evolution, different strategies coupled with different parameter settings may be required in order to achieve the best performance. In this paper, we propose a self-adaptive DE (SaDE) algorithm, in which both trial vector generation strategies and their associated control parameter values are gradually self-adapted by learning from their previous experiences in generating promising solutions. Consequently, a more suitable generation strategy along with its parameter settings can be determined adaptively to match different phases of the search process/evolution. The performance of the SaDE algorithm is extensively evaluated (using codes available from P. N. Suganthan) on a suite of 26 bound-constrained numerical optimization problems and compares favorably with the conventional DE and several state-of-the-art parameter adaptive DE variants. Index Terms—Differential evolution (DE), global numerical optimization, parameter adaptation, self-adaptation, strategy adaptation. I. INTRODUCTION EVOLUTIONARY ALGORITHMs (EAs), inspired by the natural evolution of species, have been successfully applied to solve numerous optimization problems in diverse fields. However, when implementing the EAs, users not only need to determine the appropriate encoding schemes and evolutionary operators, but also need to choose the suitable parameter settings to ensure the success of the algorithm, which may lead to demanding computational costs due to the time-consuming trial-and-error parameter and operator tuning process. To overcome such inconvenience, researchers have actively investigated the adaptation of parameters and operators in EAs [1]–[3]. Different categorizations of parameter Manuscript received January 16, 2007; revised July 20, 2007, March 24, 2008, and May 08, 2008. First published September 26, 2008; current version published April 01, 2009. This work was supported by the A*Star (Agency for Science, Technology and Research, Singapore) under Grant 052 101 0020. The authors are with the School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore 639798, Singapore (e-mail: qinkai@pmail.ntu.edu.sg; huangling@pmail.ntu.edu.sg; epnsugan@ntu.edu.sg). Color versions of one or more of the figures in this paper are available online at http://ieeexplore.ieee.org. Digital Object Identifier 10.1109/TEVC.2008.927706 adaptation methods have been presented in [4]–[6]. Angeline [4] summarized two types of parameter updating rules in an adaptive EA, namely, absolute and empirical rules. Absolute updating rules usually prespecify how the parameter modifications would be made, while empirical updating rules adapt parameters according to the competition inherent in EAs. Literature [5] divided the parameter adaptation techniques into three categories: deterministic, adaptive, and self-adaptive control rules. Deterministic rules modify the parameters according to certain predetermined rationales without utilizing any feedback from the search process. Adaptive rules incorporate some form of the feedback from the search procedure to guide the parameter adaptation. Self-adaptive rules directly encode parameters into the individuals and evolve them together with the encoded solutions. Parameter values involved in individuals with better fitness values will survive, which fully utilize the feedback from the search process. Generally speaking, self-adaptive rules can also refer to those rules that mainly utilize the feedback from the search process such as fitness values to guide the updating of parameters. The differential evolution (DE) algorithm, proposed by Storn and Price [7], is a simple yet powerful population-based stochastic search technique, which is an efficient and effective global optimizer in the continuous search domain. DE has been successfully applied in diverse fields such as mechanical engineering [13], [14], communication [11], and pattern recognition [10]. In DE, there exist many trial vector generation strategies out of which a few may be suitable for solving a particular problem. Moreover, three crucial control parameters involved in DE, i.e., population size , scaling factor , and crossover rate , may significantly influence the optimization performance of the DE. Therefore, to successfully solve a specific optimization problem at hand, it is generally required to perform a time-consuming trial-and-error search for the most appropriate strategy and to tune its associated parameter values. However, such a trial-and-error searching process requires high computational costs. Moreover, as evolution proceeds, the population of DE may move through different regions in the search space, within which certain strategies associated with specific parameter settings may be more effective than others. Therefore, it is desirable to adaptively determine an appropriate strategy and its associated parameter values at different stages of evolution/search process. In this paper, we propose a self-adaptive DE (SaDE) algorithm to avoid the expensive computational costs spent on searching for the most appropriate trial vector generation strategy as well as its associated parameter values by a trial-and-error procedure. Instead, both strategies and their associated parameters are gradually 1089-778X/$25.00 © 2008 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 399 self-adapted by learning from their previous experiences in generating promising solutions. Consequently, a more suitable generation strategy along with its parameter settings can be determined adaptively to match different search/evolution phases. Specifically, at each generation, a set of trial vector generation strategies together with their associated parameter values will be separately assigned to different individuals in the current population according to the selection probabilities learned from the previous generations. The remainder of this paper is organized as follows. The conventional DE and related work are reviewed in Sections II and III, respectively. Section IV describes the proposed SaDE. Experimental results demonstrating the performance of SaDE in comparison with the conventional DE and several state-of-the-art adaptive DE variants over a suite of 26 bound constrained numerical optimization problems are presented in Section V. Section VI concludes this paper. II. DE ALGORITHM DE algorithm aims at evolving a population of -dimensional parameter vectors, so-called individuals, which encode the candidate solutions, i.e., towards the global optimum. The initial population should better cover the entire search space as much as possible by uniformly randomizing individuals within the search space constrained by the prescribed minimum and maximum parameter bounds and . For example, the initial value of the th parameter in the th individual at the generation is generated by (1) where represents a uniformly distributed random variable within the range . A. Mutation Operation After initialization, DE employs the mutation operation to produce a mutant vector with respect to each individual , so-called target vector, in the current population. For each target vector at the generation , its associated mutant vector can be generated via certain mutation strategy. For example, the five most frequently used mutation strategies implemented in the DE codes1 are listed as follows: 1) “DE/rand/1”: (2) 2) “DE/best/1”: (3) 3) “DE/rand-to-best/1”: (4) 1Publicly available online at http://www.icsi.berkeley.edu/~storn/code.html 4) “DE/best/2”: (5) 5) “DE/rand/2”: (6) The indices are mutually exclusive integers randomly generated within the range , which are also different from the index . These indices are randomly generated once for each mutant vector. The scaling factor is a positive control parameter for scaling the difference vector. is the best individual vector with the best fitness value in the population at generation . B. Crossover Operation After the mutation phase, crossover operation is applied to each pair of the target vector and its corresponding mutant vector to generate a trial vector: . In the basic version, DE employs the binomial (uniform) crossover defined as follows: if or otherwise (7) In (7), the crossover rate is a user-specified constant within the range , which controls the fraction of parameter values copied from the mutant vector. is a randomly chosen integer in the range . The binomial crossover operator copies the th parameter of the mutant vector to the corresponding element in the trial vector if or . Otherwise, it is copied from the corresponding target vector . There exists another exponential crossover operator, in which the parameters of trial vector are inherited from the corresponding mutant vector starting from a randomly chosen parameter index till the first time . The remaining parameters of the trial vector are copied from the corresponding target vector . The condition is introduced to ensure that the trial vector will differ from its corresponding target vector by at least one parameter. DE’s exponential crossover operator is functionally equivalent to the circular two-point crossover operator. C. Selection Operation If the values of some parameters of a newly generated trial vector exceed the corresponding upper and lower bounds, we randomly and uniformly reinitialize them within the prespecified range. Then, the objective function values of all trial vectors are evaluated. After that, a selection operation is performed. The objective function value of each trial vector is compared to that of its corresponding target vector in the current population. If the trial vector has less or equal objective function value than the corresponding target vector, the trial vector will replace the target vector and enter the population of the next generation. Otherwise, the target vector will remain in Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 400 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 TABLE I ALGORITHMIC DESCRIPTION OF DE the population for the next generation. The selection operation can be expressed as follows: if otherwise. (13) The above 3 steps are repeated generation after generation until some specific termination criteria are satisfied. The algorithmic description of DE is summarized in Table I. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 401 III. PREVIOUS WORK RELATED TO DE The performance of the conventional DE algorithm highly depends on the chosen trial vector generation strategy and associated parameter values used. Inappropriate choice of strategies and parameters may lead to premature convergence or stagnation, which have been extensively demonstrated in [8], [16], [17], [24], and [29]. In the past decade, DE researchers have suggested many empirical guidelines for choosing trial vector generation strategies and their associated control parameter settings. Storn and Price [15] suggested that a reasonable value for should be between and , and a good initial choice of was 0.5. The effective range of values was suggested between 0.4 and 1. The first reasonable attempt of choosing value can be 0.1. However, because the large value can speed up convergence, the value of 0.9 for may also be a good initial choice if the problem is near unimodal or fast convergence is desired. Moreover, if the population converges prematurely, either or can be increased. It was recommended in [20] to use the trial vector generation strategy DE/current-to-rand/1 and parameter setting . If the DE converges prematurely, one should increase the value of and or decrease the value of . If the population stagnates, one should increase the value of or , or randomly choose within the range . If none of the above configuration works, one may try the strategy DE/rand/1/bin along with a small {m CR} value. Gämperle et al. [17] examined different parameter settings for DE on Sphere, Rosenbrock, and Rastrigin functions. Their experimental results showed that the searching capability and convergence speed are very sensitive to the choice of control parameters , , and . They recommended that the population size be between and , the scaling factor equal 0.6, and the crossover rate be between . Recently, Rönkkönen et al. [21] suggested using values between with being a good initial choice. The values should lie in when the function is separable while in when the function’s parameters are dependent. However, when solving a real engineering problem, the characteristics of the problem are usually unknown. Consequently, it is difficult to choose the most appropriate value in advance. In DE literatures, various conflicting conclusions have been drawn with regard to the rules for manually choosing the strategy and control parameters, which undesirably confuse scientist and engineers who are about to utilize DE to solve scientific and engineering problems. In fact, most of these conclusions lack sufficient justifications as their validity is possibly restricted to the problems, strategies, and parameter values considered in the investigations. Therefore, researchers have developed some techniques to avoid manual tuning of the control parameters. For example, Das et al. [29] linearly reduced the scaling factor with increasing generation count from a maximum to a minimum value, or randomly varied in the range . They also employed a uniform distribution between 0.5 and 1.5 (with a mean value of 1) to obtain a new hybrid DE variant [30]. In addition, several researchers [18], [24]–[26] focused on the adaptation of the control parameters and . Liu and Lampinen introduced fuzzy adaptive differential evolution (FADE) using fuzzy logic controllers whose inputs incorporate the relative function values and individuals of successive generations to adapt the parameters for the mutation and crossover operations [18]. Based on the experimental results on test functions, the FADE algorithm outperformed the conventional DE on higher dimensional problems. Zaharie proposed a parameter adaptation for DE (ADE) based on the idea of controlling the population diversity, and implemented a multipopulation approach [24]. Following the same ideas, Zaharie and Petcu designed an adaptive Pareto DE algorithm for multiobjective optimization and analyzed its parallel implementation [25]. Abbass [26] self-adapted the crossover rate of DE for multiobjective optimization problems, by encoding the crossover rate into each individual, to simultaneously evolve with other parameter. The scaling factor is generated for each variable from a Gaussian distribution . Since our preliminary self-adaptive DE work presented in [19], some new research papers focusing on the adaptation of control parameters in DE were published. Omran et al. [27] introduced a self-adapted scaling factor parameter analogous to the adaptation of crossover rate in [26]. The crossover rate in [27] is generated for each individual from a normal distribution . This approach (called SDE) was tested on four benchmark functions and performed better than other versions of DE. Besides adapting the control parameters or , Teo proposed differential evolution with self adapting populations (DESAP) [22], based on Abbass’s self-adaptive Pareto DE. Recently, Brest et al. [28] encoded control parameters and into the individuals and adjusted by introducing two new parameters and . In their algorithm (called jDE), a set of values were assigned to individuals in the population. Then, a random number rand was uniformly generated in the range of . If , the was reinitialized to a new random value in the range of , otherwise it was kept unchanged. The was adapted in the same manner but with a different reinitialization range of . Brest et al. further compared the performance of several self-adaptive and adaptive DE algorithms in [42]. Recently, the self-adaptive neighborhood search DE algorithm was adopted into a novel cooperative coevolution framework [39]. Moreover, researchers improved the performance of DE by implementing opposition-based learning [40] or local search [41]. IV. SADE ALGORITHM To achieve the most satisfactory optimization performance by applying the conventional DE to a given problem, it is common to perform a trial-and-error search for the most appropriate trial vector generation strategy and fine-tune its associated control parameter values, i.e., the values of , , and . Obviously, it may expend a huge amount of computational costs. Moreover, during different stages of evolution, different trial vector generation strategies coupled with specific control parameter values can be more effective than others. Motivated by these observations, we develop a SaDE algorithm, in which both trial vector generation strategies and their associated control parameter values can be gradually self-adapted according to their previous experiences of generating promising solutions. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 402 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 The core idea behind the proposed SaDE algorithm is elucidated as follows. A. Trial Vector Generation Strategy Adaptation DE realizations employing different trial vector generation strategies usually performs differently when solving different optimization problems. Instead of employing the computationally expensive trial-and-error search for the most suitable strategy and its associated parameter values, we maintain a strategy candidate pool including several effective trial vector generation strategies with effective yet diverse characteristics. During evolution, with respect to each target vector in the current population, one strategy will be chosen from the candidate pool according to a probability learned from its previous experience of generating promising solutions and applied to perform the mutation operation. The more successfully one strategy behaved in previous generations to generate promising solutions, the more probably it will be chosen in the current generation to generate solutions. In the following, we investigate several effective trial vector generation strategies commonly referred to in DE literatures and choose some of them to construct the strategy candidate pool. • Strategies relying on the best solution found so far such as “DE/rand-to-best/1/bin,” “DE/best/1/bin,” and “DE/best/2/ bin,” usually have the fast convergence speed and perform well when solving unimodal problems. However, they are more likely to get stuck at a local optimum and thereby lead to a premature convergence when solving multimodal problems. • The “DE/rand/1/bin” strategy usually demonstrates slow convergence speed and bears stronger exploration capability. Therefore, it is usually more suitable for solving multimodal problems than the strategies relying on the best solution found so far. • The “DE/best/1/bin” strategy is a degenerated case of the “DE/rand-to-best/1/bin” strategy with equal to 1. • Two-difference-vectors-based strategies may result in better perturbation than one-difference-vector-based strategies. Storn [11] claimed that according to the central limit theorem, the random variation of the summation of difference vectors of all target vector pairs in the current population was shifted slightly towards the Gaussian direction, which is the most commonly used mutation operator in EAs. The advantage of using two-difference- vectors-based strategies was also discussed in [35] in the particle swarm optimization (PSO) context, which empirically demonstrated that the statistical distribution of the summation of all one-difference vectors had a triangle shape, while the statistical distribution of the summation of all two-difference vectors had a bell shape that was generally regarded as a better perturbation mode. • DE/current-to-rand/1 is a rotation-invariant strategy. Its effectiveness has been verified when it was applied to solve multiobjective optimization problems [34]. Our preliminary study in [19] only included two trial vector generation strategies into the strategy candidate pool, i.e., “DE/ rand/1/bin” and “DE/rand-to-best/2/bin,” which were frequently employed in many DE literatures. We incorporate two additional strategies: “DE/rand/2/bin” and “DE/current-to-rand/1” into the pool. The former strategy can have a better exploration capability due to the Gaussian-like perturbation while the latter one enables the algorithm to solve rotated problems more effectively. The four trial vector generation strategies constituting the strategy candidate pool in the proposed SaDE algorithm are listed as follows. The binomial-type crossover operator is utilized in the first three strategies due to its popularity in many DE literatures [7], [8], as shown in the equation at the bottom of the page. Generally speaking, a good candidate pool should be restrictive so that the unfavorable influences of less effective strategies can be suppressed. Moreover, a set of effective strategies contained in a good candidate pool should have diverse characteristics, that is, the used strategies should demonstrate distinct capabilities when dealing with a specific problem at different stages of evolution. The theoretical study on the choice of the optimal pool size and the selection of strategies used in the pool are attractive research issues and deserve further investigations. In the SaDE algorithm, with respect to each target vector in the current population, one trial vector generation strategy is selected from the candidate pool according to the probability learned from its success rate in generating improved solutions within a certain number of previous generations. The selected strategy is subsequently applied to the corresponding target vector to generate a trial vector. More specifically, at each generation, the probabilities of choosing each strategy in the candidate pool are summed to 1. These probabilities are DE/rand/1/bin: if or otherwise DE/rand-to-best/2/bin: if or otherwise DE/rand/2/bin: if or otherwise DE/current-to-rand/1: Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 403 Fig. 1. Success memory and failure memory. gradually adapted during evolution in the following manner. Assume that the probability of applying the th strategy in the candidate pool to a target vector in the current population is , where is the total number of strategies contained in the pool. The probabilities with respect to each strategy are initialized as , i.e., all strategies have the equal probability to be chosen. We use the stochastic universal selection method [31] to select one trial vector generation strategy for each target vector in the current population. At the generation , after evaluating all the generated trial vectors, the number of trial vectors generated by the th strategy that can successfully enter the next generation is recorded as while the number of trial vectors generated by the th strategy that are discarded in the next generation is recorded as . We introduce success and failure memories to store these numbers within a fixed number of previous generations hereby named learning period (LP). As illustrated in Fig. 1, at the generation , the number of trial vectors generated by different strategies that can enter or fail to enter the next generation over the previous LP generations are stored in different columns of the success and failure memories. Once the memories overflow after LP generations, the earliest records stored in the memories, i.e., or will be removed so that those numbers calculated in the current generation can be stored in the memories, as shown in Fig. 2. After the initial LP generations, the probabilities of choosing different strategies will be updated at each subsequent generation based on the success and failure memories. For example, at the generation , the probability of choosing the th strategy is updated by where (14) where represents the success rate of the trial vectors generated by the th strategy and successfully entering the next generation within the previous LP generations with respect to generation . The small constant value is used to avoid the possible null success rates. To ensure that the probabilities of choosing strategies are always summed to 1, we further divide by to calculate . Obviously, the larger the success rate for the th strategy within the previous LP generations is, the larger the probability of applying it to generate the trial vectors at the current generation is. B. Parameter Adaptation In the conventional DE, the choice of numerical values for the three control parameters , , and highly depends on the problem under consideration. Some empirical guidelines for choosing reasonable parameter settings have been discussed in Section III. In the proposed SaDE algorithm, we leave as a user-specified parameter because it highly replies on the complexity of a given problem. In fact, the population size does not need to be fine-tuned and just a few typical values can be tried according to the preestimated complexity of the given problem. Between other two parameters, is usually more sensitive to problems with different characteristics, e.g., the unimodality and multimodality, while is closely related to the convergence speed. In our SaDE algorithm, the parameter is approximated by a normal distribution with mean value 0.5 and standard deviation 0.3, denoted by . A set of values are randomly sampled from such normal distribution and applied to each target vector in the current population. It is easy to verify that values of must fall into the range with the probability of 0.997. By doing so, we attempt to maintain both exploitation (with small values) and exploration (with large values) power throughout the entire evolution process. Following suggestions in [20], the control parameter in the strategy “DE/current-to-rand/1” is hereby randomly generated within so as to eliminate one additional parameter. As demonstrated by a suite of extensive experiments in [8], the proper choice of can lead to successful optimization performance while a wrong choice may deteriorate the performance. In fact, good values of generally fall into a small range for a given problem, with which the algorithm can perform consistently well. Therefore, we consider gradually adjusting the range of values for a given problem according to previous values that have generated trial vectors successfully entering the next generation. Specifically, we assume that obeys a normal distribution with mean value and standard deviation , denoted by where is initialized as 0.5. The should be set as a small value to guarantee that most values generated by are between , even when is near 0 or 1. Hence, the value of is set as 0.1. Our experiments showed that minor changes to the of the Gaussian distribution do not influence the performance of SaDE significantly. In our preliminary work in [19], the same value was used for all the trial vector generation strategies. However, it is possible that different strategies can perform well by using different ranges of values. Hence, it is reasonable to adapt the value of CRm with respect to each trial vector generation strategy. Without loss of generality, with respect to the th Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 404 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 Fig. 2. Progress of success memory. strategy, the value of is initialized to 0.5. A set of values are randomly generated according to and then applied to those target vectors to which the th strategy is assigned. To adapt the crossover rate , we establish memories named to store those values with respect to the th strategy that have generated trial vectors successfully entering the next generation within the previous LP generations. Specifically, during the first LP generations, values with respect to th strategy are generated by . At each generation after LP generations, the median value stored in will be calculated to overwrite . Then, values can be generated according to when applying the th strategy. After evaluating the newly generated trial vectors, values in that correspond to earlier generations will be replaced by promising values obtained at the current generation with respect to the th strategy. By incorporating the aforementioned trial vector generation strategy and control parameter adaptation schemes into the conventional DE framework, a SaDE algorithm is developed. In the SaDE algorithm, both trial vector generation strategies and their associated parameter values are gradually self-adapted by learning their previous experiences of generating promising solutions. Consequently, a more suitable strategy along with its parameter setting can be determined adaptively to suit different phases of the search process. Extensive experiments described in Section IV verify the promising performance of the SaDE to handle problems with distinct properties such as unimodality and multimodality. The algorithmic description of the SaDE is presented in Table II. V. NUMERICAL EXPERIMENTS AND RESULTS A. Test Functions As discussed in [32], many benchmark numerical functions commonly used to evaluate and compare optimization algorithms may suffer from two problems. First, global optimum lies at the center of the search range. Second, local optima lie along the coordinate axes or no linkage among the variables/dimensions exists. To solve these problems, we can shift or rotate the conventional benchmark functions. For benchmark functions suffering from the first problem, we may shift the global optimum to a random position so that the global optimum position has different numerical values for different dimensions, i.e., , where is the new function, is the old function, is the old global optimum, and is the new global optimum with different values for different dimensions and not lying at the center of the search range. For the second problem, we can rotate the function , where is an TABLE II ALGORITHMIC DESCRIPTION OF SADE orthogonal rotation matrix, to avoid local optima lying along the coordinate axes while retaining the properties of the test function. We hereby shift nine commonly used benchmark Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 405 functions , and further rotate three of them . Two composition functions and are chosen from [32], which are constructed by using some basic benchmark functions to obtain more challenging problems. Gaussian function is used to combine the simple benchmark functions and blur the functions’ structures. The composition functions are asymmetrical multimodal problems, with different properties in different areas. The detailed principle of constructing this class of functions is presented in [32], which is not repeated here. In the following, 14 test functions are listed, among which functions are unimodal and functions are multimodal. These 14 test functions are dimensionwise scalable. 1) Shifted sphere function the shifted global optimum 2) Shifted Schwefel’s Problem 1.2 the shifted global optimum 3) Rosenbrock’s function 4) Shifted Schwefel’s Problem 1.2 with noise in fitness the shifted global optimum 5) Shifted Ackley’s function the shifted global optimum 6) Shifted rotated Ackley’s function2 the shifted global optimum 7) Shifted Griewank’s function the shifted global optimum 8) Shifted rotated Griewank’s function the shifted global optimum 9) Shifted Rastrigin’s function the shifted global optimum 10) Shifted rotated Rastrigin’s function the shifted global optimum 11) Shifted noncontinuous Rastrigin’s function for the shifted global optimum 2.... means the condition number of rotation matrix... Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 406 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 TABLE III GLOBAL OPTIMUM, SEARCH RANGES, AND INITIALIZATION RANGES OF THE TEST FUNCTIONS 12) Schwefel’s function 13) Composition function 1 (CF1) in [32]. The function (CF1) is composed by using ten sphere functions. The global optimum is easy to find once the global basin is found. The details of constructing such functions are presented in [32] and [37]. 14) Composition function 6 (CF6) in [32]. The function (CF6) is composed by using ten different benchmark functions, i.e., two rotated Rastrigin’s functions, two rotated Weierstrass functions, two rotated Griewank’s functions, two rotated Ackley’s functions, and two rotated Sphere functions. To make our test suite more comprehensive, we also chose an additional set of 12 test functions from [33] and [38]. 15) Schwefel’s Problem 2.22 16) Schwefel’s Problem 2.21 17) Generalized penalized function 1 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 407 18) Generalized penalized function 2 19) Kowalik’s function 20) Six-hump camel-back function 21) Branin function 22) Hartman’s function 1 23) Hartman’s function 2 24) Shekel’s family with and for and B. Algorithms for Comparison Experiments were conducted on a suite of 26 numerical functions to evaluate nine algorithms including the proposed SaDE algorithm. For functions , both 10-dimensional (10-D) and 30-dimensional (30-D) functions were tested. The maximum number of function evaluations (FEs) is set to 100 000 when solving 10-D problems, and 300 000 when solving 30-D counterpart. For the remaining functions , the function dimensions are listed in Table III, and the maximum number of FEs is set to 500 000 [38]. All experiments were run 30 times, independently. The nine algorithms in comparison are listed as follows: • DE/rand/1/bin: ; • DE/rand/1/bin: ; • DE/rand/1/bin: ; • DE/rand-to-best/1/bin: ; • DE/rand-to-best/2/ bin with ; • SaDE algorithm; • adaptive DE algorithm [24]; • SDE algorithm [27]; • jDE [28]. Here, “DE/rand/1/bin” is chosen because it employs a most commonly used trial vector generation strategy, with three commonly suggested sets of control parameters: 1) ; 2) ; and 3) [15], [21], [33]. “DE/rand-to-best/1/bin” and “DE/rand-to-best/2/bin” employ more reliable trial vector generation strategies, and the control parameters are both set as in our experiments [8], [9]. We also choose three most representative adaptive DE variants proposed recently to compare with our proposed SaDE algorithm. The population sizes are all set to 50 and the learning periods are 50 for both 10-D and 30-D functions. C. Experimental Results and Discussions Tables IV and V report the mean and standard deviation of function values as well as the success rates by applying the nine algorithms to optimize the 10-D and 30-D numerical functions , respectively. The best results are typed in bold. The success of an algorithm means that this algorithm can result in a function value no worse than the prespecified optimal value, i.e., for all problems with the number of FEs less than the prespecified maximum number. The success rate is calculated as the number of successful runs divided by the total number of runs. Figs. 3 and 4 illustrate the convergence characteristics in terms of the best fitness value of the median run of each algorithm for functions – with . Because the convergence graphs of the 30-D problems are similar to their 10-D counterparts, they are omitted here. For functions – , because most algorithms can locate the global optima with 100% success rate within the specified maximum FEs, it is unnecessary to present the mean and standard deviation of function values. Instead, to compare the convergence speed, we report the average number of function evaluations (NFE) required to find the global optima when an algorithm solves the problem with 100% success rate. 1) Comparing SaDE With Conventional DE: In this section, we intend to show how well the proposed SaDE algorithm performs when compared to the conventional DE. For the 10-D – , Tables IV and VI show that and are easily optimized by fiveDE variants and the SaDE algorithm with 100% success rate. Except these two functions, the Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 408 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 TABLE IV RESULTS FOR 10-D PROBLEMS performances of DE/rand/1 and DE/rand/1 are almost contrary. For example, DE/rand/1/bin obtains better results on unimodal functions and where DE/rand/1/bin performs poorly. On the contrary, DE/rand/1/bin performs efficiently and robustly on multimodal functions , and , while DE/rand/1/bin fails totally on , and , only TABLE V RESULTS FOR 30-D PROBLEMS 13% success rate on . Therefore, different values of for DE/rand/1/bin demonstrate diverse performances on different problems. DE/rand-to-best/1/bin and DE/rand-to-best/2/bin are more reliable than DE/rand/1/bin. However, they also totally or partially fail in optimizing some problems where SaDE can locate the global optima in every run. Overall, SaDE obtains a smaller mean value and a higher success rate than the five DE variants for all problems. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 409 Fig. 3. Median convergence characteristics of rand/1 ..  .., rand/1 ..  .., rand/1   ....  .., rand-to-best/1, rand-to-best/2, and SaDE on 10-D test functions  – . (a)  : sphere; (b)  : Schwefel’s 1.2; (c)  : Rosenbrock; (d)  : Schwefel’s Problem 1.2 with noise in fitness; (e)  : Ackley; (f)  : rotated Ackley; (g)  : Griewank; (h)  : rotated Griewank; (i)  : Rastrigin; (j)  : rotated Rastrigin; (k)  : noncontinuous Rastrigin; (l)  : Schwefel; (m)  : composition function 1; and (n)  : composition function 6. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 410 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 Fig. 4. Median convergence characteristics of SaDE, ADE (Zaharie), SDE, and jDE on 10-D test functions .. –.. . (a) .. : sphere; (b) .. : Schwefel’s 1.2; (c) .. : Rosenbrock; (d) .. : Schwefel’s Problem 1.2 with noise in fitness; (e) .. : Ackley; (f) .. : rotated Ackley; (g) .. : Griewank; (h) .. : rotated Griewank; (i) .. : Rastrigin; (j) .. : rotated Rastrigin; (k) .. : noncontinuous Rastrigin; (l) .. : Schwefel; (m) .. : composition function 1; and (n) .. : composition function 6. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 411 TABLE VI COMPARISON OF  AND SADE Furthermore, the convergence map of DE/rand/1/bin , DE/rand/1/bin , DE/rand/1/bin , DE/rand-to-best/1/bin , DE/rand-to-best/2/bin , and SaDE in Fig. 3 shows that the SaDE algorithm always converges faster than others on six problems , and , while slightly slower than DE/rand-to-best/1/bin or DE/rand/1/bin on the remaining problems. It can be observed that on DE/rand/1/bin , DE/rand-to-best/1/bin and DE/rand/1/bin converge fast, followed by SaDE. This is because a small value ( or ) is an effective value to optimize Rastrigin problem, while our SaDE with an initial needs some generations to self-adapt the parameters to suitable values. This issue will be discussed in Section V-D. For the 30-D problems – , DE/rand/1/bin has great difficulty in finding the global optima on all problems. DE/rand/1/bin yields 100% success rate for , and . The SaDE algorithm performs much better with success rates of 100% on most problems, and 90% on where other DE variants totally fail in finding the global optima. When the dimension of variable was increased to 30, some problems such as functions , and become so difficult that all the six approaches could not find the optimal solutions within the maximum FEs. Regarding the speed of Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 412 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 Fig. 5. Empirical distribution of normalized success performance on all 26 test problems. different algorithms in reaching the optimal solutions, we further compare the NFEs on problems with 100% success rate in Table VI, and find that SaDE converges the fastest among these algorithms on eight problems except . Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 413 TABLE VII RESULTS OF SADE AND FADE ALGORITHMS TABLE VIII SADE’S RESULTS WITH DIFFERENT LEARNING PERIOD (LP) ON TEST FUNCTIONS .. ..  , AND  (10-D) For the test problems – , both SaDE and DE/rand/1/bin successfully solve all problems in each run, while SaDE shows an overall better convergence speed than DE/rand/1/bin . 2) Comparing SaDE With Other Adaptive DE Variants: The performance of the SaDE is compared with three other adaptive DE variants: ADE [24], SDE [27], and jDE [28] on 10-D and 30-D problems – . For 10-D problems, the best results of unimodal functions – are obtained by SaDE and jDE, where SaDE demonstrates a slight superiority on efficiency, which can be observed from the convergence graphs [Fig. 4(a)–(d)]. Among the multimodal functions, Ackley and rotated Ackley are easily solved by all the adaptive DE variants with 100% success rate. For Griewank and Rastrigin, before rotation, SaDE, ADE, and jDE have high success rates as shown in Table IV. After rotation ( and ), only SaDE and jDE successfully find the global optimum on in some run, and SaDE offers a higher success rate than jDE. is so difficult that no algorithm could find the global optimum. For the last two composition problems and , SaDE is able to locate the optimal solutions with smaller standard deviations and higher success rates, demonstrating better efficiency and stability than the other three algorithms. From the results of 30-D problems shown in Table V, we can observe that the algorithms achieved similar ranking as in the 10-D problems, and were not very successful in optimizing , and .However, with respect to the mean and standard deviations, SaDE obtains smallest values on and , and the second smallest values on where jDE gets the smallest values. 3) Overall Performance Comparison: In this part, we intend to further compare the overall performances of nine algorithms on all functions by plotting empirical distribution of normalized success performance [36]. The success performance is defined as success performance (SP) mean (FEs for successful runs)*(# of total runs)/(# of successful runs). We first calculated the success performance of nine algorithms on each test function, and then normalized the SP by dividing all SPs by the SP of the best algorithm on the respective function. Results of all functions are used where at least one algorithm was successful in at least one run. Therefore, for 10-D – problems, we plot the results of all functions except , and exclude functions , and for 30-D – problems. The test problems – are all plotted. Small values of SP and large values of the empirical distribution in graphs are preferable. The first one that reaches the top of the graph will be regarded as the best algorithm. From Fig. 5, we can observe that SaDE outperforms other approaches on overall performance on test problems. 4) ComparisonWith FADE: The FADE algorithm was tested on a set of standard test functions in [18], including 2, 3, 30, and 50 dimensions. Because the low-dimensional (2 or 3) test functions are easy to solve for both conventional DE and FADE, we hereby only compare our SaDE with the FADE algorithm on 50-D test functions chosen from [18]. The parameter settings are the same as in [18]: population size , and maximum generations are listed in Table VII. The averaged results of 100 independent runs are summarized in the table (results for FADE are taken from [18]), which show that the proposed SaDE algorithm obviously performs better than the FADE algorithm. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 414 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 Fig. 6. Self-adaptation characteristics of .. on Rosenbrock and Rastrigin functions (10-D). (a) Rosenbrock function. (b) Rastrigin function. D. Analysis of Self-Adaptation Property of SaDE 1) Self-Adaptation of Crossover Probability: Usually, when DE solves problems, there is no specific value of and , which is effective in all search phases. Instead, possibly several combinations of different and values can be effective in different search phases. However, Rosenbrock and Rastrigin function are exceptional. From the experiments of DE/rand/1/bin on these two functions, we know that usually DE/rand/1/bin with a large could obtain a good result on Rosenbrock function and a small is beneficial to Rastrigin function, which could also be concluded from comparing the results of DE/rand/1/bin and . As we know the suitable values for Rosenbrock and Rastrigin functions, we can observe the variation of values in SaDE algorithm to check whether the self-adaptation of is effective. Because the value in SaDE is mostly depended on the mean value of normal distribution, we plot the value Fig. 7. Self-adaptation characteristics of strategies (10-D). (a) Griewank. (b) Rotated Griewank. when the SaDE algorithm optimized Rosenbrock and Rastrigin functions as the generation increases in Fig. 6.We found that for Rosenbrock function, the CRm values of strategy “rand/1/bin,” “rand-to-best/2/bin,” and “rand/2/bin” keep increasing during evolution, as we expected. On the contrary, for Rastrigin function, the values of three strategies all keep decreasing during evolution. Therefore, we can say that our proposed SaDE algorithm self-adapts the crossover probability effectively. 2) Self-Adaptation of Trial Vector Generation Strategy: To investigate the self-adaptive selection of trial vector generation strategy in SaDE algorithm, we plot the variations of the four different strategies’ probabilities as the evolution progresses. As we know that the strategy “current-to-rand” is rotationally invariant [20] and has superior performance on rotated problem as stated in Section II, this strategy should occupy more proportion if it yields good results when dealing with rotated problems. As shown in Fig. 7, for Griewank’s function, the strategy “current- to-rand” occupied a very small proportion during the whole evolution progress. At the beginning, we assign each strategy equal probability. Because the strategy “current-to-rand” could Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 415 Fig. 8. SaDE’s results with different learning period LP on 11 test functions (10-D). not yield better results, our self-adaptive mechanism of learning is unlikely to choose the strategy “current-to-rand” in next few generations. As this strategy always performed badly, its proportion almost lowered to 0. The individuals were mostly mutated by the other three strategies that always occupy proportions above 0.25 as shown in Fig. 7. After 800 generations, the algorithm converged, and these four strategies performed competitively so as to all occupy around 0.25 proportion. On the contrary, after we rotated the Griewank’s function, the strategy “current-to-rand” demonstrated a good performance at the be- Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. 416 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 13, NO. 2, APRIL 2009 ginning so as to occupy a higher proportion in 300 generations. During about 300–550 generations, the proportion of strategy “current-to-rand” slightly decreased under 0.25 because relatively inferior solutions are found by this strategy during this stage of evolution. After 550 generations, strategy “current-torand” occupied a higher proportion again until the algorithm converged and four strategies were almost stable. E. Parameter Study 1) Learning Period (LP): The learning period parameter LP needs to be optimized. In this section, we use 10-D test functions – to investigate the impact of this parameter on SaDE algorithm. The SaDE algorithm runs 30 times on each function with five different learning periods LP of 20, 30, 40, 50, and 60. Because functions , and are solved with 100% success rate with five different LP values, we here omit the results of mean and standard deviation for these functions; only the results of , and are shown in Table VIII. However, for functions , and , we investigate the influence of LPs on convergence speed of SaDE algorithm, by comparing the FEs that SaDE algorithm cost to obtain the global optimum with different LPs. Fig. 8 shows the box plots of FEs that SaDE algorithm requires to reach the global optimum with five different LPs. The box has lines at the lower quartile, median, and upper quartile values. The whiskers are lines extending from each end of the box to show the extent of the remaining data. Outliers are data with values beyond the ends of the whiskers. If there is no data outside the whisker, a dot is placed at the bottom whisker. From Fig. 8, we found that SaDE algorithm succeeds on all functions with similar FEs by using five different LPs. Therefore, the convergence speed of SaDE algorithm is less sensitive to the parameter LP parameter values between 20 and 60. VI. CONCLUSION This paper presented a SaDE algorithm, which eliminates the time-consuming exhaustive search for the most suitable trial vector generation strategy and the associated control parameters and . In SaDE, trial vector generation strategies together with their two control parameters will be probabilistically assigned to each target vector in the current population according to the probabilities gradually learned from the experience to generate improved solutions. We have investigated the self-adaptive characteristics of the value and trial vector generation strategies. Experiments showed that the SaDE algorithm could evolve suitable strategies and parameter values as evolution progresses. The sensitivity analysis of LP parameter indicated that it had insignificant impact on the performance of the SaDE. We have compared the performance of SaDE with the conventional DE and three adaptive DE variants over a suite of 26 bound constrained numerical optimization problems, and concluded that SaDE was more effective in obtaining better quality solutions, which are more stable with the relatively smaller standard deviation, and had higher success rates. REFERENCES [1] A. Tuson and P. Ross, “Adapting operator settings in genetic algorithms,” Evolut. Comput., vol. 6, no. 2, pp. 161–184, 1998. [2] J. Gomez, D. Dasgupta, and F. Gonzalez, “Using adaptive operators in genetic search,” in Proc. Genetic Evolut. Comput. Conf., Chicago, IL, Jul. 2003, pp. 1580–1581. [3] B. R. Julstrom, “What have you done for me lately? Adapting operator probabilities in a steady-state genetic algorithm,” in Proc. 6th Int. Conf. Genetic Algorithms, Pittsburgh, PA, Jul. 15–19, 1995, pp. 81–87. [4] P. J. Angeline, “Adaptive and self-adaptive evolutionary computation,” in Computational Intelligence: A Dynamic System Perspective, M. Palaniswami, Y. Attikiouzel, R. J. Marks, D. Fogel, and T. Fukuda, Eds. New York: IEEE Press, 1995, pp. 152–161. [5] J. E. Smith and T. C. Fogarty, “Operator and parameter adaptation in genetic algorithms,” Soft Comput., vol. 1, no. 2, pp. 81–87, Jun. 1997. [6] A. E. Eiben, R. Hinterding, and Z. Michalewicz, “Parameter control in evolutionary algorithms,” IEEE Trans. Evolut. Comput., vol. 3, no. 2, pp. 124–141, Jul. 1999. [7] R. Storn and K. V. Price, “Differential evolution-A simple and efficient heuristic for global optimization over continuous Spaces,” J. Global Optim., vol. 11, pp. 341–359, 1997. [8] K. Price, R. Storn, and J. Lampinen, Differential Evolution—A Practical Approach to Global Optimization. Berlin, Germany: Springer- Verlag, 2005. [9] V. Feoktistov, Differential Evolution: In Search of Solutions. Berlin, Germany: Springer-Verlag, 2006. [10] J. Ilonen, J.-K. Kamarainen, and J. Lampinen, “Differential evolution training algorithm for feed-forward neural networks,” Neural Process. Lett., vol. 7, no. 1, pp. 93–105, 2003. [11] R. Storn, “On the usage of differential evolution for function optimization,” in Proc. Biennial Conf. North Amer. Fuzzy Inf. Process. Soc., Berkeley, CA, 1996, pp. 519–523. [12] R. Storn, “Differential evolution design of an IIR-filter,” in Proc. IEEE Int. Conf. Evolut. Comput., Nagoya, Japan, May 1996. [13] T. Rogalsky, R. W. Derksen, and S. Kocabiyik, “Differential evolution in aerodynamic optimization,” in Proc. 46th Annu. Conf. ofCan. Aeronaut. Space Inst., Montreal, QC, Canada, May 1999, pp. 29–36. [14] R. Joshi and A. C. Sanderson, “Minimal representation multisensor fusion using differential evolution,” IEEE Trans. Syst. Man Cybern. A, Syst. Humans, vol. 29, no. 1, pp. 63–76, Jan. 1999. [15] R. Storn and K. Price, “Differential evolution-a simple and efficient adaptive scheme for global optimization over continuous spaces,” TR-95-012, 1995 [Online]. Available: http://http.icsi.berkeley.edu/ ~storn/litera.html [16] J. Lampinen and I. Zelinka, “On stagnation of the differential evolution algorithm,” in Proc. 6th Int. Mendel Conf. Soft Comput., P. O.smera, Ed., 2002, pp. 76–83. [17] R. Gämperle, S. D. Müller, and P. Koumoutsakos, “A parameter study for differential evolution,” in Advances in Intelligent Systems, Fuzzy Systems, Evolutionary Computation, A. Grmela and N. E. Mastorakis, Eds. Interlaken, Switzerland: WSEAS Press, 2002, pp. 293–298. [18] J. Liu and J. Lampinen, “A fuzzy adaptive differential evolution algorithm,” Soft Comput., vol. 9, no. 6, pp. 448–462, Apr. 2005. [19] A. K. Qin and P. N. Suganthan, “Self-adaptive differential evolution algorithm for numerical optimization,” in Proc. IEEE Congr. Evolut. Comput., Edinburgh, Scotland, Sep. 2005, pp. 1785–1791. [20] K. V. Price, “An introduction to differential evolution,” in New Ideas in Optimization, D. Corne, M. Dorigo, and F. Glover, Eds. London, U.K.: McGraw-Hill, 1999, pp. 79–108. [21] J. Rönkkönen, S. Kukkonen, and K. V. Price, “Real-parameter optimization with differential evolution,” in Proc. IEEE Congr. Evolut. Comput., Edinburgh, Scotland, Sep. 2005, pp. 506–513. [22] J. Teo, “Exploring dynamic self-adaptive populations in differential evolution,” Soft Comput., vol. 10, no. 8, pp. 637–686, 2006. [23] M. M. Ali and A. Torn, “Population set-based global optimization algorithms: Some modifications and numerical studies,” Comput. Operat. Res., vol. 31, no. 10, pp. 1703–1725, 2004. [24] D. Zaharie, “Control of population diversity and adaptation in differential evolution algorithms,” in Proc. Mendel 9th Int. Conf. Soft Comput., R. Matousek and P. Osmera, Eds., Brno, Czech Republic, Jun. 2003, pp. 41–46. [25] D. Zaharie and D. Petcu, “Adaptive pareto differential evolution and its parallelization,” in Proc. 5th Int. Conf. Parallel Process. Appl. Math., Czestochowa, Poland, Sep. 2003, pp. 261–268. [26] H. A. Abbass, “The self-adaptive Pareto differential evolution algorithm,” in Proc. Congr. Evolut. Comput., Honolulu, HI, May 2002, pp. 831–836. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:36:41 UTC from IEEE Xplore. Restrictions apply. QIN et al.: DIFFERENTIAL EVOLUTION ALGORITHM WITH STRATEGY ADAPTATION FOR GLOBAL NUMERICAL OPTIMIZATION 417 [27] M. G. H. Omran, A. Salman, and A. P. Engelbrecht, “Self-adaptive differential evolution,” in Lecture Notes in Artificial Intelligence. Berlin, Germany: Springer-Verlag, 2005, pp. 192–199. [28] J. Brest, S. Greiner, B. Boskovic, M. Mernik, and V. Zumer, “Self-adapting control parameters in differential evolution: A comparative study on numerical benchmark problems,” IEEE Trans. Evolut. Comput., vol. 10, no. 6, pp. 646–657, Dec. 2006. [29] S. Das, A. Konar, and U. K. Chakraborty, “Two improved differential evolution schemes for faster global search,” in ACM-SIGEVO Proc. Genetic Evolut. Comput. Conf., Washington, DC, pp. 991–998. [30] U. K. Chakraborty, S. Das, and A. Konar, “Differential evolution with local neighborhood,” in Proc. Congr. Evolut. Comput., Vancouver, BC, Canada, 2006, pp. 2042–2049. [31] J. E. Baker, “Reducing bias and inefficiency in the selection algorithm,” in Proc. 2nd Int. Conf. Genetic Algorithms, Cambridge, MA, 1987, pp. 14–21. [32] J. J. Liang, P. N. Suganthan, and K. Deb, “Novel composition test functions for numerical global optimization,” in Proc. IEEE Swarm Intell. Symp., Pasadena, CA, Jun. 2005, pp. 68–75. [33] J. Vesterstrøm and R. Thomson, “A comparative study of differential evolution, particle swarm optimization, and evolutionary algorithms on numerical benchmark problems,” in Proc. IEEE Congr. Evolut. Comput., Portland, OR, June 2004, pp. 1980–1987. [34] A. Iorio and X. Li, “Solving rotated multi-objective optimization problems using differential evolution,” in Proc. Australian Conf. Artif. Intell., Cairns, Dec. 2004, pp. 861–872. [35] W. J. Zhang and X. F. Xie, “DEPSO: Hybrid particle swarm with differential evolution operator,” in Proc. IEEE Int. Conf. Syst. Man Cybern., Washington, DC, 2003, pp. 3816–3821. [36] N. Hansen, “Compilation of results on the 2005 CEC benchmark function set,” May 4, 2006 [Online]. Available: http://www.ntu.edu.sg/ home/epnsugan/index_files/CEC-05/compareresults.pdf [37] P. N. Suganthan, N. Hansen, J. J. Liang, K. Deb, Y.-P. Chen, A. Auger, and S. Tiwari, “Problem definitions and evaluation criteria for the CEC 2005 special session on real-parameter optimization,” Nanyang Technol. Univ., Singapore, Tech. Rep. KanGAL #2005005, May 2005, IIT Kanpur, India. [38] X. Yao, Y. Liu, and G. Lin, “Evolutionary programming made faster,” IEEE Trans. Evolut. Comput., vol. 3, no. 2, pp. 82–102, Jul. 1999. [39] Z. Y. Yang, E. K. Tang, and X. Yao:, “Large scale evolutionary optimization using cooperative coevolution,” Inf. Sci., accepted for publication. [40] S. Rahnamayan, H. R. Tizhoosh, and M. M. A. Salama, “Oppositionbased differential evolution,” IEEE Trans. Evolut. Comput., vol. 12, no. 1, pp. 64–79, Feb. 2008. [41] N. Noman and H. Iba, “Accelerating differential evolution using an adaptive local search,” IEEE Trans. Evolut. Comput., vol. 12, no. 1, pp. 107–125, Feb. 2008. [42] J. Brest, B. Boskovic, S. Greiner,V. Zumer, and M. S. Maucec, “Performance comparison of self-adaptive and adaptive differential evolution algorithms,” Soft Comput., vol. 11, no. 7, pp. 617–629, May 2007. A. K. Qin received his B.E. Degree from Department of Automatic Control Engineering of Southeast University, Nanjing, P.R. China in 2001. He completed his Ph.D. degree in the School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore in 2007. His research interests include pattern recognition, machine learning, neural network, genetic and evolutionary algorithms, computer vision and bioinformatics. V. L. Huang received the B. E. degree from Huazhong University of Sci. & Tech. Wuhan, P. R. China in 2002. She has been worked toward the Ph.D. degree in the School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore since 2004. Her research interests include evolutionary algorithms, differential evolution, and applications of evolutionary algorithms. P. N. Suganthan received the B.A degree, Postgraduate Certificate and M.A. degree in electrical and information engineering from the University of Cambridge, UK in 1990, 1992 and 1994, respectively. He obtained his Ph.D. degree from the School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore in 1996. He was a predoctoral Research Assistant in the Department of Electrical Engineering, University of Sydney in 1995–96 and a lecturer in the Department of Computer Science and Electrical Engineering, University of Queensland in 1996–99. Between 1999 and 2003, he was an Assistant Professor in the School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore where he is now an Associate Professor. He is an associate editor of the IEEE Transactions on Evolutionary Computation and Pattern Recognition Journal. His research interests include evolutionary computation, applications of evolutionary computation, neural networks, pattern recognition and bioinformatics. He is a senior member of the IEEE.","['ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'qin', 'huang', 'suganthan', 'abstract', 'differential', 'evolution', 'efficient', 'powerful', 'population', 'stochastic', 'search', 'technique', 'solving', 'optimization', 'problems', 'continuous', 'space', 'applied', 'many', 'scientific', 'engineering', 'fields', 'success', 'solving', 'specific', 'problem', 'depends', 'choosing', 'trial', 'vector', 'generation', 'strategies', 'associated', 'control', 'parameter', 'values', 'employing', 'trial', 'error', 'scheme', 'search', 'suitable', 'strategy', 'associated', 'parameter', 'settings', 'requires', 'high', 'computational', 'costs', 'moreover', 'different', 'stages', 'evolution', 'different', 'strategies', 'coupled', 'different', 'parameter', 'settings', 'required', 'order', 'achieve', 'best', 'performance', 'propose', 'self', 'adaptive', 'sade', 'algorithm', 'trial', 'vector', 'generation', 'strategies', 'associated', 'control', 'parameter', 'values', 'self', 'adapted', 'learning', 'previous', 'experiences', 'generating', 'promising', 'solutions', 'suitable', 'generation', 'strategy', 'parameter', 'settings', 'determined', 'match', 'different', 'phases', 'search', 'process', 'evolution', 'performance', 'sade', 'algorithm', 'evaluated', 'codes', 'available', 'suganthan', 'suite', 'bound', 'constrained', 'numerical', 'optimization', 'problems', 'compares', 'conventional', 'several', 'state', 'art', 'parameter', 'adaptive', 'variants', 'index', 'terms', 'differential', 'evolution', 'global', 'numerical', 'optimization', 'parameter', 'adaptation', 'self', 'adaptation', 'strategy', 'adaptation', 'introduction', 'evolutionary', 'algorithms', 'eas', 'inspired', 'natural', 'evolution', 'species', 'applied', 'solve', 'optimization', 'problems', 'diverse', 'fields', 'eas', 'need', 'determine', 'appropriate', 'encoding', 'schemes', 'evolutionary', 'operators', 'need', 'choose', 'suitable', 'parameter', 'settings', 'ensure', 'success', 'algorithm', 'lead', 'computational', 'costs', 'due', 'trial', 'error', 'parameter', 'operator', 'tuning', 'process', 'overcome', 'researchers', 'investigated', 'adaptation', 'parameters', 'operators', 'eas', 'different', 'parameter', 'manuscript', 'received', 'january', 'revised', 'july', 'published', 'september', 'current', 'version', 'published', 'april', 'supported', 'science', 'technology', 'research', 'singapore', 'grant', 'authors', 'school', 'electrical', 'electronic', 'engineering', 'nanyang', 'technological', 'university', 'singapore', 'singapore', 'mail', 'ntu', 'edu', 'ntu', 'edu', 'ntu', 'edu', 'versions', 'figures', 'available', 'online', 'http', 'ieee', 'org', 'digital', 'object', 'identifier', 'adaptation', 'methods', 'presented', 'summarized', 'types', 'parameter', 'updating', 'rules', 'adaptive', 'absolute', 'empirical', 'rules', 'absolute', 'updating', 'rules', 'parameter', 'modifications', 'made', 'empirical', 'updating', 'rules', 'adapt', 'parameters', 'according', 'competition', 'inherent', 'eas', 'literature', 'divided', 'parameter', 'adaptation', 'techniques', 'categories', 'deterministic', 'adaptive', 'self', 'adaptive', 'control', 'rules', 'deterministic', 'rules', 'modify', 'parameters', 'according', 'certain', 'feedback', 'search', 'process', 'adaptive', 'rules', 'incorporate', 'form', 'feedback', 'search', 'procedure', 'guide', 'parameter', 'adaptation', 'self', 'adaptive', 'rules', 'encode', 'parameters', 'individuals', 'evolve', 'encoded', 'solutions', 'parameter', 'values', 'involved', 'individuals', 'fitness', 'values', 'survive', 'feedback', 'search', 'process', 'speaking', 'self', 'adaptive', 'rules', 'refer', 'rules', 'feedback', 'search', 'process', 'fitness', 'values', 'guide', 'updating', 'parameters', 'differential', 'evolution', 'algorithm', 'storn', 'price', 'simple', 'powerful', 'population', 'stochastic', 'search', 'technique', 'efficient', 'effective', 'global', 'optimizer', 'continuous', 'search', 'domain', 'applied', 'diverse', 'fields', 'engineering', 'communication', 'pattern', 'recognition', 'exist', 'many', 'trial', 'vector', 'generation', 'strategies', 'suitable', 'solving', 'particular', 'problem', 'moreover', 'crucial', 'control', 'parameters', 'involved', 'population', 'size', 'scaling', 'factor', 'crossover', 'rate', 'influence', 'optimization', 'performance', 'solve', 'specific', 'optimization', 'problem', 'hand', 'required', 'perform', 'trial', 'error', 'search', 'appropriate', 'strategy', 'associated', 'parameter', 'values', 'trial', 'error', 'searching', 'process', 'requires', 'high', 'computational', 'costs', 'moreover', 'evolution', 'population', 'move', 'different', 'regions', 'search', 'space', 'certain', 'strategies', 'associated', 'specific', 'parameter', 'settings', 'effective', 'others', 'desirable', 'determine', 'appropriate', 'strategy', 'associated', 'parameter', 'values', 'different', 'stages', 'evolution', 'search', 'process', 'propose', 'self', 'adaptive', 'sade', 'algorithm', 'avoid', 'expensive', 'computational', 'costs', 'searching', 'appropriate', 'trial', 'vector', 'generation', 'strategy', 'associated', 'parameter', 'values', 'trial', 'error', 'procedure', 'strategies', 'associated', 'parameters', 'utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'self', 'adapted', 'learning', 'previous', 'experiences', 'generating', 'promising', 'solutions', 'suitable', 'generation', 'strategy', 'parameter', 'settings', 'determined', 'match', 'different', 'search', 'evolution', 'phases', 'generation', 'set', 'trial', 'vector', 'generation', 'strategies', 'associated', 'parameter', 'values', 'assigned', 'different', 'individuals', 'current', 'population', 'according', 'selection', 'probabilities', 'learned', 'previous', 'generations', 'remainder', 'organized', 'follows', 'conventional', 'related', 'reviewed', 'sections', 'iii', 'section', 'describes', 'sade', 'experimental', 'results', 'performance', 'sade', 'comparison', 'conventional', 'several', 'state', 'art', 'adaptive', 'variants', 'suite', 'bound', 'constrained', 'numerical', 'optimization', 'problems', 'presented', 'section', 'section', 'algorithm', 'algorithm', 'evolving', 'population', 'dimensional', 'parameter', 'vectors', 'called', 'individuals', 'encode', 'candidate', 'solutions', 'towards', 'global', 'optimum', 'initial', 'population', 'cover', 'entire', 'search', 'space', 'much', 'possible', 'individuals', 'search', 'space', 'constrained', 'minimum', 'maximum', 'parameter', 'bounds', 'example', 'initial', 'value', 'parameter', 'individual', 'generation', 'generated', 'represents', 'distributed', 'random', 'variable', 'range', 'mutation', 'operation', 'initialization', 'employs', 'mutation', 'operation', 'produce', 'mutant', 'vector', 'respect', 'individual', 'called', 'target', 'vector', 'current', 'population', 'target', 'vector', 'generation', 'associated', 'mutant', 'vector', 'generated', 'certain', 'mutation', 'strategy', 'example', 'used', 'mutation', 'strategies', 'implemented', 'listed', 'follows', 'rand', 'best', 'rand', 'best', 'available', 'online', 'http', 'www', 'icsi', 'berkeley', 'edu', 'storn', 'code', 'html', 'best', 'rand', 'indices', 'exclusive', 'integers', 'generated', 'range', 'different', 'index', 'indices', 'generated', 'mutant', 'vector', 'scaling', 'factor', 'positive', 'control', 'parameter', 'scaling', 'difference', 'vector', 'best', 'individual', 'vector', 'best', 'fitness', 'value', 'population', 'generation', 'crossover', 'operation', 'mutation', 'phase', 'crossover', 'operation', 'applied', 'pair', 'target', 'vector', 'corresponding', 'mutant', 'vector', 'generate', 'trial', 'vector', 'basic', 'version', 'employs', 'binomial', 'uniform', 'crossover', 'defined', 'follows', 'crossover', 'rate', 'user', 'specified', 'constant', 'range', 'controls', 'fraction', 'parameter', 'values', 'mutant', 'vector', 'chosen', 'integer', 'range', 'binomial', 'crossover', 'operator', 'parameter', 'mutant', 'vector', 'corresponding', 'element', 'trial', 'vector', 'corresponding', 'target', 'vector', 'exists', 'exponential', 'crossover', 'operator', 'parameters', 'trial', 'vector', 'inherited', 'corresponding', 'mutant', 'vector', 'starting', 'chosen', 'parameter', 'index', 'remaining', 'parameters', 'trial', 'vector', 'corresponding', 'target', 'vector', 'condition', 'introduced', 'ensure', 'trial', 'vector', 'differ', 'corresponding', 'target', 'vector', 'least', 'parameter', 'exponential', 'crossover', 'operator', 'equivalent', 'point', 'crossover', 'operator', 'selection', 'operation', 'values', 'parameters', 'generated', 'trial', 'vector', 'corresponding', 'upper', 'lower', 'bounds', 'prespecified', 'range', 'objective', 'function', 'values', 'trial', 'vectors', 'evaluated', 'selection', 'operation', 'performed', 'objective', 'function', 'value', 'trial', 'vector', 'compared', 'corresponding', 'target', 'vector', 'current', 'population', 'trial', 'vector', 'equal', 'objective', 'function', 'value', 'corresponding', 'target', 'vector', 'trial', 'vector', 'replace', 'target', 'vector', 'enter', 'population', 'next', 'generation', 'target', 'vector', 'remain', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'table', 'description', 'population', 'next', 'generation', 'selection', 'operation', 'expressed', 'follows', 'steps', 'repeated', 'generation', 'generation', 'specific', 'termination', 'criteria', 'satisfied', 'description', 'summarized', 'table', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'iii', 'previous', 'related', 'performance', 'conventional', 'algorithm', 'depends', 'chosen', 'trial', 'vector', 'generation', 'strategy', 'associated', 'parameter', 'values', 'used', 'choice', 'strategies', 'parameters', 'lead', 'premature', 'convergence', 'stagnation', 'demonstrated', 'past', 'decade', 'researchers', 'suggested', 'many', 'empirical', 'guidelines', 'choosing', 'trial', 'vector', 'generation', 'strategies', 'associated', 'control', 'parameter', 'settings', 'storn', 'price', 'suggested', 'reasonable', 'value', 'initial', 'choice', 'effective', 'range', 'values', 'suggested', 'reasonable', 'attempt', 'choosing', 'value', 'large', 'value', 'speed', 'convergence', 'value', 'initial', 'choice', 'problem', 'unimodal', 'fast', 'convergence', 'desired', 'moreover', 'population', 'converges', 'increased', 'recommended', 'trial', 'vector', 'generation', 'strategy', 'current', 'rand', 'parameter', 'setting', 'converges', 'increase', 'value', 'decrease', 'value', 'population', 'increase', 'value', 'choose', 'range', 'none', 'works', 'strategy', 'rand_bin', 'small', 'value', 'different', 'parameter', 'settings', 'rosenbrock', 'rastrigin', 'functions', 'experimental', 'results', 'showed', 'searching', 'capability', 'convergence', 'speed', 'sensitive', 'choice', 'control', 'parameters', 'recommended', 'population', 'size', 'scaling', 'factor', 'equal', 'crossover', 'rate', 'suggested', 'values', 'initial', 'choice', 'values', 'lie', 'function', 'separable', 'function', 'parameters', 'dependent', 'solving', 'real', 'engineering', 'problem', 'characteristics', 'problem', 'difficult', 'choose', 'appropriate', 'value', 'various', 'conflicting', 'conclusions', 'drawn', 'rules', 'choosing', 'strategy', 'control', 'parameters', 'solve', 'scientific', 'engineering', 'problems', 'fact', 'conclusions', 'lack', 'sufficient', 'restricted', 'problems', 'strategies', 'parameter', 'values', 'considered', 'researchers', 'developed', 'techniques', 'avoid', 'tuning', 'control', 'parameters', 'example', 'das', 'reduced', 'scaling', 'factor', 'increasing', 'generation', 'count', 'maximum', 'minimum', 'value', 'range', 'employed', 'uniform', 'distribution', 'mean', 'value', 'obtain', 'hybrid', 'variant', 'addition', 'several', 'researchers', 'focused', 'adaptation', 'control', 'parameters', 'liu', 'lampinen', 'introduced', 'fuzzy', 'adaptive', 'differential', 'evolution', 'fade', 'fuzzy', 'logic', 'controllers', 'inputs', 'incorporate', 'relative', 'function', 'values', 'individuals', 'successive', 'generations', 'adapt', 'parameters', 'mutation', 'crossover', 'operations', 'experimental', 'results', 'test', 'functions', 'fade', 'algorithm', 'outperformed', 'conventional', 'higher', 'dimensional', 'problems', 'zaharie', 'parameter', 'adaptation', 'ade', 'idea', 'controlling', 'population', 'diversity', 'implemented', 'approach', 'following', 'ideas', 'zaharie', 'designed', 'adaptive', 'pareto', 'algorithm', 'multiobjective', 'optimization', 'analyzed', 'parallel', 'implementation', 'abbass', 'self', 'adapted', 'crossover', 'rate', 'multiobjective', 'optimization', 'problems', 'encoding', 'crossover', 'rate', 'individual', 'evolve', 'parameter', 'scaling', 'factor', 'generated', 'variable', 'gaussian', 'distribution', 'preliminary', 'self', 'adaptive', 'presented', 'research', 'papers', 'adaptation', 'control', 'parameters', 'published', 'omran', 'introduced', 'self', 'adapted', 'scaling', 'factor', 'parameter', 'adaptation', 'crossover', 'rate', 'crossover', 'rate', 'generated', 'individual', 'normal', 'distribution', 'approach', 'called', 'sde', 'tested', 'benchmark', 'functions', 'performed', 'versions', 'adapting', 'control', 'parameters', 'teo', 'differential', 'evolution', 'self', 'adapting', 'populations', 'abbass', 'self', 'adaptive', 'pareto', 'brest', 'encoded', 'control', 'parameters', 'individuals', 'adjusted', 'introducing', 'parameters', 'algorithm', 'called', 'jde', 'set', 'values', 'assigned', 'individuals', 'population', 'random', 'number', 'rand', 'generated', 'range', 'random', 'value', 'range', 'kept', 'adapted', 'manner', 'different', 'range', 'brest', 'compared', 'performance', 'several', 'self', 'adaptive', 'adaptive', 'algorithms', 'self', 'adaptive', 'neighborhood', 'search', 'algorithm', 'adopted', 'novel', 'cooperative', 'coevolution', 'framework', 'moreover', 'researchers', 'improved', 'performance', 'opposition', 'learning', 'local', 'search', 'sade', 'algorithm', 'achieve', 'satisfactory', 'optimization', 'performance', 'applying', 'conventional', 'given', 'problem', 'common', 'perform', 'trial', 'error', 'search', 'appropriate', 'trial', 'vector', 'generation', 'strategy', 'fine', 'associated', 'control', 'parameter', 'values', 'values', 'huge', 'amount', 'computational', 'costs', 'moreover', 'different', 'stages', 'evolution', 'different', 'trial', 'vector', 'generation', 'strategies', 'coupled', 'specific', 'control', 'parameter', 'values', 'effective', 'others', 'observations', 'sade', 'algorithm', 'trial', 'vector', 'generation', 'strategies', 'associated', 'control', 'parameter', 'values', 'self', 'adapted', 'according', 'previous', 'experiences', 'generating', 'promising', 'solutions', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'idea', 'sade', 'algorithm', 'follows', 'trial', 'vector', 'generation', 'strategy', 'adaptation', 'employing', 'different', 'trial', 'vector', 'generation', 'strategies', 'performs', 'solving', 'different', 'optimization', 'problems', 'employing', 'expensive', 'trial', 'error', 'search', 'suitable', 'strategy', 'associated', 'parameter', 'values', 'maintain', 'strategy', 'candidate', 'pool', 'including', 'several', 'effective', 'trial', 'vector', 'generation', 'strategies', 'effective', 'diverse', 'characteristics', 'evolution', 'respect', 'target', 'vector', 'current', 'population', 'strategy', 'chosen', 'candidate', 'pool', 'according', 'probability', 'learned', 'previous', 'experience', 'generating', 'promising', 'solutions', 'applied', 'perform', 'mutation', 'operation', 'strategy', 'previous', 'generations', 'generate', 'promising', 'solutions', 'chosen', 'current', 'generation', 'generate', 'solutions', 'following', 'investigate', 'several', 'effective', 'trial', 'vector', 'generation', 'strategies', 'referred', 'choose', 'strategy', 'candidate', 'pool', 'strategies', 'relying', 'best', 'solution', 'found', 'rand', 'best', 'bin', 'best', 'bin', 'best', 'bin', 'fast', 'convergence', 'speed', 'perform', 'solving', 'unimodal', 'problems', 'likely', 'stuck', 'local', 'optimum', 'lead', 'premature', 'convergence', 'solving', 'multimodal', 'problems', 'rand_bin', 'strategy', 'demonstrates', 'slow', 'convergence', 'speed', 'exploration', 'capability', 'suitable', 'solving', 'multimodal', 'problems', 'strategies', 'relying', 'best', 'solution', 'found', 'best', 'bin', 'strategy', 'degenerated', 'case', 'rand', 'best', 'bin', 'strategy', 'equal', 'difference', 'vectors', 'strategies', 'result', 'perturbation', 'difference', 'vector', 'strategies', 'storn', 'according', 'limit', 'theorem', 'random', 'variation', 'summation', 'difference', 'vectors', 'target', 'vector', 'current', 'population', 'shifted', 'towards', 'gaussian', 'direction', 'used', 'mutation', 'operator', 'eas', 'advantage', 'difference', 'vectors', 'strategies', 'discussed', 'particle_swarm', 'optimization', 'pso', 'context', 'demonstrated', 'statistical', 'distribution', 'summation', 'difference', 'vectors', 'shape', 'statistical', 'distribution', 'summation', 'difference', 'vectors', 'shape', 'regarded', 'perturbation', 'mode', 'current', 'rand', 'rotation', 'invariant', 'strategy', 'effectiveness', 'applied', 'solve', 'multiobjective', 'optimization', 'problems', 'preliminary', 'study', 'included', 'trial', 'vector', 'generation', 'strategies', 'strategy', 'candidate', 'pool', 'rand_bin', 'rand', 'best', 'bin', 'employed', 'many', 'incorporate', 'additional', 'strategies', 'rand_bin', 'current', 'rand', 'pool', 'former', 'strategy', 'exploration', 'capability', 'due', 'gaussian', 'perturbation', 'latter', 'enables', 'algorithm', 'solve', 'rotated', 'problems', 'trial', 'vector', 'generation', 'strategies', 'strategy', 'candidate', 'pool', 'sade', 'algorithm', 'listed', 'follows', 'binomial', 'type', 'crossover', 'operator', 'strategies', 'due', 'popularity', 'many', 'shown', 'equation', 'bottom', 'page', 'speaking', 'candidate', 'pool', 'influences', 'effective', 'strategies', 'moreover', 'set', 'effective', 'strategies', 'contained', 'candidate', 'pool', 'diverse', 'characteristics', 'used', 'strategies', 'demonstrate', 'distinct', 'capabilities', 'specific', 'problem', 'different', 'stages', 'evolution', 'theoretical', 'study', 'choice', 'optimal', 'pool', 'size', 'selection', 'strategies', 'used', 'pool', 'attractive', 'research', 'issues', 'sade', 'algorithm', 'respect', 'target', 'vector', 'current', 'population', 'trial', 'vector', 'generation', 'strategy', 'selected', 'candidate', 'pool', 'according', 'probability', 'learned', 'success', 'rate', 'generating', 'improved', 'solutions', 'certain', 'number', 'previous', 'generations', 'selected', 'strategy', 'applied', 'corresponding', 'target', 'vector', 'generate', 'trial', 'vector', 'generation', 'probabilities', 'choosing', 'strategy', 'candidate', 'pool', 'summed', 'probabilities', 'rand_bin', 'rand', 'best', 'bin', 'rand_bin', 'current', 'rand', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'fig', 'success', 'memory', 'failure', 'memory', 'adapted', 'evolution', 'following', 'manner', 'assume', 'probability', 'applying', 'strategy', 'candidate', 'pool', 'target', 'vector', 'current', 'population', 'total', 'number', 'strategies', 'contained', 'pool', 'probabilities', 'respect', 'strategy', 'initialized', 'strategies', 'equal', 'probability', 'chosen', 'stochastic', 'selection', 'method', 'select', 'trial', 'vector', 'generation', 'strategy', 'target', 'vector', 'current', 'population', 'generation', 'evaluating', 'generated', 'trial', 'vectors', 'number', 'trial', 'vectors', 'generated', 'strategy', 'enter', 'next', 'generation', 'number', 'trial', 'vectors', 'generated', 'strategy', 'discarded', 'next', 'generation', 'introduce', 'success', 'failure', 'memories', 'store', 'numbers', 'fixed', 'number', 'previous', 'generations', 'named', 'learning', 'period', 'illustrated', 'fig', 'generation', 'number', 'trial', 'vectors', 'generated', 'different', 'strategies', 'enter', 'fail', 'enter', 'next', 'generation', 'previous', 'generations', 'stored', 'different', 'success', 'failure', 'memories', 'memories', 'generations', 'stored', 'memories', 'removed', 'numbers', 'calculated', 'current', 'generation', 'stored', 'memories', 'shown', 'fig', 'initial', 'generations', 'probabilities', 'choosing', 'different', 'strategies', 'updated', 'subsequent', 'generation', 'success', 'failure', 'memories', 'example', 'generation', 'probability', 'choosing', 'strategy', 'updated', 'represents', 'success', 'rate', 'trial', 'vectors', 'generated', 'strategy', 'entering', 'next', 'generation', 'previous', 'generations', 'respect', 'generation', 'small', 'constant', 'value', 'used', 'avoid', 'possible', 'success', 'rates', 'ensure', 'probabilities', 'choosing', 'strategies', 'summed', 'calculate', 'larger', 'success', 'rate', 'strategy', 'previous', 'generations', 'larger', 'probability', 'applying', 'generate', 'trial', 'vectors', 'current', 'generation', 'parameter', 'adaptation', 'conventional', 'choice', 'numerical', 'values', 'control', 'parameters', 'depends', 'problem', 'empirical', 'guidelines', 'choosing', 'reasonable', 'parameter', 'settings', 'discussed', 'section', 'iii', 'sade', 'algorithm', 'user', 'specified', 'parameter', 'complexity', 'given', 'problem', 'fact', 'population', 'size', 'need', 'fine', 'tuned', 'typical', 'values', 'tried', 'according', 'complexity', 'given', 'problem', 'parameters', 'sensitive', 'problems', 'different', 'characteristics', 'related', 'convergence', 'speed', 'sade', 'algorithm', 'parameter', 'normal', 'distribution', 'mean', 'value', 'standard', 'deviation', 'denoted', 'set', 'values', 'sampled', 'normal', 'distribution', 'applied', 'target', 'vector', 'current', 'population', 'easy', 'values', 'fall', 'range', 'probability', 'attempt', 'maintain', 'exploitation', 'small', 'values', 'exploration', 'large', 'values', 'power', 'entire', 'evolution', 'process', 'following', 'control', 'parameter', 'strategy', 'current', 'rand', 'generated', 'eliminate', 'additional', 'parameter', 'demonstrated', 'suite', 'extensive', 'experiments', 'proper', 'choice', 'lead', 'successful', 'optimization', 'performance', 'choice', 'performance', 'fact', 'values', 'fall', 'small', 'range', 'given', 'problem', 'algorithm', 'perform', 'consider', 'range', 'values', 'given', 'problem', 'according', 'previous', 'values', 'generated', 'trial', 'vectors', 'entering', 'next', 'generation', 'assume', 'normal', 'distribution', 'mean', 'value', 'standard', 'deviation', 'denoted', 'initialized', 'set', 'small', 'value', 'guarantee', 'values', 'generated', 'hence', 'value', 'set', 'experiments', 'showed', 'changes', 'gaussian', 'distribution', 'influence', 'performance', 'sade', 'preliminary', 'value', 'used', 'trial', 'vector', 'generation', 'strategies', 'possible', 'different', 'strategies', 'perform', 'different', 'ranges', 'values', 'hence', 'reasonable', 'adapt', 'value', 'crm', 'respect', 'trial', 'vector', 'generation', 'strategy', 'loss', 'generality', 'respect', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fig', 'progress', 'success', 'memory', 'strategy', 'value', 'initialized', 'set', 'values', 'generated', 'according', 'applied', 'target', 'vectors', 'strategy', 'assigned', 'adapt', 'crossover', 'rate', 'memories', 'named', 'store', 'values', 'respect', 'strategy', 'generated', 'trial', 'vectors', 'entering', 'next', 'generation', 'previous', 'generations', 'generations', 'values', 'respect', 'strategy', 'generated', 'generation', 'generations', 'median', 'value', 'stored', 'calculated', 'values', 'generated', 'according', 'applying', 'strategy', 'evaluating', 'generated', 'trial', 'vectors', 'values', 'generations', 'replaced', 'promising', 'values', 'obtained', 'current', 'generation', 'respect', 'strategy', 'incorporating', 'trial', 'vector', 'generation', 'strategy', 'control', 'parameter', 'adaptation', 'schemes', 'conventional', 'framework', 'sade', 'algorithm', 'developed', 'sade', 'algorithm', 'trial', 'vector', 'generation', 'strategies', 'associated', 'parameter', 'values', 'self', 'adapted', 'learning', 'previous', 'experiences', 'generating', 'promising', 'solutions', 'suitable', 'strategy', 'parameter', 'setting', 'determined', 'different', 'phases', 'search', 'process', 'extensive', 'experiments', 'described', 'section', 'promising', 'performance', 'sade', 'handle', 'problems', 'distinct', 'properties', 'description', 'sade', 'presented', 'table', 'numerical', 'experiments', 'results', 'test', 'functions', 'discussed', 'many', 'benchmark', 'numerical', 'functions', 'used', 'evaluate', 'compare', 'optimization', 'algorithms', 'problems', 'global', 'optimum', 'lies', 'center', 'search', 'range', 'second', 'local', 'optima', 'lie', 'coordinate', 'axes', 'linkage', 'variables', 'dimensions', 'exists', 'solve', 'problems', 'conventional', 'benchmark', 'functions', 'benchmark', 'functions', 'problem', 'global', 'optimum', 'random', 'position', 'global', 'optimum', 'position', 'different', 'numerical', 'values', 'different', 'dimensions', 'function', 'function', 'global', 'optimum', 'global', 'optimum', 'different', 'values', 'different', 'dimensions', 'lying', 'center', 'search', 'range', 'second', 'problem', 'function', 'table', 'description', 'sade', 'rotation', 'matrix', 'avoid', 'local', 'optima', 'lying', 'coordinate', 'axes', 'properties', 'test', 'function', 'used', 'benchmark', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'functions', 'composition', 'functions', 'chosen', 'basic', 'benchmark', 'functions', 'obtain', 'problems', 'gaussian', 'function', 'used', 'combine', 'simple', 'benchmark', 'functions', 'functions', 'structures', 'composition', 'functions', 'multimodal', 'problems', 'different', 'properties', 'different', 'areas', 'detailed', 'principle', 'class', 'functions', 'presented', 'repeated', 'following', 'test', 'functions', 'listed', 'functions', 'unimodal', 'functions', 'multimodal', 'test', 'functions', 'scalable', 'shifted', 'function', 'shifted', 'global', 'optimum', 'shifted', 'schwefel', 'problem', 'shifted', 'global', 'optimum', 'rosenbrock', 'function', 'shifted', 'schwefel', 'problem', 'noise', 'fitness', 'shifted', 'global', 'optimum', 'shifted', 'ackley', 'function', 'shifted', 'global', 'optimum', 'shifted', 'rotated', 'ackley', 'shifted', 'global', 'optimum', 'shifted', 'griewank', 'function', 'shifted', 'global', 'optimum', 'shifted', 'rotated', 'griewank', 'function', 'shifted', 'global', 'optimum', 'shifted', 'rastrigin', 'function', 'shifted', 'global', 'optimum', 'shifted', 'rotated', 'rastrigin', 'function', 'shifted', 'global', 'optimum', 'shifted', 'rastrigin', 'function', 'shifted', 'global', 'optimum', 'means', 'condition', 'number', 'rotation', 'matrix', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'table', 'iii', 'global', 'optimum', 'search', 'ranges', 'initialization', 'ranges', 'test', 'functions', 'schwefel', 'function', 'composition', 'function', 'function', 'composed', 'ten', 'functions', 'global', 'optimum', 'easy', 'find', 'global', 'basin', 'found', 'details', 'functions', 'presented', 'composition', 'function', 'function', 'composed', 'ten', 'different', 'benchmark', 'functions', 'rotated', 'rastrigin', 'functions', 'rotated', 'functions', 'rotated', 'griewank', 'functions', 'rotated', 'ackley', 'functions', 'rotated', 'functions', 'test', 'suite', 'comprehensive', 'additional', 'set', 'test', 'functions', 'schwefel', 'problem', 'schwefel', 'problem', 'generalized', 'function', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'generalized', 'function', 'function', 'function', 'function', 'function', 'function', 'family', 'algorithms', 'comparison', 'experiments', 'conducted', 'suite', 'numerical', 'functions', 'evaluate', 'algorithms', 'including', 'sade', 'algorithm', 'functions', 'dimensional', 'dimensional', 'functions', 'tested', 'maximum', 'number', 'function', 'evaluations', 'fes', 'set', 'solving', 'problems', 'solving', 'remaining', 'functions', 'function', 'dimensions', 'listed', 'table', 'iii', 'maximum', 'number', 'fes', 'set', 'experiments', 'run', 'times', 'algorithms', 'comparison', 'listed', 'follows', 'rand_bin', 'rand_bin', 'rand_bin', 'rand', 'best', 'bin', 'rand', 'best', 'bin', 'sade', 'algorithm', 'adaptive', 'algorithm', 'sde', 'algorithm', 'jde', 'rand_bin', 'chosen', 'employs', 'used', 'trial', 'vector', 'generation', 'strategy', 'suggested', 'sets', 'control', 'parameters', 'rand', 'best', 'bin', 'rand', 'best', 'bin', 'trial', 'vector', 'generation', 'strategies', 'control', 'parameters', 'set', 'experiments', 'choose', 'representative', 'adaptive', 'variants', 'compare', 'sade', 'algorithm', 'population', 'sizes', 'set', 'learning', 'functions', 'experimental', 'results', 'tables', 'report', 'mean', 'standard', 'deviation', 'function', 'values', 'success', 'rates', 'applying', 'algorithms', 'optimize', 'numerical', 'functions', 'best', 'results', 'success', 'algorithm', 'means', 'algorithm', 'result', 'function', 'value', 'worse', 'prespecified', 'optimal', 'value', 'problems', 'number', 'fes', 'prespecified', 'maximum', 'number', 'success', 'rate', 'calculated', 'number', 'successful', 'runs', 'divided', 'total', 'number', 'runs', 'figs', 'convergence', 'characteristics', 'terms', 'best', 'fitness', 'value', 'median', 'run', 'algorithm', 'functions', 'convergence', 'graphs', 'problems', 'similar', 'functions', 'algorithms', 'locate', 'global', 'optima', 'success', 'rate', 'specified', 'maximum', 'fes', 'present', 'mean', 'standard', 'deviation', 'function', 'values', 'compare', 'convergence', 'speed', 'report', 'average', 'number', 'function', 'evaluations', 'required', 'find', 'global', 'optima', 'algorithm', 'solves', 'problem', 'success', 'rate', 'comparing', 'sade', 'conventional', 'section', 'show', 'sade', 'algorithm', 'performs', 'compared', 'conventional', 'tables', 'show', 'optimized', 'variants', 'sade', 'algorithm', 'success', 'rate', 'functions', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'table', 'results', 'problems', 'performances', 'rand', 'rand', 'contrary', 'example', 'rand_bin', 'obtains', 'results', 'unimodal', 'functions', 'rand_bin', 'performs', 'contrary', 'rand_bin', 'performs', 'multimodal', 'functions', 'rand_bin', 'table', 'results', 'problems', 'success', 'rate', 'different', 'values', 'rand_bin', 'demonstrate', 'diverse', 'performances', 'different', 'problems', 'rand', 'best', 'bin', 'rand', 'best', 'bin', 'rand_bin', 'fail', 'optimizing', 'problems', 'sade', 'locate', 'global', 'optima', 'run', 'overall', 'sade', 'obtains', 'smaller', 'mean', 'value', 'higher', 'success', 'rate', 'variants', 'problems', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'fig', 'median', 'convergence', 'characteristics', 'rand', 'rand', 'rand', 'rand', 'best', 'rand', 'best', 'sade', 'test', 'functions', 'schwefel', 'rosenbrock', 'schwefel', 'problem', 'noise', 'fitness', 'ackley', 'rotated', 'ackley', 'griewank', 'rotated', 'griewank', 'rastrigin', 'rotated', 'rastrigin', 'rastrigin', 'schwefel', 'composition', 'function', 'composition', 'function', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fig', 'median', 'convergence', 'characteristics', 'sade', 'ade', 'zaharie', 'sde', 'jde', 'test', 'functions', 'schwefel', 'rosenbrock', 'schwefel', 'problem', 'noise', 'fitness', 'ackley', 'rotated', 'ackley', 'griewank', 'rotated', 'griewank', 'rastrigin', 'rotated', 'rastrigin', 'rastrigin', 'schwefel', 'composition', 'function', 'composition', 'function', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'table', 'comparison', 'sade', 'convergence', 'map', 'rand_bin', 'rand_bin', 'rand_bin', 'rand', 'best', 'bin', 'rand', 'best', 'bin', 'sade', 'fig', 'shows', 'sade', 'algorithm', 'converges', 'faster', 'others', 'problems', 'rand', 'best', 'bin', 'rand_bin', 'remaining', 'problems', 'observed', 'rand_bin', 'rand', 'best', 'bin', 'rand_bin', 'converge', 'fast', 'followed', 'sade', 'small', 'value', 'effective', 'value', 'optimize', 'rastrigin', 'problem', 'sade', 'initial', 'needs', 'generations', 'self', 'adapt', 'parameters', 'suitable', 'values', 'issue', 'discussed', 'section', 'problems', 'rand_bin', 'difficulty', 'finding', 'global', 'optima', 'problems', 'rand_bin', 'yields', 'success', 'rate', 'sade', 'algorithm', 'performs', 'much', 'success', 'rates', 'problems', 'variants', 'fail', 'finding', 'global', 'optima', 'dimension', 'variable', 'increased', 'problems', 'functions', 'become', 'difficult', 'approaches', 'find', 'optimal', 'solutions', 'maximum', 'fes', 'regarding', 'speed', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fig', 'empirical', 'distribution', 'normalized', 'success', 'performance', 'test', 'problems', 'different', 'algorithms', 'optimal', 'solutions', 'compare', 'problems', 'success', 'rate', 'table', 'find', 'sade', 'converges', 'algorithms', 'problems', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'table', 'vii', 'results', 'sade', 'fade', 'algorithms', 'table', 'viii', 'sade', 'results', 'different', 'learning', 'period', 'test', 'functions', 'test', 'problems', 'sade', 'rand_bin', 'solve', 'problems', 'run', 'sade', 'shows', 'overall', 'convergence', 'speed', 'rand_bin', 'comparing', 'sade', 'adaptive', 'variants', 'performance', 'sade', 'compared', 'adaptive', 'variants', 'ade', 'sde', 'jde', 'problems', 'problems', 'best', 'results', 'unimodal', 'functions', 'obtained', 'sade', 'jde', 'sade', 'demonstrates', 'efficiency', 'observed', 'convergence', 'graphs', 'fig', 'multimodal', 'functions', 'ackley', 'rotated', 'ackley', 'solved', 'adaptive', 'variants', 'success', 'rate', 'griewank', 'rastrigin', 'rotation', 'sade', 'ade', 'jde', 'high', 'success', 'rates', 'shown', 'table', 'rotation', 'sade', 'jde', 'find', 'global', 'optimum', 'run', 'sade', 'offers', 'higher', 'success', 'rate', 'jde', 'difficult', 'algorithm', 'find', 'global', 'optimum', 'last', 'composition', 'problems', 'sade', 'able', 'locate', 'optimal', 'solutions', 'smaller', 'standard', 'deviations', 'higher', 'success', 'rates', 'efficiency', 'stability', 'algorithms', 'results', 'problems', 'shown', 'table', 'observe', 'algorithms', 'achieved', 'similar', 'ranking', 'problems', 'successful', 'optimizing', 'respect', 'mean', 'standard', 'deviations', 'sade', 'obtains', 'smallest', 'values', 'second', 'smallest', 'values', 'jde', 'gets', 'smallest', 'values', 'overall', 'performance', 'comparison', 'part', 'compare', 'overall', 'performances', 'algorithms', 'functions', 'empirical', 'distribution', 'normalized', 'success', 'performance', 'success', 'performance', 'defined', 'success', 'performance', 'mean', 'fes', 'successful', 'runs', 'total', 'runs', 'successful', 'runs', 'calculated', 'success', 'performance', 'algorithms', 'test', 'function', 'normalized', 'best', 'algorithm', 'function', 'results', 'functions', 'used', 'least', 'algorithm', 'successful', 'least', 'run', 'problems', 'plot', 'results', 'functions', 'functions', 'problems', 'test', 'problems', 'plotted', 'small', 'values', 'large', 'values', 'empirical', 'distribution', 'graphs', 'top', 'graph', 'regarded', 'best', 'algorithm', 'fig', 'observe', 'sade', 'outperforms', 'approaches', 'overall', 'performance', 'test', 'problems', 'fade', 'fade', 'algorithm', 'tested', 'set', 'standard', 'test', 'functions', 'including', 'dimensions', 'low', 'dimensional', 'test', 'functions', 'easy', 'solve', 'conventional', 'fade', 'compare', 'sade', 'fade', 'algorithm', 'test', 'functions', 'chosen', 'parameter', 'settings', 'population', 'size', 'maximum', 'generations', 'listed', 'table', 'vii', 'averaged', 'results', 'independent', 'runs', 'summarized', 'table', 'results', 'fade', 'taken', 'show', 'sade', 'algorithm', 'performs', 'fade', 'algorithm', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'fig', 'self', 'adaptation', 'characteristics', 'rosenbrock', 'rastrigin', 'functions', 'rosenbrock', 'function', 'rastrigin', 'function', 'analysis', 'self', 'adaptation', 'property', 'sade', 'self', 'adaptation', 'crossover', 'probability', 'solves', 'problems', 'specific', 'value', 'effective', 'search', 'phases', 'several', 'combinations', 'different', 'values', 'effective', 'different', 'search', 'phases', 'rosenbrock', 'rastrigin', 'function', 'experiments', 'rand_bin', 'functions', 'rand_bin', 'large', 'obtain', 'result', 'rosenbrock', 'function', 'small', 'rastrigin', 'function', 'comparing', 'results', 'rand_bin', 'suitable', 'values', 'rosenbrock', 'rastrigin', 'functions', 'observe', 'variation', 'values', 'sade', 'algorithm', 'check', 'self', 'adaptation', 'effective', 'value', 'sade', 'mean', 'value', 'normal', 'distribution', 'plot', 'value', 'fig', 'self', 'adaptation', 'characteristics', 'strategies', 'griewank', 'rotated', 'griewank', 'sade', 'algorithm', 'optimized', 'rosenbrock', 'rastrigin', 'functions', 'generation', 'increases', 'fig', 'found', 'rosenbrock', 'function', 'crm', 'values', 'strategy', 'rand_bin', 'rand', 'best', 'bin', 'rand_bin', 'keep', 'increasing', 'evolution', 'expected', 'contrary', 'rastrigin', 'function', 'values', 'strategies', 'keep', 'evolution', 'sade', 'algorithm', 'self', 'crossover', 'probability', 'self', 'adaptation', 'trial', 'vector', 'generation', 'strategy', 'investigate', 'self', 'adaptive', 'selection', 'trial', 'vector', 'generation', 'strategy', 'sade', 'algorithm', 'plot', 'variations', 'different', 'strategies', 'probabilities', 'evolution', 'strategy', 'current', 'rand', 'invariant', 'superior', 'performance', 'rotated', 'problem', 'stated', 'section', 'strategy', 'occupy', 'proportion', 'yields', 'results', 'rotated', 'problems', 'shown', 'fig', 'griewank', 'function', 'strategy', 'current', 'rand', 'small', 'proportion', 'whole', 'evolution', 'progress', 'beginning', 'assign', 'strategy', 'equal', 'probability', 'strategy', 'current', 'rand', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'fig', 'sade', 'results', 'different', 'learning', 'period', 'test', 'functions', 'yield', 'results', 'self', 'adaptive', 'mechanism', 'learning', 'choose', 'strategy', 'current', 'rand', 'next', 'generations', 'strategy', 'performed', 'proportion', 'individuals', 'mutated', 'strategies', 'occupy', 'shown', 'fig', 'generations', 'algorithm', 'converged', 'strategies', 'performed', 'occupy', 'proportion', 'contrary', 'rotated', 'griewank', 'function', 'strategy', 'current', 'rand', 'demonstrated', 'performance', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'april', 'occupy', 'higher', 'proportion', 'generations', 'generations', 'proportion', 'strategy', 'current', 'rand', 'inferior', 'solutions', 'found', 'strategy', 'stage', 'evolution', 'generations', 'strategy', 'current', 'higher', 'proportion', 'algorithm', 'converged', 'strategies', 'parameter', 'study', 'learning', 'period', 'learning', 'period', 'parameter', 'needs', 'optimized', 'section', 'test', 'functions', 'investigate', 'impact', 'parameter', 'sade', 'algorithm', 'sade', 'algorithm', 'runs', 'times', 'function', 'different', 'learning', 'functions', 'solved', 'success', 'rate', 'different', 'values', 'results', 'mean', 'standard', 'deviation', 'functions', 'results', 'shown', 'table', 'viii', 'functions', 'investigate', 'influence', 'convergence', 'speed', 'sade', 'algorithm', 'comparing', 'fes', 'sade', 'algorithm', 'cost', 'obtain', 'global', 'optimum', 'different', 'fig', 'shows', 'box', 'plots', 'fes', 'sade', 'algorithm', 'requires', 'reach', 'global', 'optimum', 'different', 'box', 'lines', 'lower', 'median', 'upper', 'values', 'lines', 'extending', 'end', 'box', 'show', 'extent', 'remaining', 'data', 'data', 'values', 'ends', 'data', 'bottom', 'fig', 'found', 'sade', 'algorithm', 'functions', 'similar', 'fes', 'different', 'convergence', 'speed', 'sade', 'algorithm', 'sensitive', 'parameter', 'parameter', 'values', 'conclusion', 'presented', 'sade', 'algorithm', 'search', 'suitable', 'trial', 'vector', 'generation', 'strategy', 'associated', 'control', 'parameters', 'sade', 'trial', 'vector', 'generation', 'strategies', 'control', 'parameters', 'assigned', 'target', 'vector', 'current', 'population', 'according', 'probabilities', 'learned', 'experience', 'generate', 'improved', 'solutions', 'investigated', 'self', 'adaptive', 'characteristics', 'value', 'trial', 'vector', 'generation', 'strategies', 'experiments', 'showed', 'sade', 'algorithm', 'evolve', 'suitable', 'strategies', 'parameter', 'values', 'evolution', 'sensitivity', 'analysis', 'parameter', 'indicated', 'impact', 'performance', 'sade', 'compared', 'performance', 'sade', 'conventional', 'adaptive', 'variants', 'suite', 'bound', 'constrained', 'numerical', 'optimization', 'problems', 'sade', 'effective', 'obtaining', 'quality', 'solutions', 'smaller', 'standard', 'deviation', 'higher', 'success', 'rates', 'references', 'adapting', 'operator', 'settings', 'genetic', 'algorithms', 'evolut', 'comput', 'vol', 'dasgupta', 'adaptive', 'operators', 'genetic', 'search', 'proc', 'genetic', 'evolut', 'comput', 'conf', 'jul', 'done', 'adapting', 'operator', 'probabilities', 'steady', 'state', 'genetic', 'algorithm', 'proc', 'int', 'conf', 'genetic', 'algorithms', 'jul', 'adaptive', 'self', 'adaptive', 'evolutionary', 'computation', 'computational', 'intelligence', 'dynamic', 'system', 'perspective', 'fogel', 'eds', 'york', 'ieee', 'press', 'operator', 'parameter', 'adaptation', 'genetic', 'algorithms', 'soft', 'comput', 'vol', 'jun', 'eiben', 'michalewicz', 'parameter', 'control', 'evolutionary', 'algorithms', 'ieee', 'trans', 'evolut', 'comput', 'vol', 'jul', 'storn', 'price', 'differential', 'evolution', 'simple', 'efficient', 'heuristic', 'global', 'optimization', 'continuous', 'spaces', 'global', 'optim', 'vol', 'price', 'storn', 'lampinen', 'differential', 'evolution', 'practical', 'approach', 'global', 'optimization', 'berlin', 'germany', 'springer', 'verlag', 'differential', 'evolution', 'search', 'solutions', 'berlin', 'germany', 'springer', 'verlag', 'lampinen', 'differential', 'evolution', 'training', 'algorithm', 'neural', 'networks', 'neural', 'process', 'vol', 'storn', 'usage', 'differential', 'evolution', 'function', 'optimization', 'proc', 'conf', 'fuzzy', 'inf', 'process', 'berkeley', 'storn', 'differential', 'evolution', 'design', 'proc', 'ieee', 'int', 'conf', 'evolut', 'comput', 'japan', 'differential', 'evolution', 'optimization', 'proc', 'conf', 'space', 'inst', 'sanderson', 'minimal', 'representation', 'fusion', 'differential', 'evolution', 'ieee', 'trans', 'syst', 'man', 'cybern', 'syst', 'humans', 'vol', 'jan', 'storn', 'price', 'differential', 'evolution', 'simple', 'efficient', 'adaptive', 'scheme', 'global', 'optimization', 'continuous', 'spaces', 'online', 'available', 'http', 'http', 'icsi', 'berkeley', 'edu', 'storn', 'html', 'lampinen', 'zelinka', 'stagnation', 'differential', 'evolution', 'algorithm', 'proc', 'int', 'mendel', 'conf', 'soft', 'comput', 'parameter', 'study', 'differential', 'evolution', 'advances', 'intelligent', 'systems', 'fuzzy', 'systems', 'evolutionary', 'computation', 'eds', 'switzerland', 'press', 'liu', 'lampinen', 'fuzzy', 'adaptive', 'differential', 'evolution', 'algorithm', 'soft', 'comput', 'vol', 'apr', 'qin', 'suganthan', 'self', 'adaptive', 'differential', 'evolution', 'algorithm', 'numerical', 'optimization', 'proc', 'ieee', 'congr', 'evolut', 'comput', 'sep', 'price', 'introduction', 'differential', 'evolution', 'ideas', 'optimization', 'corne', 'dorigo', 'eds', 'hill', 'kukkonen', 'price', 'real', 'parameter', 'optimization', 'differential', 'evolution', 'proc', 'ieee', 'congr', 'evolut', 'comput', 'sep', 'teo', 'dynamic', 'self', 'adaptive', 'populations', 'differential', 'evolution', 'soft', 'comput', 'vol', 'ali', 'population', 'set', 'global', 'optimization', 'algorithms', 'modifications', 'numerical', 'studies', 'comput', 'res', 'vol', 'zaharie', 'control', 'population', 'diversity', 'adaptation', 'differential', 'evolution', 'algorithms', 'proc', 'mendel', 'int', 'conf', 'soft', 'comput', 'eds', 'jun', 'zaharie', 'adaptive', 'pareto', 'differential', 'evolution', 'proc', 'int', 'conf', 'parallel', 'process', 'appl', 'math', 'sep', 'abbass', 'self', 'adaptive', 'pareto', 'differential', 'evolution', 'algorithm', 'proc', 'congr', 'evolut', 'comput', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'qin', 'differential', 'evolution', 'algorithm', 'strategy', 'adaptation', 'global', 'numerical', 'optimization', 'omran', 'self', 'adaptive', 'differential', 'evolution', 'lecture', 'notes', 'artificial', 'intelligence', 'berlin', 'germany', 'springer', 'verlag', 'brest', 'greiner', 'boskovic', 'mernik', 'zumer', 'self', 'adapting', 'control', 'parameters', 'differential', 'evolution', 'comparative', 'study', 'numerical', 'benchmark', 'problems', 'ieee', 'trans', 'evolut', 'comput', 'vol', 'dec', 'das', 'konar', 'chakraborty', 'improved', 'differential', 'evolution', 'schemes', 'faster', 'global', 'search', 'acm', 'proc', 'genetic', 'evolut', 'comput', 'conf', 'washington', 'chakraborty', 'das', 'konar', 'differential', 'evolution', 'local', 'neighborhood', 'proc', 'congr', 'evolut', 'comput', 'reducing', 'bias', 'selection', 'algorithm', 'proc', 'int', 'conf', 'genetic', 'algorithms', 'cambridge', 'suganthan', 'deb', 'novel', 'composition', 'test', 'functions', 'numerical', 'global', 'optimization', 'proc', 'ieee', 'swarm', 'intell', 'jun', 'comparative', 'study', 'differential', 'evolution', 'particle_swarm', 'optimization', 'evolutionary', 'algorithms', 'numerical', 'benchmark', 'problems', 'proc', 'ieee', 'congr', 'evolut', 'comput', 'june', 'solving', 'rotated', 'multi', 'objective', 'optimization', 'problems', 'differential', 'evolution', 'proc', 'conf', 'intell', 'dec', 'zhang', 'xie', 'depso', 'hybrid', 'particle_swarm', 'differential', 'evolution', 'operator', 'proc', 'ieee', 'int', 'conf', 'syst', 'man', 'cybern', 'washington', 'results', 'cec', 'benchmark', 'function', 'set', 'online', 'available', 'http', 'www', 'ntu', 'edu', 'cec', 'pdf', 'suganthan', 'deb', 'chen', 'problem', 'definitions', 'evaluation', 'criteria', 'cec', 'special', 'session', 'real', 'parameter', 'optimization', 'nanyang', 'technol', 'univ', 'singapore', 'tech', 'rep', 'kanpur', 'india', 'yao', 'liu', 'lin', 'evolutionary', 'programming', 'made', 'faster', 'ieee', 'trans', 'evolut', 'comput', 'vol', 'jul', 'yang', 'tang', 'yao', 'large', 'scale', 'evolutionary', 'optimization', 'cooperative', 'coevolution', 'inf', 'sci', 'accepted', 'differential', 'evolution', 'ieee', 'trans', 'evolut', 'comput', 'vol', 'feb', 'noman', 'iba', 'differential', 'evolution', 'adaptive', 'local', 'search', 'ieee', 'trans', 'evolut', 'comput', 'vol', 'feb', 'brest', 'boskovic', 'greiner', 'zumer', 'performance', 'comparison', 'self', 'adaptive', 'adaptive', 'differential', 'evolution', 'algorithms', 'soft', 'comput', 'vol', 'qin', 'received', 'degree', 'department', 'automatic', 'control', 'engineering', 'university', 'china', 'completed', 'degree', 'school', 'electrical', 'electronic', 'engineering', 'nanyang', 'technological', 'university', 'singapore', 'research', 'interests', 'include', 'pattern', 'recognition', 'machine', 'learning', 'neural', 'network', 'genetic', 'evolutionary', 'algorithms', 'computer', 'bioinformatics', 'huang', 'received', 'degree', 'university', 'sci', 'tech', 'wuhan', 'china', 'worked', 'degree', 'school', 'electrical', 'electronic', 'engineering', 'nanyang', 'technological', 'university', 'singapore', 'research', 'interests', 'include', 'evolutionary', 'algorithms', 'differential', 'evolution', 'applications', 'evolutionary', 'algorithms', 'suganthan', 'received', 'degree', 'degree', 'electrical', 'information', 'engineering', 'university', 'cambridge', 'obtained', 'degree', 'school', 'electrical', 'electronic', 'engineering', 'nanyang', 'technological', 'university', 'singapore', 'research', 'assistant', 'department', 'electrical', 'engineering', 'university', 'department', 'computer', 'science', 'electrical', 'engineering', 'university', 'assistant', 'professor', 'school', 'electrical', 'electronic', 'engineering', 'nanyang', 'technological', 'university', 'singapore', 'associate', 'professor', 'associate', 'editor', 'ieee', 'transactions', 'evolutionary', 'computation', 'pattern', 'recognition', 'journal', 'research', 'interests', 'include', 'evolutionary', 'computation', 'applications', 'evolutionary', 'computation', 'neural', 'networks', 'pattern', 'recognition', 'bioinformatics', 'member', 'ieee']"
9,3,1,"646 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 10, NO. 6, DECEMBER 2006 Self-Adapting Control Parameters in Differential Evolution: A Comparative Study on Numerical Benchmark Problems Janez Brest, Member, IEEE, Sa¡so Greiner, Borko Bo¡skovic´, Marjan Mernik, Member, IEEE, and Viljem ¡ Zumer, Member, IEEE Abstract—We describe an efficient technique for adapting control parameter settings associated with differential evolution (DE). The DE algorithm has been used in many practical cases and has demonstrated good convergence properties. It has only a few control parameters, which are kept fixed throughout the entire evolutionary process. However, it is not an easy task to properly set control parameters in DE. We present an algorithm—a new version of the DE algorithm—for obtaining self-adaptive control parameter settings that showgood performance on numerical benchmark problems. The results show that our algorithm with self-adaptive control parameter settings is better than, or at least comparable to, the standard DE algorithm and evolutionary algorithms from literature when considering the quality of the solutions obtained. Index Terms—Adaptive parameter control, differential evolution (DE), evolutionary optimization. I. INTRODUCTION DIFFERENTIAL evolution (DE) is a simple yet powerful evolutionary algorithm (EA) for global optimization introduced by Price and Storn [1]. The DE algorithm has gradually become more popular and has been used in many practical cases, mainly because it has demonstrated good convergence properties and is principally easy to understand [2]. EAs [3] are a broad class of stochastic optimization algorithms inspired by biology and, in particular, by those biological processes that allow populations of organizms to adapt to their surrounding environments: genetic inheritance and survival of the fittest. EAs have a prominent advantage over other types of numerical methods. They only require information about the objective function itself, which can be either explicit or implicit. Other accessory properties such as differentiability or continuity are not necessary. As such, they are more flexible in dealing with a wide spectrum of problems. When using an EA, it is also necessary to specify how candidate solutions will be changed to generate new solutions [4]. EA may have parameters, for instance, the probability of mutation, the tournament size of selection, or the population size. Manuscript received June 14, 2005; revised September 19, 2005 and November 9, 2005. This work was supported in part by the Slovenian Research Agency under Programme P2-0041, Computer Systems, Methodologies, and Intelligent Services. The authors are with the Computer Architecture and Languages Laboratory, Institute of Computer Science, Faculty of Electrical Engineering and Computer Science, University of Maribor, SI-2000 Maribor, Slovenia (e-mail: janez.brest@uni-mb.si; saso.greiner@uni-mb.si; borko.boskovic@uni-mb.si; marjan.mernik@uni-mb.si; zumer@uni-mb.si). Digital Object Identifier 10.1109/TEVC.2006.872133 The values of these parameters greatly determine the quality of the solution obtained and the efficiency of the search [5]–[7]. Starting with a number of guessed solutions, the multipoint algorithm updates one or more solutions in a synergistic manner in the hope of steering the population toward the optimum [8], [9]. Choosing suitable parameter values is, frequently, a problemdependent task and requires previous experience of the user. Despite its crucial importance, there is no consistent methodology for determining the control parameters of an EA, which are, most of the time, arbitrarily set within some predefined ranges [4]. In their early stage, EAs did not usually include control parameters as a part of the evolving object but considered them as external fixed parameters. Later, it was realized that in order to achieve optimal convergence, these parameters should be altered in the evolution process itself [5], [7]. The control parameters were adjusted over time by using heuristic rules, which take into account information about the progress achieved. However, heuristic rules, which might be optimal for one optimization problem, might be inefficient or even fail to guarantee convergence for another problem. A logical step in the development of EAs was to include control parameters into the evolving objects and allow them to evolve along with the main parameters [3], [10], [11]. Globally, we distinguish two major forms of setting parameter values: parameter tuning and parameter control. The former means the commonly practiced approach that tries to find good values for the parameters before running the algorithm, then tuning the algorithm using these values, which remain fixed during the run. The latter means that values for the parameters are changed during the run. According to Eiben et al. [5], [7], the change can be categorized into three classes. 1) Deterministic parameter control takes place when the value of a parameter is altered by some deterministic rule. 2) Adaptive parameter control is used to place when there is some form of feedback from the search that is used to determine the direction and/or the magnitude of the change to the parameter. 3) Self-adaptive parameter control is the idea that “evolution of the evolution” can be used to implement the self-adaptation of parameters. Here, the parameters to be adapted are encoded into the chromosome (individuals) and undergo the actions of genetic operators. The better values of these encoded parameters lead to better individuals which, in turn, are more likely to survive and produce offspring and, hence, propagate these better parameter values. 1089-778X/$20.00 © 2006 13:37:02 UTC from IEEE Xplore. Restrictions apply. BREST et al.: SELF-ADAPTING CONTROL PARAMETERS IN DIFFERENTIAL EVOLUTION 647 Hence, it is seemingly natural to use an EA, not only for finding solutions to a problem but also for tuning the (same) algorithm to the particular problem. Technically speaking, we are trying to modify the values of parameters during the run of the algorithm by taking the actual search progress into account. As discussed in [5] and [7], there are two ways to do this. The first way is to use some heuristic rule which takes feedback from the current state of the search and modifies the parameter values accordingly (adaptive parameter control), such as the credit assignment process presented by [12]. A second way is to incorporate parameters into the chromosomes, thereby making them subject to evolution (self-adaptive parameter control) [13]. The proof of convergence of EAs with self-adaptation is difficult because control parameters are changed randomly and the selection does not affect their evolution directly [14], [15]. Since DE is a particular instance of EA, it is interesting to investigate how self-adaptivity can be applied to it. Until now, no research work on self-adaptivity in DE has been reported. First, we define a type of optimization problem. In this paper, we will only concern ourselves with those optimization methods that use an objective function. In most cases, the objective function defines the optimization problem as a minimization task. To this end, the following investigation is further restricted to the minimization of problems. When the objective function is nonlinear and nondifferentiable, direct search approaches are the methods of choice [1]. In optimizing a function, an optimization algorithm aims to find such that , , where does not need to be continuous but must be bounded. This paper only considers unconstrained function optimization. DE is a floating point encoding an EA for global optimization over continuous spaces [2], [16], [17]. DE creates new candidate solutions by combining the parent individual and several other individuals of the same population. A candidate replaces the parent only if it has better fitness. DE has three parameters: amplification factor of the difference vector , crossover control parameter , and population size . DE is also particularly easy to work with, having only a few control parameters, which are kept fixed throughout the entire optimization process [2], [16], [18]. Since the interaction of control parameters with the DE’s performance is complex in practice, a DE user should select the initial parameter settings for the problem at hand from previous experiences or from literature. Then, the trial-and-error method has to be used for fine tuning the control parameters further. In practice, the optimization run has to be performed multiple times with different settings. In some cases, the time for finding these parameters is unacceptably long. In our paper, the parameter control technique is based on the self-adaptation of two parameters ( and ), associated with the evolutionary process. The main goal here is to produce a flexible DE, in terms of control parameters and . This paper introduces a novel approach to the self-adapting control parameter of DE. It gives some comparisons against several adaptive and nonadaptive methods for a set of test functions. The paper is organized as follows. Related work is described in Section II. The DE is briefly presented in Section III. Some suggested choices for the fixed settings of the control parameters from literature are collected in Section IV. In Section V, the proposed new version of the DE algorithm with self-adapted control parameters is described in detail. Benchmark functions are presented in Section VI. Experiments are then presented in Section VII. A comparison of the self-adaptive DE and DE algorithms with other EP algorithms is made, followed by an experiment on the parameter settings for the DE algorithm. Then experiments with and values by the adaptive DE are presented, and finally a comparison of self-adaptive DE algorithm with fuzzy adaptive differential evolution algorithm is shown. In conclusion, some remarks are given in Section VIII. II. RELATED WORK This section reviews papers that already compare DE with other instances of EAs, such as particle swarm optimization and genetic algorithms, as well as papers that compare a different extension of DE with the original DE. After that, we concentrate on papers that deal with parameter control in DE. In the end, we mention papers on EA that use similar benchmark functions as presented in this paper. DE was proposed by Price and Storn [1], [18]. It is a very simple and straightforward strategy. Vesterstroem et al. [19] compared the DE algorithm with particle swarm optimization (PSO) and EAs on numerical benchmark problems. DE outperformed PSO and EAs in terms of the solution’s quality on most benchmark problems. The benchmark functions in [19] are similar to benchmark functions used in our paper. Ali and Törn in [9] proposed new versions of the DE algorithm and also suggested some modifications to classical DE to improve its efficiency and robustness. They introduced an auxiliary population of individuals alongside the original population (noted in [9], a notation using sets is used—population set-based methods). Next, they proposed a rule for calculating the control parameter automatically (see Section IV). Sun et al. [20] proposed a combination of DE algorithms and the estimation of distribution algorithm (EDA), which tries to guide its search toward a promising area by sampling new solutions from a probability model. Based on experimental results, it has been demonstrated that the DE/EDA algorithm outperforms the DE algorithm and the EDA. There are quite different conclusions about the rules for choosing the control parameters of DE. In [21], it is stated that the control parameters of DE are not difficult to choose. On the other hand, Gämperle et al. [22] reported that choosing the proper control parameters for DE is more difficult than expected. Liu and Lampinen [2] reported that effectiveness, efficiency, and robustness of the DE algorithm are sensitive to the settings of the control parameters. The best settings for the control parameters can be different for different functions and the same function with different requirements for consumption time and accuracy. However, there still exists a lack of knowledge on how to find reasonably good values for the control parameters of DE for a given function [16]. Liu and Lampinen [16] proposed a new version of DE, where the mutation control parameter and the crossover control parameter are adaptive. It is called the Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. 648 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 10, NO. 6, DECEMBER 2006 fuzzy adaptive differential evolution (FADE) algorithm. It dynamically controls DE parameters and/or . The FADE algorithm, especially when adapting and , converges much faster than the traditional DE, particularly when the dimensionality of the problem is high or the problem concerned is complicated [16]. In this paper, we compare our version of a self-adaptive DE with the classical DE algorithm and with the FADE algorithm. A performance comparison is also made with EP algorithms, described in the following. In [23], a “fast EP” (FEP) is proposed which uses a Cauchy, instead of Gaussian, mutation as the primary search operator. In [24], a further generalization of FEP is described by using mutation based on the Lévy probability distribution.With Lévy probability distribution, one can extend and generalize FEP because the Cauchy probability distribution is a special case of the Lévy probability distribution. The large variation at a single mutation enables Lévy mutation to discover a wider region of the search space globally [24]. The Lévy-mutated variables cover a wider range than those mutated by Gaussian distributions. Large variations of the mutated offspring can help to escape from local optima. Finally, we give two more references which have dealt with function optimizations evaluated on some similar benchmark test functions. Tu et al. [25] suggest the use of the stochastic genetic algorithm (StGA), where the stochastic coding strategy is employed. The search space is explored region by region. Regions are dynamically created using a stochastic method. In each region, a number of children are produced through random sampling, and the best child is chosen to represent the region. The variance values are decreased if at least one of five generated children results in improved fitness; otherwise, the variance values are increased. The StGA codes each chromosome as a representative of a stochastic region described by a multivariate Gaussian distribution rather than a single candidate solution, as in the conventional GA. The paper [26] presents a technique for adapting control parameter settings associated with genetic operators using fuzzy logic controllers and coevolution. III. DE ALGORITHM There are several variants of DE[1], [18]. In this paper,we use the DE scheme which can be classified using notation [1], [18] as DE/rand/1/bin strategy. This strategy is the most often used in practice [1], [2], [20], [22] and can be described as follows. A set of optimization parameters is called an individual. It is represented by a -dimensional parameter vector. A population consists of parameter vectors , . denotes one generation. We have one population for each generation. is the number of members in a population. It is not changed during the minimization process. The initial population is chosen randomly with uniform distribution. According to Storn and Price [1], [18], we have three operations: mutation, crossover, and selection. The crucial idea behind DE is a scheme for generating trial parameter vectors. Mutation and crossover are used to generate new vectors (trial vectors), and selection then determines which of the vectors will survive into the next generation. A. Mutation For each target vector , a mutant vector is generated according to with randomly chosen indexes . Note that indexes have to be different from each other and from the running index so that must be at least four. is a real number that controls the amplification of the difference vector . If a component of a mutant vector goes off the box , then this component is set to bound value. The same “solution” is used by classic DE too. B. Crossover The target vector is mixed with the mutated vector, using the following scheme, to yield the trial vector where if or if and for . is the th evaluation of a uniform random generator number. is the crossover constant , which has to be determined by the user. is a randomly chosen index which ensures that gets at least one element from . Otherwise, no new parent vector would be produced and the population would not alter. C. Selection A greedy selection scheme is used if for minimization problems otherwise for . If, and only if, the trial vector yields a better cost function value than , then is set to ; otherwise, the old value is retained. IV. CONTROL PARAMETER SETTINGS FOR DE ALGORITHM According to Storn et al. [1], [18], DE is much more sensitive to the choice of than it is to the choice of . The suggested choices by Storn in [1] and [16] are: 1) ; 2) ; 3) . Recall that is the dimensionality of the problem. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. BREST et al.: SELF-ADAPTING CONTROL PARAMETERS IN DIFFERENTIAL EVOLUTION 649 Fig. 1. Self-adapting: encoding aspect. Liu and Lampinen in [16] used control parameters set to , . The values were chosen based on discussions in [21]. Ali and Törn in [9] empirically obtained an optimal value for . They used . was calculated according to the following scheme: if otherwise ensuring that . and are the maximum and minimum values of vectors , respectively. is the lower bound for . In [9], is used. In our paper, we use a self-adaptive control mechanism to change the control parameters and during the run. The third control parameter is not changed during the run. V. SELF-ADAPTING PARAMETERS—NEW VERSION OF DE ALGORITHM Choosing suitable control parameter values is, frequently, a problem-dependent task. The trial-and-error method used for tuning the control parameters requires multiple optimization runs. In this section, we propose a self-adaptive approach for control parameters. Each individual in the population is extended with parameter values. In Fig. 1, the control parameters that will be adjusted by means of evolution are and . Both of them are applied at the individual level. The better values of these (encoded) control parameters lead to better individuals which, in turn, are more likely to survive and produce offspring and, hence, propagate these better parameter values. The solution (Fig. 1) is represented by a -dimensional vector , . New control parameters or factors and are calculated as if otherwise if otherwise and they produce factors and in a new parent vector. , are uniform random values . and represent probabilities to adjust factors and , respectively. In our experiments, we set . Because and , the new takes a value form [0.1,1.0] in a random manner. The new takes a value from [0,1]. and are obtained before the mutation is performed. So, they influence the mutation, crossover, and selection operations of the new vector . We have made a decision about the range for , which is determined by values and , based on the suggested values by other authors and based on the experimental results. In the literature, is rarely greater than one. If control parameter , the new trial vector is generated using crossover but no mutation; therefore, we propose . The classic DE has three control parameters that need to be adjusted by the user. It seems that our self-adaptive DE has even more parameters, but please note that we have used fixed values for , , , and for all benchmark functions in our selfadaptive DE algorithm. The user does not need to adjust those (additional) parameters. Suitable control parameters are different for different function problems. Which are the best values of control parameters and how could we get them? Are there any universal directions on how to get good initial values for control parameters? In our method, the algorithm can change control parameters with some probabilities ( and ) and after that, better control parameters are used in the next generations. We have made additional experiments with some combinations with and using values: 0.05, 0.1, 0.2, and 0.3, and we did not notice any significant difference in results. Therefore, we peaked at , and those values were used in this paper. The main contribution of our approach is that user does not need to guess the good values for and , which are problem dependent. The rules for self-adapting control parameters and are quite simple; therefore, the new version of the DE algorithm does not increase the time complexity, in comparison to the original DE algorithm. VI. BENCHMARK FUNCTIONS Twenty-one benchmark functions from [23] were used to test the performance of ourDEalgorithm to assure a fair comparison. If the number of test problems were smaller, itwould be very difficult to make a general conclusion. Using a test set which is too small also has the potential risk that the algorithm is biased (optimized) toward the chosen set of problems. Such bias might not be useful for other problems of interest. The benchmark functions are given inTable I. denotes the dimensionality of the test problem, denotes the ranges of the variables, and is a function value of the global optimum. A more detailed description of each function is given in [23] and [24], where the functions were divided into three classes: functions with no local minima, many local minima, and a few local minima. Functions are high-dimensional problems. Functions are unimodal. Function is the step function which has one minimum and is discontinuous. Function is a noisy quadratic function. Functions are multimodal functions where the number of local minima increases exponentially with the problem dimension [23], [27]. Functions are low-dimensional functions which have only a few local minima [23], [27]. Yao et al. [23] described the benchmark functions and convergence rates of algorithms, as follows. For unimodal functions, the convergence rates of FEP and classical EP (CEP) algorithms are more interesting than the final results of optimization, as there are other methods which are specifically designed to optimize unimodal functions. For multimodal functions, the final Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. 650 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 10, NO. 6, DECEMBER 2006 TABLE I BENCHMARK FUNCTIONS results are much more important since they reflect the algorithm’s ability to escape from poor local optima and locate a good near-global optimum. VII. EXPERIMENTAL RESULTS We applied self-adaptive DE and (original) DE to a set of benchmark optimization problems. The initial population was generated uniformly at random in the range, as specified in Table I. Throughout this paper, we have used and for the (original) DE algorithm. Our decision for using those values is based on proposed values from literature [1], [9], [16], [19]. A. Comparison of Self-Adaptive DE and DE Algorithms With FEP and CEP Algorithms In the experiment, we set the parameters as in [23] for fair performance comparison. The following parameters were used in our experiment: 1) population size 100; 2) maximum number of generations: 1500 for , , , , and , 2000 for and , 3000 for , 4000 for , 5000 for , , and , 9000 for , 20 000 for , and 100 for . Therefore, in our experiment, self-adaptive DE and DE used the same population size as in [23] and the same stopping criteria (i.e., equal number of function evaluations). The average results of 50 independent runs are summarized in Table II. Results for the FEP and CEP algorithms are taken from [23, Tables II–IV]. The comparison shows that self-adaptive DE gives better results on benchmark functions than FEP and CEP. Self-adaptive DE algorithm performs better than DE, while DE does not always perform better than FEP and CEP. When Compared With IFEP: Yao et al. in [23] proposed an improved FEP (IFEP) based on mixing (rather than switching) different mutation operators. IFEP generates two candidate offspring from each parent, one by Cauchy mutation and one by Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. BREST et al.: SELF-ADAPTING CONTROL PARAMETERS IN DIFFERENTIAL EVOLUTION 651 TABLE II EXPERIMENTAL RESULTS, AVERAGED OVER 50 INDEPENDENT RUNS, OF SELF-ADAPTIVE DE, DE, FEP, AND CEP ALGORITHMS. “MEAN BEST” INDICATES AVERAGE OF MINIMUM VALUES OBTAINED AND “STD DEV” STANDS FOR STANDARD DEVIATION. t-TEST TESTS SELF-ADAPTIVE DE AGAINST OTHER ALGORITHMS, RESPECTIVELY Gaussian mutation. The better one is then chosen as the offspring. IFEP has improved FEP’s performance significantly. If we compared self-adaptive DE with IFEP taken from [23, Table X], it is clear that self-adaptive DE is certainly better than IFEP, too. Many test functions take their minimum in the middlepoint of . Three additional experiments for high-dimensional problems were performed to make sure that our algorithm performs well, too, if was not symmetrical about the point where the objective function takes its minimum: 1) middle point is shifted; 2) lower bound was set to zero; and 3) upper bound was set to zero. Albeit no systematical experiments have been carried out, it can be observed, according to preliminary results, that our approach is not significantly influenced when function does not take its minimum in the middlepoint of . B. Comparison of Self-Adaptive DE and DE Algorithms With Adaptive LEP and Best Lévy Algorithms In the experiment, we used the same function set and the parameters as in [24]. The following parameters were used in our experiments: 1) population size 100; 2) maximum number of generations: 1500 for , 30 for and , and 100 for , , and . Table III summarizes the average results of 50 independent runs. A comparison with results from [24] is made. It is clear that no algorithm performs superiorly better than others, but on average self-adaptive DE performs better than the other algorithms. For the unimodal functions and , both self-adaptive DE andDE are better than adaptive LEP and Best Lévy. For function , adaptive LEP performs better than self-adaptive DE. The -test shows a statistically significant difference (please note, in Table II, self-adaptive DE gives good results when number of generations is 5000). Adaptive LEP and self-adaptive DE outperform DE and Best Lévy. For the multimodal functions with many local minima, i.e., , it is clear that the best results are obtained by selfadaptive DE. Interestingly, DE is worse than adaptive LEP and Best Lévy for functions and and better for functions . For the functions and with only a few local minima, the dimension of the functions is also small. In this case, it is hard to judge the performances of individual algorithms. All algorithms were able to find optimal solutions for these two functions. For functions , there is no superior algorithm either. For , self-adaptive DE and DE are better than adaptive LEP and Best Lévy. There are similar algorithm performances for functions and , except adaptive LEP, which performed slightly worse for function . Fig. 2 shows average best fitness curves for the self-adaptive DE algorithm with over 50 independent runs for selected benchmark functions , , , . Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. 652 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 10, NO. 6, DECEMBER 2006 TABLE III EXPERIMENTAL RESULTS, AVERAGED OVER 50 INDEPENDENT RUNS, OF SELF-ADAPTIVE DE, DE, ADAPTIVE LEP, AND BEST OF FOUR NONADAPTIVE LEP ALGORITHMS (BEST LÉVY). “MEAN BEST” INDICATES AVERAGE OF MINIMUM VALUES OBTAINED AND “STD DEV” STANDS FOR STANDARD DEVIATION. t-TEST TESTS SELF-ADAPTIVE DE AGAINST OTHER ALGORITHMS, RESPECTIVELY Fig. 2. Average best fitness curves of self-adaptive DE algorithm for selected benchmark functions. All results are means of 50 runs. (a) Test function f . (b) Test function f . (c) Test function f . (d) Test function f . C. Discussion on Control Parameter Settings for DE Algorithm In order to compare our self-adaptive version of DE algorithm with the DE algorithm, the best control parameter settings for DE may be needed. DE algorithm does not change control parameter values during optimization process. For all benchmark function problems, the DE algorithm was performed with and taken from [0.0, 0.95] by step 0.05. First, we set control parameters and and kept them fixed during 30 independent runs. Then, we set and for the next 30 runs, etc. The other Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. BREST et al.: SELF-ADAPTING CONTROL PARAMETERS IN DIFFERENTIAL EVOLUTION 653 Fig. 3. Evolutionary processes of DE for functions f and f . Results were averaged over 30 independent runs. (a) Test function f . (b) Test function f . (c) Test function f . (d) Test function f . Fig. 4. Evolutionary processes of DE for functions f and f . Results were averaged over 30 independent runs. (a) Test function f . (b) Test function f . (c) Test function f . (d) Test function f . (parameter) settings were the same as proposed in Section VII-B. The results were averaged over 30 independent runs. The selected function problems are depicted in Figs. 3 and 4. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. 654 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 10, NO. 6, DECEMBER 2006 Fig. 5. CR and F values by self-adaptive DE for functions f , f , and f , respectively. Dot is plotted when best fitness value in generation is improved. (a) Test function f . (b) Test function f . (c) Test function f . (d) Test function f . (e) Test function f . (f) Test function f . For function , the good control values and are from [0.15, 0.5] [Fig. 3(a)] and [0.4, 0.75] [Fig. 3(b)], respectively. The best averaged fitness value for function was obtained by and (number of generation was 1500, and ). The best averaged fitness value for function was obtained by and (for high values for give better results). It is very interesting that apparently there are CR values that make a sensitive parameter (where the mean best depends on the value of ), and there are values that make a robust parameter (where the mean best does not depend on the value of ). There are two disadvantages in DE. Parameter tuning requires multiple runs and it is usually not a feasible solution for problems which are very time consuming. The best control parameter settings of DE are problem dependent. The proposed selfadaptive DE overcomes those disadvantages, so there is no need for multiple runs to adjust control parameters, and self-adaptive DE is much more problem independent than DE. D. and Values for Self-Adaptive DE In self-adaptive DE, and values are being changed during evolutionary process. If we want to look into an evolutionary process, we should look at fitness curves. The most important is the best fitness curve. For the selected functions , , , , and , and values are depicted in Figs. 5 and 6 only when the best fitness value in generation is improved. For example, most of the values for functions and are lower than 0.2, while for function they are greater than 0.8. If we know that is good for function , we can use this “knowledge” in initialization by DE and also by our self-adaptive DE. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. BREST et al.: SELF-ADAPTING CONTROL PARAMETERS IN DIFFERENTIAL EVOLUTION 655 Fig. 6. CR and F values by self-adaptive DE for functions f and f , respectively. Dot is plotted when best fitness value in generation is improved. (a) Test function f . (b) Test function f . (c) Test function f . (d) Test function f . TABLE IV EXPERIMENTAL RESULTS, AVERAGED OVER 50 INDEPENDENT RUNS, OF SELF-ADAPTIVE DE WITH DIFFERENT INITIAL F AND CR VALUES FOR SELECTED BENCHMARK FUNCTIONS It is interesting to make a comparison of values for control parameters and of Figs. 3 and 4 with Figs. 5 and 6, for each function, respectively.We can see that the values of control parameters obtained by self-adaptive DE algorithm are quite similar to (good) and values obtained from the experiment in Section VII-B. But this time, good and parameter values are not obtained by tuning, hence saving many runs. Based on the experiment in this section, the necessity of changing control parameter during the optimization process is confirmed once again. Initialization: The initial vector population is chosen randomly and there arises the question as to how to choose the initial and control parameters for self-adaptive DE, since and are encoded in the individuals (Fig. 1). We performed an additional experiment to determine the initial and values for our self-adaptive DE. Table IV shows the results obtained in our additional experiment only for the selected benchmark functions. The results do not differ ( -test does not show any significant differences); therefore, our selfadaptive DE is not sensitive to the initial and values. This is an advantage of our algorithm. E. Comparison of Self-Adaptive DE With Fuzzy Adaptive Differential Evolution Algorithm Liu and Lampinen [16] introduce a new version of the differential evolution algorithm with adaptive control parameters, the fuzzy adaptive differential evolution (FADE) algorithm, which uses fuzzy logic controllers to adapt the search parameters for the mutation operation and crossover operation. The control inputs incorporate the relative objective function values and individuals of the successive generations. The FADE algorithm was tested with a set of standard test functions, where it outperforms the original DE when the dimensionality of the problem is high [16]. In [16], ten benchmark functions are used, and nine of them are the same as the benchmark functions in [23] and in this Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. 656 IEEE TRANSACTIONS ON EVOLUTIONARY COMPUTATION, VOL. 10, NO. 6, DECEMBER 2006 TABLE V EXPERIMENTAL RESULTS, AVERAGED OVER 100 INDEPENDENT RUNS, OF SELF-ADAPTIVE DE AND FUZZY ADAPTIVE DE ALGORITHMS. “MEAN BEST” INDICATES AVERAGE OF MINIMUM VALUES OBTAINED AND “STD DEV” STANDS FOR STANDARD DEVIATION. t-TEST TESTS SELF-ADAPTIVE DE AGAINST OTHER ALGORITHMS, RESPECTIVELY paper. The following parameters were used in our experiment (the same parameter settings are used in [16]): 1) dimensionality of the problem ; 2) population size ; 3) maximum number of generations: 5000 for , , , , and , 7000 for , 10 000 for , 100 for , and 50 for . Both algorithms use an approach to adapt mutation control parameter and the crossover control parameter . The average results of 100 independent runs are summarized in Table V. The experimental results suggest that the proposed algorithm certainly performs better than the FADE algorithm. This is clearly reflected also by the -test. Based on the obtained results in this section, we can conclude that our self-adaptive method is very good in solving benchmark functions (yielding excellent results) and for determination of good values for control parameters of a DE. VIII. CONCLUSION Choosing the proper control parameters for DE is quite a difficult task because the best settings for the control parameters can be different for different functions. In this paper, the proposed self-adaptive method is an attempt to determine the values of control parameters and . Our self-adaptive DE algorithm has been implemented and tested on benchmark optimization problems taken from literature. The results show that our algorithm, with self-adaptive control parameter settings, is better or at least comparable to the standard DE algorithm and evolutionary algorithms from literature considering the quality of the solutions found. The proposed algorithm gives better results in comparison with the FADE algorithm. Our self-adaptive method could be simply incorporated into existing DE algorithms, which are used to solve problems from different optimization areas. We did not experiment with different population sizes, nor did we make population size adaptive. This remains a challenge for future work. ACKNOWLEDGMENT The authors would like to thank J. S. Versterstroem for letting us use his source code for most of the benchmark functions. The authors would also like to thank Prof. X. Yao, the anonymous associate editor, and the referees for their valuable comments that helped greatly to improve this paper. Simulation studies for the differential evolution strategy were performed with the C code downloaded from http://www.icsi.berkeley.edu/~storn/ code.html. REFERENCES [1] R. Storn and K. Price, “Differential evolution—A simple and efficient heuristic for global optimization over continuous spaces,” J. Global Optimiz., vol. 11, pp. 341–359, 1997. [2] J. Liu and J. Lampinen, “On setting the control parameter of the differential evolution method,” in Proc. 8th Int. Conf. Soft Computing (MENDEL 2002), 2002, pp. 11–18. [3] T. Bäck, D. B. Fogel, and Z. Michalewicz, Eds., Handbook of Evolutionary Computation. New York: Inst. Phys. and Oxford Univ. Press, 1997. [4] M. H. Maruo, H. S. Lopes, and M. R. Delgado, “Self-adapting evolutionary parameters: Encoding aspects for combinatorial optimization problems,” in Lecture Notes in Computer Science, G. R. Raidl and J. Gottlieb, Eds. Lausanne, Switzerland: Springer-Verlag, 2005, vol. 3448, Proc. Evol. Comput. Combinatorial Optimization, pp. 155–166. [5] A. E. Eiben, R. Hinterding, and Z. Michalewicz, “Parameter control in evolutionary algorithms,” IEEE Trans. Evol. Comput., vol. 3, no. 2, pp. 124–141, Jul. 1999. [6] T. Krink and R. K. Ursem, “Parameter control using the agent based patchwork model,” in Proc. Congr. Evolutionary Computation, La Jolla, CA, Jul. 6–9, 2000, pp. 77–83. [7] A. E. Eiben and J. E. Smith, Introduction to Evolutionary Computing, ser. Natural Computing. Berlin, Germany: Springer-Verlag, 2003. [8] K. Deb, “A population-based algorithm-generator for real-parameter optimization,” Soft Computing—A Fusion of Foundations, Methodologies and Applications, vol. 9, no. 4, pp. 236–253, 2005 [Online]. Available: http://springerlink.metapress.com/index/10.1007/ s00500-004-0377-4 [9] M. M. Ali and A. Törn, “Population set-based global optimization algorithms: Some modifications and numerical studies,” Comput. Oper. Res., vol. 31, no. 10, pp. 1703–1725, 2004. [10] T. Bäck, “Evolution strategies: An alternative evolutionary algorithm,” in Lecture Notes in Computer Science, J. M. Alliott, E. Lutton, E. Ronald, M. Schoenauer, and D. Snyders, Eds. Heidelberg, Germany: Springer-Verlag, 1996, vol. 1063, Proc. Artificial Evolution: Eur. Conf., pp. 3–20. [11] ——, “Adaptive business intelligence based on evolution strategies: some application examples of self-adaptive software,” Inf. Sci., vol. 148, pp. 113–121, 2002. [12] L. Davis, Ed., Handbook of Genetic Algorithms. New York: Van Nostrand Reinhold, 1991. [13] W. M. Spears, “Adapting crossover in evolutionary algorithms,” in Proc. 4th Annual Conf. Evolutionary Programming, J. R. McDonnell, R. G. Reynolds, and D. B. Fogel, Eds., 1995, pp. 367–384. [14] M. A. Semenov and D. A. Terkel, “Analysis of convergence of an evolutionary algorithm with self-adaptation using a stochastic Lyapunov function,” Evol. Comput., vol. 11, no. 4, pp. 363–379, 2003. [15] J. He and X. Yao, “Toward an analytic framework for analysing the computation time of evolutionary algorithms,” Artificial Intell., vol. 145, no. 1–2, pp. 59–97, 2003. [16] J. Liu and J. Lampinen, “A fuzzy adaptive differential evolution algorithm,” Soft Computing—A Fusion of Foundations, Methodologies and Applications, vol. 9, no. 6, pp. 448–462, 2005 [Online]. Available: http://springerlink.metapress.com/index/10.1007/s00500-004-0363-x Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:37:02 UTC from IEEE Xplore. Restrictions apply. BREST et al.: SELF-ADAPTING CONTROL PARAMETERS IN DIFFERENTIAL EVOLUTION 657 [17] ——, “Adaptive parameter control of differential evolution,” in Proc. 8th Int. Conf. Soft Computing (MENDEL 2002), 2002, pp. 19–26. [18] R. Storn and K. Price, Differential Evolution—A Simple and efficient adaptive scheme for global optimization over continuous spaces, Berkeley, CA, Tech. Rep. TR-95-012, 1995 [Online]. Available: citeseer.ist.psu.edu/article/storn95differential.html [19] J. Vesterstroem and R. Thomsen, “A comparative study of differential evolution, particle swarm optimization, and evolutionary algorithms on numerical benchmark problems,” in Proc. IEEE Congr. Evolutionary Computation, Portland, OR, Jun. 20–23, 2004, pp. 1980–1987. [20] J. Sun, Q. Zhang, and E. Tsang, “DE/EDA: A new evolutionary algorithm for global optimization,” Info. Sci., vol. 169, pp. 249–262, 2004. [21] K. Price and R. Storn, “Differential evolution: A simple evolution strategy for fast optimization,” Dr. Dobb’s J. Software Tools, vol. 22, no. 4, pp. 18–24, Apr. 1997. [22] R. Gämperle, S. D. Müller, and P. Koumoutsakos, “A parameter study for differential evolution,” WSEAS NNA-FSFS-EC 2002. Interlaken, Switzerland, WSEAS, Feb. 11–15, 2002 [Online]. Available: http://www.worldses.org/online/ [23] X. Yao, Y. Liu, and G. Lin, “Evolutionary programming made faster,” IEEE Trans. Evol. Comput., vol. 3, no. 2, p. 82, Jul. 1999. [24] C. Y. Lee and X. Yao, “Evolutionary programming using mutations based on the Lévy probability distribution,” IEEE Trans. Evol. Comput., vol. 8, no. 1, pp. 1–13, Feb. 2004. [25] Z. Tu and Y. Lu, “A robust stochastic genetic algorithm (StGA) for global numerical optimization,” IEEE Trans. Evol. Comput., vol. 8, no. 5, pp. 456–470, Oct. 2004. [26] F. Herrera and M. Lozano, “Adaptive genetic operators based on coevolution with fuzzy behaviors,” IEEE Trans. Evol. Comput., vol. 5, no. 2, pp. 149–165, Apr. 2001. [27] A. Törn and A. ¡ Zilinskas, “Global optimization,” in Lecture Notes Computer Science. Heidelberg, Germany: Spring-Verlag, 1989, vol. 350, pp. 1–24. Janez Brest (M’02) received the B.S., M.Sc., and Ph.D. degrees in computer science from the University of Maribor, Maribor, Slovenia, in 1995, 1998, and 2001, respectively. He has been with the Laboratory for Computer Architecture and Programming Languages, University of Maribor, since 1993. He is currently an Assistant Professor. His research interests include evolutionary computing, artificial intelligence, and optimization. His fields of expertise embrace programming languages, web-oriented programming, and parallel and distributed computing research. Dr. Brest is a member of ACM. Sa¡so Greiner received the B.S. and M.Sc. degrees in computer science from the University of Maribor, Maribor, Slovenia, in 2002 and 2004, respectively. He is currently a Teaching Assistant at the Faculty of Electrical Engineering and Computer Science, University of Maribor. His research interests include object-oriented programming languages, compilers, computer architecture, and web-based information systems. Borko Bo¡skovic´ received the B.S. degree, in 2003. He is currently a Teaching Assistant at the Faculty of Electrical Engineering and Computer Science, University of Maribor, Maribor, Slovenia. He has worked in the Laboratory for Computer Architecture and Programming Languages, University of Maribor, since 2000. His research interests include web-oriented programming, evolutionary algorithms, and search algorithms for two players with perfect-information zero-sum games. Marjan Mernik (M’95) received the M.Sc. and Ph.D. degrees in computer science from the University of Maribor, Maribor, Slovenia, in 1994 and 1998, respectively. He is currently an Associate Professor in the Faculty of Electrical Engineering and Computer Science, University of Maribor. He is also an Adjunct Associate Professor in the Department of Computer and Information Sciences, University of Alabama, Birmingham. His research interests include programming languages, compilers, grammar-based systems, grammatical inference, and evolutionary computations. He is a member of ACM and EAPLS. Viljem ¡ Zumer (M’77) is a full Professor in the Faculty of Electrical Engineering and Computer Science, University of Maribor, Maribor, Slovenia. He is the Head of Laboratory for Computer Architecture and Programming Languages and the Head of the Institute of Computer Science as well. His research interests include programming languages and computer architecture.","['ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'december', 'self', 'adapting', 'control', 'parameters', 'differential', 'evolution', 'comparative', 'study', 'numerical', 'benchmark', 'problems', 'brest', 'member', 'ieee', 'greiner', 'mernik', 'member', 'ieee', 'zumer', 'member', 'ieee', 'abstract', 'describe', 'efficient', 'technique', 'adapting', 'control', 'parameter', 'settings', 'associated', 'differential', 'evolution', 'algorithm', 'used', 'many', 'practical', 'cases', 'demonstrated', 'convergence', 'properties', 'control', 'parameters', 'kept', 'fixed', 'entire', 'evolutionary', 'process', 'easy', 'task', 'set', 'control', 'parameters', 'present', 'algorithm', 'version', 'algorithm', 'obtaining', 'self', 'adaptive', 'control', 'parameter', 'settings', 'performance', 'numerical', 'benchmark', 'problems', 'results', 'show', 'algorithm', 'self', 'adaptive', 'control', 'parameter', 'settings', 'least', 'comparable', 'standard', 'algorithm', 'evolutionary', 'algorithms', 'literature', 'considering', 'quality', 'solutions', 'obtained', 'index', 'terms', 'adaptive', 'parameter', 'control', 'differential', 'evolution', 'evolutionary', 'optimization', 'introduction', 'differential', 'evolution', 'simple', 'powerful', 'evolutionary', 'algorithm', 'global', 'optimization', 'introduced', 'price', 'storn', 'algorithm', 'become', 'popular', 'used', 'many', 'practical', 'cases', 'demonstrated', 'convergence', 'properties', 'easy', 'eas', 'class', 'stochastic', 'optimization', 'algorithms', 'inspired', 'biology', 'particular', 'biological', 'processes', 'allow', 'populations', 'adapt', 'surrounding', 'environments', 'genetic', 'survival', 'fittest', 'eas', 'advantage', 'types', 'numerical', 'methods', 'require', 'information', 'objective', 'function', 'properties', 'necessary', 'flexible', 'wide', 'problems', 'necessary', 'specify', 'candidate', 'solutions', 'changed', 'generate', 'solutions', 'parameters', 'instance', 'probability', 'mutation', 'tournament', 'size', 'selection', 'population', 'size', 'manuscript', 'received', 'june', 'revised', 'september', 'supported', 'part', 'research', 'computer', 'systems', 'methodologies', 'intelligent', 'authors', 'computer', 'architecture', 'languages', 'laboratory', 'institute', 'computer', 'science', 'faculty', 'electrical', 'engineering', 'computer', 'science', 'university', 'maribor', 'maribor', 'slovenia', 'mail', 'brest', 'uni', 'greiner', 'uni', 'boskovic', 'uni', 'mernik', 'uni', 'zumer', 'uni', 'digital', 'object', 'identifier', 'values', 'parameters', 'determine', 'quality', 'solution', 'obtained', 'efficiency', 'search', 'starting', 'number', 'solutions', 'multipoint', 'algorithm', 'solutions', 'synergistic', 'manner', 'population', 'optimum', 'choosing', 'suitable', 'parameter', 'values', 'task', 'requires', 'previous', 'experience', 'user', 'crucial', 'importance', 'consistent', 'methodology', 'control', 'parameters', 'set', 'predefined', 'ranges', 'stage', 'eas', 'include', 'control', 'parameters', 'part', 'evolving', 'object', 'considered', 'external', 'fixed', 'parameters', 'order', 'achieve', 'optimal', 'convergence', 'parameters', 'evolution', 'process', 'control', 'parameters', 'adjusted', 'heuristic', 'rules', 'account', 'information', 'progress', 'achieved', 'heuristic', 'rules', 'optimal', 'optimization', 'problem', 'fail', 'guarantee', 'convergence', 'problem', 'step', 'development', 'eas', 'include', 'control', 'parameters', 'evolving', 'allow', 'evolve', 'main', 'parameters', 'major', 'forms', 'setting', 'parameter', 'values', 'parameter', 'tuning', 'parameter', 'control', 'former', 'means', 'approach', 'find', 'values', 'parameters', 'running', 'algorithm', 'tuning', 'algorithm', 'values', 'remain', 'fixed', 'run', 'latter', 'means', 'values', 'parameters', 'changed', 'run', 'according', 'eiben', 'change', 'classes', 'deterministic', 'parameter', 'control', 'takes', 'place', 'value', 'parameter', 'deterministic', 'rule', 'adaptive', 'parameter', 'control', 'used', 'place', 'form', 'feedback', 'search', 'used', 'determine', 'direction', 'magnitude', 'change', 'parameter', 'self', 'adaptive', 'parameter', 'control', 'idea', 'evolution', 'evolution', 'used', 'implement', 'self', 'adaptation', 'parameters', 'parameters', 'adapted', 'encoded', 'chromosome', 'individuals', 'undergo', 'genetic', 'operators', 'values', 'encoded', 'parameters', 'lead', 'individuals', 'turn', 'likely', 'survive', 'produce', 'offspring', 'hence', 'parameter', 'values', 'utc', 'ieee', 'xplore_restrictions', 'apply', 'brest', 'self', 'adapting', 'control', 'parameters', 'differential', 'evolution', 'hence', 'natural', 'finding', 'solutions', 'problem', 'tuning', 'algorithm', 'particular', 'problem', 'speaking', 'trying', 'modify', 'values', 'parameters', 'run', 'algorithm', 'taking', 'actual', 'search', 'progress', 'account', 'discussed', 'ways', 'heuristic', 'rule', 'takes', 'feedback', 'current', 'state', 'search', 'parameter', 'values', 'adaptive', 'parameter', 'control', 'assignment', 'process', 'presented', 'second', 'incorporate', 'parameters', 'chromosomes', 'making', 'subject', 'evolution', 'self', 'adaptive', 'parameter', 'control', 'convergence', 'eas', 'self', 'adaptation', 'difficult', 'control', 'parameters', 'changed', 'selection', 'affect', 'evolution', 'particular', 'instance', 'interesting', 'investigate', 'self', 'applied', 'research', 'self', 'reported', 'define', 'type', 'optimization', 'problem', 'optimization', 'methods', 'objective', 'function', 'cases', 'objective', 'function', 'optimization', 'problem', 'minimization', 'task', 'end', 'following', 'investigation', 'restricted', 'minimization', 'problems', 'objective', 'function', 'nonlinear', 'direct', 'search', 'approaches', 'methods', 'choice', 'optimizing', 'function', 'optimization', 'algorithm', 'find', 'need', 'continuous', 'unconstrained', 'function', 'optimization', 'point', 'encoding', 'global', 'optimization', 'continuous', 'spaces', 'creates', 'candidate', 'solutions', 'combining', 'parent', 'individual', 'several', 'individuals', 'population', 'candidate', 'replaces', 'parent', 'fitness', 'parameters', 'factor', 'difference', 'vector', 'crossover', 'control', 'parameter', 'population', 'size', 'easy', 'control', 'parameters', 'kept', 'fixed', 'entire', 'optimization', 'process', 'interaction', 'control', 'parameters', 'performance', 'complex', 'practice', 'user', 'select', 'initial', 'parameter', 'settings', 'problem', 'hand', 'previous', 'experiences', 'literature', 'trial', 'error', 'method', 'used', 'fine', 'tuning', 'control', 'parameters', 'practice', 'optimization', 'run', 'performed', 'multiple', 'times', 'different', 'settings', 'cases', 'finding', 'parameters', 'parameter', 'control', 'technique', 'self', 'adaptation', 'parameters', 'associated', 'evolutionary', 'process', 'main', 'goal', 'produce', 'flexible', 'terms', 'control', 'parameters', 'introduces', 'novel', 'approach', 'self', 'adapting', 'control', 'parameter', 'gives', 'comparisons', 'several', 'adaptive', 'methods', 'set', 'test', 'functions', 'organized', 'follows', 'related', 'described', 'section', 'briefly', 'presented', 'section', 'iii', 'suggested', 'choices', 'fixed', 'settings', 'control', 'parameters', 'literature', 'collected', 'section', 'section', 'version', 'algorithm', 'self', 'adapted', 'control', 'parameters', 'described', 'detail', 'benchmark', 'functions', 'presented', 'section', 'experiments', 'presented', 'section', 'vii', 'comparison', 'self', 'adaptive', 'algorithms', 'algorithms', 'made', 'followed', 'experiment', 'parameter', 'settings', 'algorithm', 'experiments', 'values', 'adaptive', 'presented', 'comparison', 'self', 'adaptive', 'algorithm', 'fuzzy', 'adaptive', 'differential', 'evolution', 'algorithm', 'shown', 'conclusion', 'given', 'section', 'viii', 'related', 'section', 'papers', 'compare', 'instances', 'eas', 'particle_swarm', 'optimization', 'genetic', 'algorithms', 'papers', 'compare', 'different', 'extension', 'original', 'papers', 'deal', 'parameter', 'control', 'end', 'mention', 'papers', 'similar', 'benchmark', 'functions', 'presented', 'price', 'storn', 'simple', 'straightforward', 'strategy', 'compared', 'algorithm', 'particle_swarm', 'optimization', 'pso', 'eas', 'numerical', 'benchmark', 'problems', 'outperformed', 'pso', 'eas', 'terms', 'solution', 'quality', 'benchmark', 'problems', 'benchmark', 'functions', 'similar', 'benchmark', 'functions', 'used', 'ali', 'versions', 'algorithm', 'suggested', 'modifications', 'classical', 'improve', 'efficiency', 'robustness', 'introduced', 'population', 'individuals', 'original', 'population', 'noted', 'notation', 'sets', 'used', 'population', 'set', 'methods', 'next', 'rule', 'calculating', 'control', 'parameter', 'section', 'sun', 'combination', 'algorithms', 'estimation', 'distribution', 'algorithm', 'guide', 'search', 'promising', 'area', 'sampling', 'solutions', 'probability', 'model', 'experimental', 'results', 'demonstrated', 'algorithm', 'outperforms', 'algorithm', 'different', 'conclusions', 'rules', 'choosing', 'control', 'parameters', 'stated', 'control', 'parameters', 'difficult', 'choose', 'hand', 'reported', 'choosing', 'proper', 'control', 'parameters', 'difficult', 'expected', 'liu', 'lampinen', 'reported', 'effectiveness', 'efficiency', 'robustness', 'algorithm', 'sensitive', 'settings', 'control', 'parameters', 'best', 'settings', 'control', 'parameters', 'different', 'different', 'functions', 'function', 'different', 'requirements', 'accuracy', 'exists', 'lack', 'knowledge', 'find', 'values', 'control', 'parameters', 'given', 'function', 'liu', 'lampinen', 'version', 'mutation', 'control', 'parameter', 'crossover', 'control', 'parameter', 'adaptive', 'called', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'december', 'fuzzy', 'adaptive', 'differential', 'evolution', 'fade', 'algorithm', 'controls', 'parameters', 'fade', 'algorithm', 'adapting', 'converges', 'much', 'faster', 'traditional', 'dimensionality', 'problem', 'high', 'problem', 'complicated', 'compare', 'version', 'self', 'adaptive', 'classical', 'algorithm', 'fade', 'algorithm', 'performance', 'comparison', 'made', 'algorithms', 'described', 'following', 'fast', 'fep', 'uses', 'cauchy', 'gaussian', 'mutation', 'primary', 'search', 'operator', 'generalization', 'fep', 'described', 'mutation', 'lévy', 'probability', 'distribution', 'lévy', 'probability', 'distribution', 'extend', 'fep', 'cauchy', 'probability', 'distribution', 'special', 'case', 'lévy', 'probability', 'distribution', 'large', 'variation', 'single', 'mutation', 'enables', 'lévy', 'mutation', 'region', 'search', 'space', 'lévy', 'mutated', 'variables', 'cover', 'range', 'mutated', 'gaussian', 'distributions', 'large', 'variations', 'mutated', 'offspring', 'help', 'local', 'optima', 'references', 'function', 'evaluated', 'similar', 'benchmark', 'test', 'functions', 'suggest', 'stochastic', 'genetic', 'algorithm', 'stochastic', 'strategy', 'employed', 'search', 'space', 'explored', 'region', 'region', 'regions', 'created', 'stochastic', 'method', 'region', 'number', 'children', 'produced', 'random', 'sampling', 'best', 'child', 'chosen', 'represent', 'region', 'variance', 'values', 'least', 'generated', 'children', 'results', 'improved', 'fitness', 'variance', 'values', 'increased', 'codes', 'chromosome', 'representative', 'stochastic', 'region', 'described', 'gaussian', 'distribution', 'single', 'candidate', 'solution', 'conventional', 'presents', 'technique', 'adapting', 'control', 'parameter', 'settings', 'associated', 'genetic', 'operators', 'fuzzy', 'logic', 'controllers', 'coevolution', 'iii', 'algorithm', 'several', 'variants', 'scheme', 'classified', 'notation', 'rand_bin', 'strategy', 'strategy', 'used', 'practice', 'described', 'follows', 'set', 'optimization', 'parameters', 'called', 'individual', 'represented', 'dimensional', 'parameter', 'vector', 'population', 'consists', 'parameter', 'vectors', 'denotes', 'generation', 'population', 'generation', 'number', 'members', 'population', 'changed', 'minimization', 'process', 'initial', 'population', 'chosen', 'uniform', 'distribution', 'according', 'storn', 'price', 'operations', 'mutation', 'crossover', 'selection', 'crucial', 'idea', 'scheme', 'generating', 'trial', 'parameter', 'vectors', 'mutation', 'crossover', 'used', 'generate', 'vectors', 'trial', 'vectors', 'selection', 'vectors', 'survive', 'next', 'generation', 'mutation', 'target', 'vector', 'mutant', 'vector', 'generated', 'according', 'chosen', 'indexes', 'note', 'indexes', 'different', 'running', 'index', 'least', 'real', 'number', 'controls', 'difference', 'vector', 'component', 'mutant', 'vector', 'goes', 'box', 'component', 'set', 'bound', 'value', 'solution', 'used', 'classic', 'crossover', 'target', 'vector', 'mixed', 'mutated', 'vector', 'following', 'scheme', 'yield', 'trial', 'vector', 'evaluation', 'uniform', 'random', 'number', 'crossover', 'constant', 'determined', 'user', 'chosen', 'index', 'ensures', 'gets', 'least', 'element', 'parent', 'vector', 'produced', 'population', 'selection', 'greedy', 'selection', 'scheme', 'used', 'minimization', 'problems', 'trial', 'vector', 'yields', 'cost', 'function', 'value', 'set', 'value', 'control', 'parameter', 'settings', 'algorithm', 'according', 'storn', 'much', 'sensitive', 'choice', 'choice', 'suggested', 'choices', 'storn', 'dimensionality', 'problem', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'brest', 'self', 'adapting', 'control', 'parameters', 'differential', 'evolution', 'fig', 'self', 'adapting', 'encoding', 'liu', 'lampinen', 'used', 'control', 'parameters', 'set', 'values', 'chosen', 'ali', 'obtained', 'optimal', 'value', 'used', 'calculated', 'according', 'following', 'scheme', 'maximum', 'minimum', 'values', 'vectors', 'lower', 'bound', 'used', 'self', 'adaptive', 'control', 'mechanism', 'change', 'control', 'parameters', 'run', 'third', 'control', 'parameter', 'changed', 'run', 'self', 'adapting', 'parameters', 'version', 'algorithm', 'choosing', 'suitable', 'control', 'parameter', 'values', 'problem', 'dependent', 'task', 'trial', 'error', 'method', 'used', 'tuning', 'control', 'parameters', 'requires', 'multiple', 'optimization', 'runs', 'section', 'propose', 'self', 'adaptive', 'approach', 'control', 'parameters', 'individual', 'population', 'extended', 'parameter', 'values', 'fig', 'control', 'parameters', 'adjusted', 'means', 'evolution', 'applied', 'individual', 'level', 'values', 'encoded', 'control', 'parameters', 'lead', 'individuals', 'turn', 'likely', 'survive', 'produce', 'offspring', 'hence', 'parameter', 'values', 'solution', 'fig', 'represented', 'dimensional', 'vector', 'control', 'parameters', 'factors', 'calculated', 'produce', 'factors', 'parent', 'vector', 'uniform', 'random', 'values', 'represent', 'probabilities', 'adjust', 'factors', 'experiments', 'set', 'takes', 'value', 'form', 'random', 'manner', 'takes', 'value', 'obtained', 'mutation', 'performed', 'influence', 'mutation', 'crossover', 'selection', 'operations', 'vector', 'made', 'decision', 'range', 'determined', 'values', 'suggested', 'values', 'authors', 'experimental', 'results', 'literature', 'greater', 'control', 'parameter', 'trial', 'vector', 'generated', 'crossover', 'mutation', 'propose', 'classic', 'control', 'parameters', 'need', 'adjusted', 'user', 'seems', 'self', 'adaptive', 'parameters', 'please', 'note', 'used', 'fixed', 'values', 'benchmark', 'functions', 'selfadaptive', 'algorithm', 'user', 'need', 'adjust', 'additional', 'parameters', 'suitable', 'control', 'parameters', 'different', 'different', 'function', 'problems', 'best', 'values', 'control', 'parameters', 'directions', 'initial', 'values', 'control', 'parameters', 'method', 'algorithm', 'change', 'control', 'parameters', 'probabilities', 'control', 'parameters', 'used', 'next', 'generations', 'made', 'additional', 'experiments', 'combinations', 'values', 'significant', 'difference', 'results', 'values', 'used', 'main', 'approach', 'user', 'need', 'guess', 'values', 'problem', 'dependent', 'rules', 'self', 'adapting', 'control', 'parameters', 'simple', 'version', 'algorithm', 'increase', 'complexity', 'comparison', 'original', 'algorithm', 'benchmark', 'functions', 'benchmark', 'functions', 'used', 'test', 'performance', 'fair', 'comparison', 'number', 'test', 'problems', 'smaller', 'difficult', 'general', 'conclusion', 'test', 'set', 'small', 'potential', 'algorithm', 'optimized', 'chosen', 'set', 'problems', 'bias', 'useful', 'problems', 'interest', 'benchmark', 'functions', 'given', 'denotes', 'dimensionality', 'test', 'problem', 'denotes', 'ranges', 'variables', 'function', 'value', 'global', 'optimum', 'detailed', 'description', 'function', 'given', 'functions', 'divided', 'classes', 'functions', 'local', 'minima', 'many', 'local', 'minima', 'local', 'minima', 'functions', 'high', 'dimensional', 'problems', 'functions', 'unimodal', 'function', 'step', 'function', 'minimum', 'discontinuous', 'function', 'noisy', 'quadratic', 'function', 'functions', 'multimodal', 'functions', 'number', 'local', 'minima', 'increases', 'problem', 'dimension', 'functions', 'low', 'dimensional', 'functions', 'local', 'minima', 'yao', 'described', 'benchmark', 'functions', 'convergence', 'rates', 'algorithms', 'follows', 'unimodal', 'functions', 'convergence', 'rates', 'fep', 'classical', 'cep', 'algorithms', 'interesting', 'final', 'results', 'optimization', 'methods', 'designed', 'optimize', 'unimodal', 'functions', 'multimodal', 'functions', 'final', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'december', 'table', 'benchmark', 'functions', 'results', 'much', 'important', 'algorithm', 'ability', 'poor', 'local', 'optima', 'locate', 'global', 'optimum', 'vii', 'experimental', 'results', 'applied', 'self', 'adaptive', 'original', 'set', 'benchmark', 'optimization', 'problems', 'initial', 'population', 'generated', 'random', 'range', 'specified', 'table', 'used', 'original', 'algorithm', 'decision', 'values', 'values', 'literature', 'comparison', 'self', 'adaptive', 'algorithms', 'fep', 'cep', 'algorithms', 'experiment', 'set', 'parameters', 'fair', 'performance', 'comparison', 'following', 'parameters', 'used', 'experiment', 'population', 'size', 'maximum', 'number', 'generations', 'experiment', 'self', 'adaptive', 'used', 'population', 'size', 'stopping', 'criteria', 'equal', 'number', 'function', 'evaluations', 'average', 'results', 'independent', 'runs', 'summarized', 'table', 'results', 'fep', 'cep', 'algorithms', 'taken', 'tables', 'comparison', 'shows', 'self', 'adaptive', 'gives', 'results', 'benchmark', 'functions', 'fep', 'cep', 'self', 'adaptive', 'algorithm', 'performs', 'perform', 'fep', 'cep', 'compared', 'ifep', 'yao', 'improved', 'fep', 'ifep', 'different', 'mutation', 'operators', 'ifep', 'generates', 'candidate', 'offspring', 'parent', 'cauchy', 'mutation', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'brest', 'self', 'adapting', 'control', 'parameters', 'differential', 'evolution', 'table', 'experimental', 'results', 'averaged', 'independent', 'runs', 'self', 'adaptive', 'fep', 'cep', 'algorithms', 'mean', 'best', 'indicates', 'average', 'minimum', 'values', 'obtained', 'std', 'stands', 'standard', 'deviation', 'test', 'tests', 'self', 'adaptive', 'algorithms', 'gaussian', 'mutation', 'chosen', 'offspring', 'ifep', 'improved', 'fep', 'performance', 'compared', 'self', 'adaptive', 'ifep', 'taken', 'table', 'clear', 'self', 'adaptive', 'ifep', 'many', 'test', 'functions', 'minimum', 'additional', 'experiments', 'high', 'dimensional', 'problems', 'performed', 'algorithm', 'performs', 'point', 'objective', 'function', 'takes', 'minimum', 'point', 'shifted', 'lower', 'bound', 'set', 'zero', 'upper', 'bound', 'set', 'zero', 'experiments', 'carried', 'observed', 'according', 'preliminary', 'results', 'approach', 'influenced', 'function', 'minimum', 'comparison', 'self', 'adaptive', 'algorithms', 'adaptive', 'lep', 'best', 'lévy', 'algorithms', 'experiment', 'used', 'function', 'set', 'parameters', 'following', 'parameters', 'used', 'experiments', 'population', 'size', 'maximum', 'number', 'generations', 'table', 'iii', 'average', 'results', 'independent', 'runs', 'comparison', 'results', 'made', 'clear', 'algorithm', 'performs', 'others', 'average', 'self', 'adaptive', 'performs', 'algorithms', 'unimodal', 'functions', 'self', 'adaptive', 'adaptive', 'lep', 'best', 'lévy', 'function', 'adaptive', 'lep', 'performs', 'self', 'adaptive', 'test', 'shows', 'significant', 'difference', 'please', 'note', 'table', 'self', 'adaptive', 'gives', 'results', 'number', 'generations', 'adaptive', 'lep', 'self', 'adaptive', 'outperform', 'best', 'lévy', 'multimodal', 'functions', 'many', 'local', 'minima', 'clear', 'best', 'results', 'obtained', 'selfadaptive', 'worse', 'adaptive', 'lep', 'best', 'lévy', 'functions', 'functions', 'functions', 'local', 'minima', 'dimension', 'functions', 'small', 'case', 'hard', 'performances', 'individual', 'algorithms', 'algorithms', 'able', 'find', 'optimal', 'solutions', 'functions', 'functions', 'superior', 'algorithm', 'self', 'adaptive', 'adaptive', 'lep', 'best', 'lévy', 'similar', 'algorithm', 'performances', 'functions', 'adaptive', 'lep', 'performed', 'worse', 'function', 'fig', 'shows', 'average', 'best', 'fitness', 'self', 'adaptive', 'algorithm', 'independent', 'runs', 'selected', 'benchmark', 'functions', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'december', 'table', 'iii', 'experimental', 'results', 'averaged', 'independent', 'runs', 'self', 'adaptive', 'adaptive', 'lep', 'best', 'lep', 'algorithms', 'best', 'lévy', 'mean', 'best', 'indicates', 'average', 'minimum', 'values', 'obtained', 'std', 'stands', 'standard', 'deviation', 'test', 'tests', 'self', 'adaptive', 'algorithms', 'fig', 'average', 'best', 'fitness', 'self', 'adaptive', 'algorithm', 'selected', 'benchmark', 'functions', 'results', 'means', 'runs', 'test', 'function', 'test', 'function', 'test', 'function', 'test', 'function', 'discussion', 'control', 'parameter', 'settings', 'algorithm', 'order', 'compare', 'self', 'adaptive', 'version', 'algorithm', 'algorithm', 'best', 'control', 'parameter', 'settings', 'needed', 'algorithm', 'change', 'control', 'parameter', 'values', 'optimization', 'process', 'benchmark', 'function', 'problems', 'algorithm', 'performed', 'taken', 'step', 'set', 'control', 'parameters', 'kept', 'fixed', 'independent', 'runs', 'set', 'next', 'runs', 'etc', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'brest', 'self', 'adapting', 'control', 'parameters', 'differential', 'evolution', 'fig', 'evolutionary', 'processes', 'functions', 'results', 'averaged', 'independent', 'runs', 'test', 'function', 'test', 'function', 'test', 'function', 'test', 'function', 'fig', 'evolutionary', 'processes', 'functions', 'results', 'averaged', 'independent', 'runs', 'test', 'function', 'test', 'function', 'test', 'function', 'test', 'function', 'parameter', 'settings', 'section', 'vii', 'results', 'averaged', 'independent', 'runs', 'selected', 'function', 'problems', 'figs', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'december', 'fig', 'values', 'self', 'adaptive', 'functions', 'plotted', 'best', 'fitness', 'value', 'generation', 'improved', 'test', 'function', 'test', 'function', 'test', 'function', 'test', 'function', 'test', 'function', 'test', 'function', 'function', 'control', 'values', 'fig', 'fig', 'best', 'averaged', 'fitness', 'value', 'function', 'obtained', 'number', 'generation', 'best', 'averaged', 'fitness', 'value', 'function', 'obtained', 'high', 'values', 'results', 'interesting', 'values', 'sensitive', 'parameter', 'mean', 'best', 'depends', 'value', 'values', 'robust', 'parameter', 'mean', 'best', 'depend', 'value', 'parameter', 'tuning', 'requires', 'multiple', 'runs', 'feasible', 'solution', 'problems', 'best', 'control', 'parameter', 'settings', 'problem', 'dependent', 'selfadaptive', 'need', 'multiple', 'runs', 'adjust', 'control', 'parameters', 'self', 'adaptive', 'much', 'problem', 'independent', 'values', 'self', 'adaptive', 'self', 'adaptive', 'values', 'changed', 'evolutionary', 'process', 'evolutionary', 'process', 'fitness', 'important', 'best', 'fitness', 'selected', 'functions', 'values', 'figs', 'best', 'fitness', 'value', 'generation', 'improved', 'example', 'values', 'functions', 'lower', 'function', 'greater', 'function', 'knowledge', 'initialization', 'self', 'adaptive', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'brest', 'self', 'adapting', 'control', 'parameters', 'differential', 'evolution', 'fig', 'values', 'self', 'adaptive', 'functions', 'plotted', 'best', 'fitness', 'value', 'generation', 'improved', 'test', 'function', 'test', 'function', 'test', 'function', 'test', 'function', 'table', 'experimental', 'results', 'averaged', 'independent', 'runs', 'self', 'adaptive', 'different', 'initial', 'values', 'selected', 'benchmark', 'functions', 'interesting', 'comparison', 'values', 'control', 'parameters', 'figs', 'figs', 'function', 'values', 'control', 'parameters', 'obtained', 'self', 'adaptive', 'algorithm', 'similar', 'values', 'obtained', 'experiment', 'section', 'vii', 'parameter', 'values', 'obtained', 'tuning', 'hence', 'many', 'runs', 'experiment', 'section', 'changing', 'control', 'parameter', 'optimization', 'process', 'initialization', 'initial', 'vector', 'population', 'chosen', 'arises', 'question', 'choose', 'initial', 'control', 'parameters', 'self', 'adaptive', 'encoded', 'individuals', 'fig', 'performed', 'additional', 'experiment', 'determine', 'initial', 'values', 'self', 'adaptive', 'table', 'shows', 'results', 'obtained', 'additional', 'experiment', 'selected', 'benchmark', 'functions', 'results', 'differ', 'test', 'show', 'significant', 'differences', 'selfadaptive', 'sensitive', 'initial', 'values', 'advantage', 'algorithm', 'comparison', 'self', 'adaptive', 'fuzzy', 'adaptive', 'differential', 'evolution', 'algorithm', 'liu', 'lampinen', 'introduce', 'version', 'differential', 'evolution', 'algorithm', 'adaptive', 'control', 'parameters', 'fuzzy', 'adaptive', 'differential', 'evolution', 'fade', 'algorithm', 'uses', 'fuzzy', 'logic', 'controllers', 'adapt', 'search', 'parameters', 'mutation', 'operation', 'crossover', 'operation', 'control', 'inputs', 'incorporate', 'relative', 'objective', 'function', 'values', 'individuals', 'successive', 'generations', 'fade', 'algorithm', 'tested', 'set', 'standard', 'test', 'functions', 'outperforms', 'original', 'dimensionality', 'problem', 'high', 'ten', 'benchmark', 'functions', 'used', 'benchmark', 'functions', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'evolutionary', 'computation', 'vol', 'december', 'table', 'experimental', 'results', 'averaged', 'independent', 'runs', 'self', 'adaptive', 'fuzzy', 'adaptive', 'algorithms', 'mean', 'best', 'indicates', 'average', 'minimum', 'values', 'obtained', 'std', 'stands', 'standard', 'deviation', 'test', 'tests', 'self', 'adaptive', 'algorithms', 'following', 'parameters', 'used', 'experiment', 'parameter', 'settings', 'used', 'dimensionality', 'problem', 'population', 'size', 'maximum', 'number', 'generations', 'algorithms', 'approach', 'adapt', 'mutation', 'control', 'parameter', 'crossover', 'control', 'parameter', 'average', 'results', 'independent', 'runs', 'summarized', 'table', 'experimental', 'results', 'suggest', 'algorithm', 'performs', 'fade', 'algorithm', 'test', 'obtained', 'results', 'section', 'self', 'adaptive', 'method', 'solving', 'benchmark', 'functions', 'results', 'values', 'control', 'parameters', 'viii', 'conclusion', 'choosing', 'proper', 'control', 'parameters', 'difficult', 'task', 'best', 'settings', 'control', 'parameters', 'different', 'different', 'functions', 'self', 'adaptive', 'method', 'attempt', 'determine', 'values', 'control', 'parameters', 'self', 'adaptive', 'algorithm', 'implemented', 'tested', 'benchmark', 'optimization', 'problems', 'taken', 'literature', 'results', 'show', 'algorithm', 'self', 'adaptive', 'control', 'parameter', 'settings', 'least', 'comparable', 'standard', 'algorithm', 'evolutionary', 'algorithms', 'literature', 'considering', 'quality', 'solutions', 'found', 'algorithm', 'gives', 'results', 'comparison', 'fade', 'algorithm', 'self', 'adaptive', 'method', 'incorporated', 'existing', 'algorithms', 'used', 'solve', 'problems', 'different', 'optimization', 'areas', 'experiment', 'different', 'population', 'sizes', 'population', 'size', 'adaptive', 'remains', 'future', 'authors', 'source', 'code', 'benchmark', 'functions', 'authors', 'yao', 'associate', 'editor', 'improve', 'simulation', 'studies', 'differential', 'evolution', 'strategy', 'performed', 'code', 'http', 'www', 'icsi', 'berkeley', 'edu', 'storn', 'code', 'html', 'references', 'storn', 'price', 'differential', 'evolution', 'simple', 'efficient', 'heuristic', 'global', 'optimization', 'continuous', 'spaces', 'global', 'vol', 'liu', 'lampinen', 'setting', 'control', 'parameter', 'differential', 'evolution', 'method', 'proc', 'int', 'conf', 'soft', 'computing', 'mendel', 'fogel', 'michalewicz', 'eds', 'handbook', 'evolutionary', 'computation', 'york', 'inst', 'univ', 'press', 'self', 'adapting', 'evolutionary', 'parameters', 'encoding', 'aspects', 'combinatorial', 'optimization', 'problems', 'lecture', 'notes', 'computer', 'science', 'eds', 'switzerland', 'springer', 'verlag', 'vol', 'proc', 'evol_comput', 'combinatorial', 'optimization', 'eiben', 'michalewicz', 'parameter', 'control', 'evolutionary', 'algorithms', 'ieee', 'trans', 'evol_comput', 'vol', 'jul', 'parameter', 'control', 'agent', 'model', 'proc', 'congr', 'evolutionary', 'computation', 'jul', 'eiben', 'introduction', 'evolutionary', 'computing', 'natural', 'computing', 'berlin', 'germany', 'springer', 'verlag', 'deb', 'population', 'algorithm', 'real', 'parameter', 'optimization', 'soft', 'computing', 'fusion', 'methodologies', 'applications', 'vol', 'online', 'available', 'http', 'com', 'index', 'ali', 'population', 'set', 'global', 'optimization', 'algorithms', 'modifications', 'numerical', 'studies', 'comput', 'oper', 'res', 'vol', 'evolution', 'strategies', 'alternative', 'evolutionary', 'algorithm', 'lecture', 'notes', 'computer', 'science', 'eds', 'germany', 'springer', 'verlag', 'vol', 'proc', 'artificial', 'evolution', 'conf', 'adaptive', 'intelligence', 'evolution', 'strategies', 'application', 'examples', 'self', 'adaptive', 'inf', 'sci', 'vol', 'davis', 'handbook', 'genetic', 'algorithms', 'york', 'van', 'adapting', 'crossover', 'evolutionary', 'algorithms', 'proc', 'conf', 'evolutionary', 'programming', 'fogel', 'eds', 'analysis', 'convergence', 'evolutionary', 'algorithm', 'self', 'adaptation', 'stochastic', 'function', 'evol_comput', 'vol', 'yao', 'framework', 'computation', 'evolutionary', 'algorithms', 'artificial', 'intell', 'vol', 'liu', 'lampinen', 'fuzzy', 'adaptive', 'differential', 'evolution', 'algorithm', 'soft', 'computing', 'fusion', 'methodologies', 'applications', 'vol', 'online', 'available', 'http', 'com', 'index', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'brest', 'self', 'adapting', 'control', 'parameters', 'differential', 'evolution', 'adaptive', 'parameter', 'control', 'differential', 'evolution', 'proc', 'int', 'conf', 'soft', 'computing', 'mendel', 'storn', 'price', 'differential', 'evolution', 'simple', 'efficient', 'adaptive', 'scheme', 'global', 'optimization', 'continuous', 'spaces', 'berkeley', 'tech', 'rep', 'online', 'available', 'edu', 'article', 'html', 'comparative', 'study', 'differential', 'evolution', 'particle_swarm', 'optimization', 'evolutionary', 'algorithms', 'numerical', 'benchmark', 'problems', 'proc', 'ieee', 'congr', 'evolutionary', 'computation', 'jun', 'sun', 'zhang', 'evolutionary', 'algorithm', 'global', 'optimization', 'sci', 'vol', 'price', 'storn', 'differential', 'evolution', 'simple', 'evolution', 'strategy', 'fast', 'optimization', 'tools', 'vol', 'apr', 'parameter', 'study', 'differential', 'evolution', 'switzerland', 'feb', 'online', 'available', 'http', 'www', 'org', 'online', 'yao', 'liu', 'lin', 'evolutionary', 'programming', 'made', 'faster', 'ieee', 'trans', 'evol_comput', 'vol', 'jul', 'yao', 'evolutionary', 'programming', 'mutations', 'lévy', 'probability', 'distribution', 'ieee', 'trans', 'evol_comput', 'vol', 'feb', 'robust', 'stochastic', 'genetic', 'algorithm', 'global', 'numerical', 'optimization', 'ieee', 'trans', 'evol_comput', 'vol', 'oct', 'adaptive', 'genetic', 'operators', 'coevolution', 'fuzzy', 'ieee', 'trans', 'evol_comput', 'vol', 'apr', 'global', 'optimization', 'lecture', 'notes', 'computer', 'science', 'germany', 'verlag', 'vol', 'brest', 'received', 'degrees', 'computer', 'science', 'university', 'maribor', 'maribor', 'slovenia', 'laboratory', 'computer', 'architecture', 'programming', 'languages', 'university', 'maribor', 'assistant', 'professor', 'research', 'interests', 'include', 'evolutionary', 'computing', 'artificial', 'intelligence', 'optimization', 'fields', 'programming', 'languages', 'programming', 'parallel', 'distributed', 'computing', 'research', 'brest', 'member', 'acm', 'greiner', 'received', 'degrees', 'computer', 'science', 'university', 'maribor', 'maribor', 'slovenia', 'assistant', 'faculty', 'electrical', 'engineering', 'computer', 'science', 'university', 'maribor', 'research', 'interests', 'include', 'object', 'programming', 'languages', 'computer', 'architecture', 'information', 'systems', 'received', 'degree', 'assistant', 'faculty', 'electrical', 'engineering', 'computer', 'science', 'university', 'maribor', 'maribor', 'slovenia', 'worked', 'laboratory', 'computer', 'architecture', 'programming', 'languages', 'university', 'maribor', 'research', 'interests', 'include', 'programming', 'evolutionary', 'algorithms', 'search', 'algorithms', 'information', 'zero', 'sum', 'mernik', 'received', 'degrees', 'computer', 'science', 'university', 'maribor', 'maribor', 'slovenia', 'associate', 'professor', 'faculty', 'electrical', 'engineering', 'computer', 'science', 'university', 'maribor', 'associate', 'professor', 'department', 'computer', 'information', 'sciences', 'university', 'research', 'interests', 'include', 'programming', 'languages', 'systems', 'evolutionary', 'computations', 'member', 'acm', 'zumer', 'full', 'professor', 'faculty', 'electrical', 'engineering', 'computer', 'science', 'university', 'maribor', 'maribor', 'slovenia', 'laboratory', 'computer', 'architecture', 'programming', 'languages', 'institute', 'computer', 'science', 'research', 'interests', 'include', 'programming', 'languages', 'computer', 'architecture']"
10,4,1,"Particle Swarm Optimization James Kennedy' and Russell Eberhart2 Washington, DC 20212 kennedyjim @bls .gov 2Purdue School of Engineering and Technology Indianapolis, IN 46202-5160 eberhart @ engr.iupui .edu 1 ABSTRACT A concept for the optimization of nonlinear functions using particle swarm methodology is introduced. The evolution of several paradigms is outlined, and an implementation of one of the paradigms is discussed. Benchmark testing of the paradigm is described, and applications, including nonlinear function optimization and neural network training, are proposed. The relationships between particle swarm optimization and both artificial life and genetic algorithms are described, 1 INTRODUCTION This paper introduces a method for optimization of continuous nonlinear functions. The method was discovered through simulation of a simplified social model; thus the social metaphor is discussed, though the algorithm stands without metaphorical support. This paper describes the particle swarm optimization concept in terms of its precursors, briefly reviewing the stages of its development from social simulation to optimizer. Discussed next are a few paradigms that implement the concept. Finally, the implementation of one paradigm is discussed in more detail, followed by results obtained from applications and tests upon which the paradigm has been shown to perform successfully. Particle swarm optimization has roots in two main component methodologies. Perhaps more obvious are its ties to artificial life (A-life) in general, and to bird flocking, fish schooling, and swarming theory in particular. It is also related, however, to evolutionary computation, and has ties to both genetic algorithms and evolutionary programming. These relationships are briefly reviewed in the paper. Particle swarm optimization as developed by the authors comprises a very simple concept, and paradigms can be implemented in a few lines of computer code. It requires only primitive mathematical operators, and is computationally inexpensive in terms of both memory requirements and speed. Early testing has found the implementation to be effective with several kinds of problems. This paper discusses application of the algorithm to the training of artificial neural network weights, Particle swarm optimization has also been demonstrated to perform well on genetic algorithm test functions. This paper discusses the performance on Schaffer's f6 function, as described in Davis [l]. 2 SIMULATING SOCIAL BEHAVIOR A number of scientists have created computer simulations of various interpretations of the movement of organisms in a bird flock or fish school. Notably, Reynolds [8] and Heppner and Grenander [4] presented simulations of bird flocking. Reynolds was intrigued by the aesthetics of bird flocking choreography, and Heppner, a zoologist, was interested in discovering the underlying rules that enabled large numbers of birds to flock synchronously, often changing direction suddenly, scattering and regrouping, etc. Both of these scientists had the insight that local processes, such as those modeled by 0-7803-2768-3/95/$4.00 0 1995 IEEE 1942 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:22 UTC from IEEE Xplore. Restrictions apply. cellular automata, might underlie the unpredic:table group dynamics of bird social behavior. Both models relied heavily on manipulation of inter-individual distances; that is, the synchrony of flocking behavior was thought to be a function of birds’ efforts to maintain an optimum distance between themselves and their neighbors. It does not seem a too-large leap of logic to suppose that some same rules underlie animal social behavior, including herds, schools, and flocks, and that of humans. As sociobiologist E. 0. Wilson [9] has written, in reference to fish schooling, “In theory at least, individual members of the school can profit from the discoveries and previous experience of all other members of the school during the search for food. This advantage can become decisive, outweighing the disadvantages of competition for food items, whenever the resource is unpedictably distributed in patches” (p.209). This statement suggests that social sharing of information among conspeciates offers an evolutionary advantage: this hypothesis was fundamental to the developnmt of particle swarm optimization. One motive for developing the simdation was to model human social behavior, which is of course not identical to fish schooling or bird flocking. Che important difference is its abstractness. Birds and fish adjust their physical movement to avoid prechtors, seek food and mates, optimize environmental parameters such as temperature, etc. Humans; adjust not only physical movement but cognitive or experiential variables as well. We do not usually walk in step and tum in unison (though some fascinating research in human conformity shows that we are capable of it); rather, we tend to adjust our beliefs and attitudes to conform with those cd our social peers. This is a major distinction in terms of contriving a computer simulation, for at least one obvious reason: collision. Two individuals can hold identical attitudes and beliefs without banging together, but two birds cannot occupy the same position in space without colliding. It seems reasonable, in discussing human social behavior, to map thie concept of change into the birdfish analog of movement. This is consistent with the classic Aristotelim view of qualitative and quantitative change as types of movement. Thus, besides moving through tlhree-dimensional physical space, and avoiding collisions, humans change in abstract multidimensional space, colision-free. Physical space of course affects informational inputs, but it is arguably a trivial component of psychological experience. Humans learn to avoid physical collision by an early age, hit navigation of n-dimensional psychosocial space requires decades of practice - and many of us never seem to acquire quite all the skills we need! 3 PRECURSORS: THE ETIOLOGY OF PARTICLE SWARM OPTIMIZATION The particle swarm optimizer is probably kcst presented by explaining its conceptual development. As mentioned above, the algorithm began as a simulation of a simplified social milieu. Agents were thought of as collision-proof birds, and the original intent was to graphically simulate the graceful but unpredictable choreography of a bird flock. 3.1 Nearest Neighbor Velocity Matching and Craziness A satisfying simulation was rather quickly written, which relied on two props: nearest-neighbor velocity matching and “craziness.” A populartion of birds was randomly initialized with a position for each on a torus pixel grid and with X and Y velocities. At each iteration a loop in the program determined, for each agent (a more appropriate term than bird), which other agent was its nearest neighbor, then assigned that agent’s X and Y velocities to the agent in focus. Essentially this simple d e created a synchrony of movement. Unfortunately, the flock quickly settled on ii lunanimous, unchanging direction. Therefore, a stochastic variable called craziness was introduced. At each iteration some change was added to randomly 1943 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:22 UTC from IEEE Xplore. Restrictions apply. chosen X and Y velocities. This i n t r d u d enough variation into the system to give the simulation an interesting and “lifelike” appearance, though of course the variation was wholly artiticial. 3.2 The Cornfield Vector Heppner’s bird simulations had a feature which introduced a dynamic force into the simulation. His birds flocked around a “roost,” a position on the pixel screen that attracted them until they finally landed there. This eliminated the need for a variable like craziness, as the simulation took on a lie of its own. While the idea of a roost was intriguing, it led to another question which seemed even more stimulating. Heppner’s birds knew where their roost was, but in real life birds land on any tree or telephone wire that meets their immediate needs. Even more importantly, bird flocks land where there is food. How do they find food? Anyone who has ever put out a bird feeder knows that within hours a great number of birds will likely find it, even though they had no previous knowledge of its location, appearance, etc. It seems possible that something about the flock dynamic enables members of the flock to capitalize on one another’s knowledge, as in Wilson’s quote above. The second variation of the simulation defined a “comfield vector,” a two-dimensional vector of XY coordinates on the pixel plane. Each agent was programmed to evaluate its present position in terms of the equation: Eval= J - 4w+ so that at the (100,100) position the value was zero. Each agent “remembered” the best value and the XY position which had resulted in that value. The value was called pbest[] and the positions pbestx[] and pbestyl] (brackets indicate that these are arrays, with number of elements = number of agents). As each agent moved through the pixel space evaluating positions, its X and Y velocities were adjusted in a simple manner. If it was to the right of its pbestx, then its X velocity (call it vx) was adjusted negatively by a random amount weighted by a parameter of the system: vx[]=vx[] - rand()*p-increment. If it was to the left of pbestx, rand()*p-increment was added to vx[]. Similarly, Y velocities vy[] were adjusted up and down, depending on whether the agent was above or below pbesty. Secondly, each agent “knew” the globally best position that one member of the flock had found, and its value. This was accomplished by simply assigning the array index of the agent with the best value to a variable called gbest, so that pbestx[gbest] was the group’s best X position, and pbesty[gbest] its best Y position, and this information was available to all flock members. Again, each member’s vx[] and vy[] were adjusted as follows, where g-increment is a system parameter. ifpresentx[l> pbestx[gbest] then vx[] = vx[] - rand() *g-increment ifpresentx[] < pbestx[gbest] then vx[] = vx[] + rand() *g-increment ifpresenty[] > pbesty[gbestl then vy[] = vy[] - rand() *g-increment ifpresenty[l< pbesty[gbestl then vy[] = vy[] + rand() *g-increment In the simulation, a circle marked the (100,100) position on the pixel field, and agents were represented as colored points. Thus an observer could watch the flocking agents circle around until they found the simulated cornfield. The results were surprising. With p-increment and g-increment set relatively high, the flock seemed to be sucked violently into the cornfield. In a very few iterations the entire flock, usually 15 to 30 individuals, was seen to be clustered within the tiny circle surrounding the goal. With p-increment and g-increment set low, the flock swirled around the goal, realistically approaching it, swinging out rhythmically with subgroups synchronized, and finally “landing” on the target. 1944 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:22 UTC from IEEE Xplore. Restrictions apply. 33 Eliminating Ancillary Variables Once it was clear that the paradigm could og~imizesi mple, two-dimensional, linear functions, it was important to identify the parts of the paradip that are necessary for the task. For instance, the authors quickly found that the algorithm worlts just as well, and looks just as realistic, without craziness, so it was removed. Next it was shown that optimization actually occurs slightly faster when nearest neighbor velocity matching is removed, though the visual effect is changed. Theflock is now a swam, but it is well able to find the codielidl. The variables pbest and gbest and their increments are both necessary. Conceptually pbest resembles autobiographical memory, as each individual remembers its own experience (though only one fact about it), and the velocity adjustment associarted with pbest has been called “simple nostalgia” in that the individual tends to return to the place thiat most satisfied it in the past. On the other hand, gbest is conceptually similar to publicized knowledge, or a group norm or standard, which individuals seek to attain. In the simulations, a high value of princrement relative to g-increment results in excessive wandering of isolated individuals through the problem space, while the reverse (relatively high g-increment) results in the flock rushing prematurely toward local minima. Approximately equal values of the two increments Seem to result in the most effective search of the problem domain. 3.4 Multidimensional Search W e th e algorithm seems to impressively ”del a flock searching for a cornfield, most interesting optimization problems are neither linear nor two-dimensional. Since one of the authors’ objectives is to model social behavior, which is multidimensional and collision-free, it seemed a simple step to change presentx and presenty (and of course vx[] and vy[n from onedimensional arrays to D x N matrices, where D is any number of dimensions and N is the number of agents. Multidimensional experiments were performed, using a nonlinear, multidimensional problem: adjusting weights to train a feedforward multilayer pe:nceptron neural network (NN). One of the authors’ first experiments involved training weights for a tluee-layer NN solving the exclusive-or (XOR) problem. This problem requires two input and one output processing elements (PES), plus some number of hidden PES. Besides connections from the piwious layer, the hidden and output PE layers each has a bias PE associated with it. Thus a 2,3,1 NN requires optimization of 13 parameters. This problem was approached by flying the agents through 13-dimensional space until an average sum-squared error per PE criterion was met. The algorithm performed very well on this problem. The thirteendimensional XOR network was trained, to am e < 0.05 criterion, in an average of 30.7 iterations with 20 agents. More complex NN architectures, look longer of course, but results, discussed in Section 5: Results and Early Applications, were still very good. 3.5 Acceleration by Distance Though the algorithm worked well, there WiU; something aesthetically displeasing and hard to understand about it. Velocity adjustments were based on a crude inequality test: ifpresentx > bestx, make it smaller; ifpresentx c bestx, make it bigger. Some experimentation revealed that further revising the algorithm made it easier to und~eirstanda nd improved its performance. Rather than simply testing the sign of the inequality, velocities were adjusted according to their difference, per dimension, from best locations: vx[][] = vx[][] + rand()* p_increment*(pbt?stx[][]- presentx[l[l) 1945 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:22 UTC from IEEE Xplore. Restrictions apply. (note the parameters vx and presentx have two sets of brackets because they are now matrices of agents by dimensions; increment and bestx could also have a g instead of p at their beginnings.) 3.6 Current Simplified Version It was soon realized that there is no good way to guess whether p- or g-increment should be larger. Thus, these terms were also stripped out of the algorithm. The stochastic factor was multiplied by 2 to give it a mean of 1, so that agents would “overfly” the target about half the time. This version outperforms the previous versions. Further research will show whether there is an optimum value for the constant currently set at 2, whether the value should be evolved for each problem, or whether the value can be determined from some knowledge of a particular problem. The current simplified particle swarm optimizer now adjusts velocities by the following formula: vxLlLl= VXLILl + 2 * rand() * (pbestx[][] - presentx[]fl) + 2 * rand() * (pbestxfllgbesfl - presentxflf]) 3.7 Other Experiments Other variations on the algorithm were tried, but none seemed to improve on the current simplified version. For instance, it is apparent that the agent is propelled toward a weighted average of the two “best” points in the problem space. One version of the algorithm reduced the two terms to one, which was the point on each dimension midway between pbest and gbest positions. This version had an unfortunate tendency, however, to converge on that pint whether it was an optimum or not. Apparently the two stochastic “kicks” are a necessary part of the process. Another version considered using two types of agents, conceived as “explorers” and “settlers.” Explorers used the inequality test, which tended to cause them to overrun the target by a large distance, while settlers used the difference term. The hypothesis was that explorers would extrapolate outside the “known” region of the problem domain, and the settlers would hill-climb or micro-explore regions that had been found to be good. Again, this method showed no improvement over the current simplified version. Occam’s razor slashed again. Another version that was tested removed the momentum of vx[][]. The new adjustment was: V X i l L l = 2 * rand() * (pbestxflf] - presentx[lfl ) + 2 * rand() * (pbestx[][gbestJ - presentx[l[] ) This version, though simplified, tumed out to be quite ineffective at finding global optima. 4 SWARMS AND PARTICLES As was described in Section 3.3, it became obvious during the simplification of the paradigm that the behavior of the population of agents is now more like a swarm than a flock. The term swarm has a basis in the literature. In particular, the authors use the term in accordance with a paper by Millonas [6], who developed his models for applications in artificial life, and articulated five basic principles of swarm intelligence. First is the proximity principle: the population should be able to carry out simple space and time computations. Second is the quality principle: the population should be able to respond to quality factors in the environment. Third is the principle of diverse response: the population should not commit its activities along excessively narrow channels. Fourth is the principle of stability: the population should not change its mode of behavior every time the environment changes. Fifth is the 1946 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:22 UTC from IEEE Xplore. Restrictions apply. principle of adaptability: the population must be able to change behavior mode when it’s worth the computational price. Note that principles four and five are the opposite sides of the same coin. The particle swarm optimization concept and paradigm presented in this paper seem to adhere to all five principles. Basic to the paradigm are n-dimensional space calculations carried out over a series of time steps. The population is responding to the quality factors pbest and gbest. The allocation of responses between pbest and gbest ensures ia diversity of response. The population changes its state (mode of behavior) only when gbest changes, thus adhering to the principle of stability. The population is adaptive because it does change when gbest changes. The term particle was selected as a compromise. While it could be argued that the population members are mass-less and volume-less, anid thus could be called “points,” it is felt that velocities and accelerations are more appropriately applied to particles, even if each is defined to have arbitrarily small mass and volume. Further, Reeves [7] discusses particle systems consisting of clouds of primitive particles as models of diffuse obje:cts such as clouds, frre and smoke. Thus the label the authors have chosen to represent the optimization concept is particle swarm. 5 TESTS AND EARLY APPLICATIONS OF THE OPTIMIZER The paradigm has been tested using systemiatic benchmark tests as well as observing its performance on applications that are known to be difificult. The neural-net application described in Section 3.4, for instance, showed that the particle swarm optimizer could train NN weights as effectively as the usual error backpropagation method. The particle swarm optimizer has also been used to train a neural network to classify the Fisher Iris Data Set 1[3]. Again, the optimizer trained the weights as effectively as the backpropagation method. Over a series of ten training sessions, the particle swarm optimizer paradigm required an average of 284 epochs,, Intriguing informal indications are that the Irihed weights found by particle swarms sometimes generalize from a training set to a test set better than solutions found by gradient descent. For example, on a data set representing electroencephalogram spike waveforms and false positives, a backpropagation NN achieved 89 percent correct on the test data [2]. The particle swarm optimizer was able to train the network so as to achieve 92 percent correct. The particle swarm optimizer was compareid to a benchmark for genetic algorithms in Davis [ 11: the extremely nonlinear Schaffer f6 function. This function is very difficult to optimize, as the highly discontinuous data surface features many 1oc:al optima. The particle swarm paradigm found the global optimum each run, and appears to approximite the results reported for elementary genetic algorithms in Chapter 2 of [ 11 in terms of the number of evaluations required to reach certain performance levels. 6 CONCLUSIONS Particle swarm optimization is an extremely wimple algorithm that seems to be effective for optimizing a wide range of functions. We view it as a ]mid-level form of A-life or biologically derived algorithm, occupying the space in nature between evollutionary search, which requires eons, and neural processing, which occurs on the order of milliseconds. Social optimization occurs in the time frame of ordinary experience - in fact, it is ordinary experieince. In addition to its ties with A-life, particle swarm optimization has obvious ties with evolutioiniuy computation. Conceptually, it seems to lie somewhere between genetic algorithms and evolutionary programming. It is highly dependent on stochastic processes, like evolutionary programming. The adjustment toward pbest and gbest by the particle swarm optimizer is conceptually similar to the crossover operation utilized by genetic algorithms. It uses the concept ofjimess, as do aU evolutionary computation paradigms. 1947 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:22 UTC from IEEE Xplore. Restrictions apply. Unique to the concept of particle swarm optimization is flying potential solutions through hyperspace, accelerating toward “better” solutions. Other evolutionary computation schemes operate directly on potential solutions which are represented as locations in hyperspace. Much of the success of particle swarms seems to lie in the agents’ tendency to hurtle past their target. Holland’s chapter on the “optimum allocation of trials” [5] reveals the delicate balance between conservative testing of known regions versus risky exploration of the unknown. It appears that the current version of the paradigm allocates trials nearly optimally. The stochastic factors allow thorough search of spaces between regions that have been found to be relatively good, and the momentum effect caused by nmhfying the extant velocities rather than replacing them results in overshooting, or exploration of unknown regions of the problem domain. The authors of this paper are a social psychologist and an electrical engineer. The particle swarm optimizer serves both of these fields equally well. Why is social behavior so ubiquitous in the animal kingdom? Because it optimizes. What is a good way to solve engineering optimization problems? Modeling social behavior. Much further research remains to be conducted on this simple new concept and paradigm. The goals in developing it have been to keep it simple and robust, and we seem to have succeeded at that. The algorithm is written in a very few lines of code, and requires only specification of the problem and a few parameters in order to solve it. This algorithm belongs ideologically to that philosophical school that allows wisdom to emerge rather than trying to impose it, that emulates nature rather than trying to control it, and that seeks to make things simpler rather than more complex. Once again nature has provided us with a technique for processing information that is at once elegant and versatile. ACKNOWLEDGMENTS Portions of this paper are adapted from a chapter on particle swarm optimization in a book entitled Computational Intelligence PC Tools, to be published in early 1996 by Academic Press Professional (APP). The permission of APP to include this material is gratefully acknowledged. The input and comments of Roy Dobbins and Pat Simpson are appreciated. REFERENCES [l] Davis, L., Ed. (1991). Handbook of Genetic Algorithms. Van Nostrand Reinhold, New York, NY. [2] Eberhart, R. C. and R. W Dobbins (1990). Neural Network PC Tools: A Practical Guide. Academic Press, San Diego, CA. [3] Fisher, R.A. (1936). The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7: 179-188. [4] Heppner, F. and U. Grenander (1990). A stochastic nonlinear model for coordinated bird flocks. In S . Krasner, Ed., The Ubiquity of Chaos. AAAS Publications, Washington, DC. [5] Holland, J. H. (1992). Adaptation in Natural and Artijlcial Systems. MIT Press, Cambridge, MA. [6] Millonas, M. M. (1994). Swarms, phase transitions, and collective intelligence. In C. G. Langton, Ed., Artijicial Life III. Addison Wesley, Reading, MA. [7] Reeves, W. T. (1983). Particle systems - a technique for modeling a class of fuzzy objects. ACM Transactions on Graphics, 2(2):91-108. [SI Reynolds, C. W. (1987). Flocks, herds and schools: a distributed behavioral model. Computer Graphics, 2 1 (4):25-34. [9] Wilson, E.O. (1975). Sociobiology: The new synthesis. Belknap Press, Cambridge, hlA. 1948","['particle_swarm', 'optimization', 'washington', 'school', 'engineering', 'technology', 'edu', 'abstract', 'concept', 'optimization', 'nonlinear', 'functions', 'particle_swarm', 'methodology', 'introduced', 'evolution', 'several', 'paradigms', 'outlined', 'implementation', 'paradigms', 'discussed', 'benchmark', 'testing', 'paradigm', 'described', 'applications', 'including', 'nonlinear', 'function', 'optimization', 'neural', 'network', 'training', 'particle_swarm', 'optimization', 'artificial', 'life', 'genetic', 'algorithms', 'described', 'introduction', 'introduces', 'method', 'optimization', 'continuous', 'nonlinear', 'functions', 'method', 'discovered', 'simulation', 'simplified', 'social', 'model', 'social', 'metaphor', 'discussed', 'algorithm', 'stands', 'support', 'describes', 'particle_swarm', 'optimization', 'concept', 'terms', 'briefly', 'stages', 'development', 'social', 'simulation', 'optimizer', 'discussed', 'next', 'paradigms', 'implement', 'concept', 'implementation', 'paradigm', 'discussed', 'detail', 'followed', 'results', 'obtained', 'applications', 'tests', 'paradigm', 'shown', 'perform', 'particle_swarm', 'optimization', 'main', 'component', 'methodologies', 'obvious', 'artificial', 'life', 'life', 'general', 'bird', 'flocking', 'fish', 'theory', 'particular', 'related', 'evolutionary', 'computation', 'genetic', 'algorithms', 'evolutionary', 'programming', 'briefly', 'reviewed', 'particle_swarm', 'optimization', 'developed', 'authors', 'simple', 'concept', 'paradigms', 'implemented', 'lines', 'computer', 'code', 'requires', 'mathematical', 'operators', 'terms', 'memory', 'requirements', 'speed', 'testing', 'found', 'implementation', 'effective', 'several', 'kinds', 'problems', 'discusses', 'application', 'algorithm', 'training', 'artificial', 'neural', 'network', 'weights', 'particle_swarm', 'optimization', 'demonstrated', 'perform', 'genetic', 'algorithm', 'test', 'functions', 'discusses', 'performance', 'function', 'described', 'davis', 'social', 'behavior', 'number', 'created', 'computer', 'simulations', 'various', 'movement', 'bird', 'flock', 'fish', 'school', 'heppner', 'presented', 'simulations', 'bird', 'flocking', 'bird', 'flocking', 'heppner', 'interested', 'underlying', 'rules', 'large', 'numbers', 'birds', 'flock', 'changing', 'direction', 'etc', 'local', 'processes', 'ieee', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'table', 'group', 'dynamics', 'bird', 'social', 'behavior', 'models', 'relied', 'individual', 'distances', 'flocking', 'behavior', 'function', 'birds', 'maintain', 'optimum', 'distance', 'neighbors', 'seem', 'large', 'logic', 'suppose', 'rules', 'animal', 'social', 'behavior', 'including', 'humans', 'written', 'reference', 'fish', 'theory', 'least', 'individual', 'members', 'school', 'previous', 'experience', 'members', 'school', 'search', 'food', 'advantage', 'become', 'competition', 'food', 'whenever', 'distributed', 'suggests', 'social', 'sharing', 'information', 'offers', 'evolutionary', 'advantage', 'hypothesis', 'fundamental', 'particle_swarm', 'optimization', 'developing', 'model', 'human', 'social', 'behavior', 'course', 'identical', 'fish', 'bird', 'flocking', 'important', 'difference', 'birds', 'fish', 'adjust', 'physical', 'movement', 'avoid', 'food', 'optimize', 'parameters', 'etc', 'humans', 'adjust', 'physical', 'movement', 'variables', 'step', 'research', 'human', 'shows', 'capable', 'tend', 'adjust', 'social', 'major', 'terms', 'computer', 'simulation', 'least', 'obvious', 'reason', 'individuals', 'identical', 'birds', 'cannot', 'occupy', 'position', 'space', 'seems', 'reasonable', 'human', 'social', 'behavior', 'map', 'concept', 'change', 'movement', 'consistent', 'classic', 'view', 'change', 'types', 'movement', 'moving', 'dimensional', 'physical', 'space', 'humans', 'change', 'abstract', 'multidimensional', 'space', 'free', 'physical', 'space', 'course', 'affects', 'inputs', 'component', 'experience', 'humans', 'learn', 'avoid', 'physical', 'age', 'dimensional', 'space', 'requires', 'practice', 'many', 'seem', 'need', 'particle_swarm', 'optimization', 'particle_swarm', 'optimizer', 'presented', 'development', 'mentioned', 'algorithm', 'simulation', 'simplified', 'social', 'agents', 'birds', 'original', 'simulate', 'bird', 'flock', 'nearest', 'neighbor', 'velocity', 'matching', 'craziness', 'simulation', 'written', 'relied', 'nearest', 'neighbor', 'velocity', 'matching', 'craziness', 'birds', 'initialized', 'position', 'pixel', 'grid', 'velocities', 'iteration', 'loop', 'program', 'determined', 'agent', 'appropriate', 'term', 'bird', 'agent', 'nearest', 'neighbor', 'assigned', 'agent', 'velocities', 'agent', 'focus', 'simple', 'created', 'movement', 'flock', 'direction', 'stochastic', 'variable', 'called', 'craziness', 'introduced', 'iteration', 'change', 'added', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'chosen', 'velocities', 'variation', 'system', 'simulation', 'interesting', 'course', 'variation', 'vector', 'heppner', 'bird', 'simulations', 'feature', 'introduced', 'dynamic', 'force', 'simulation', 'birds', 'position', 'pixel', 'eliminated', 'need', 'variable', 'craziness', 'simulation', 'took', 'lie', 'idea', 'led', 'question', 'heppner', 'birds', 'real', 'life', 'birds', 'immediate', 'needs', 'bird', 'food', 'find', 'food', 'put', 'bird', 'number', 'birds', 'likely', 'find', 'previous', 'knowledge', 'location', 'etc', 'seems', 'possible', 'flock', 'dynamic', 'enables', 'members', 'flock', 'knowledge', 'second', 'variation', 'simulation', 'defined', 'vector', 'dimensional', 'vector', 'coordinates', 'pixel', 'agent', 'evaluate', 'present', 'position', 'terms', 'equation', 'position', 'value', 'zero', 'agent', 'best', 'value', 'position', 'resulted', 'value', 'value', 'called', 'pbest', 'positions', 'pbestx', 'indicate', 'number', 'elements', 'number', 'agents', 'agent', 'pixel', 'space', 'evaluating', 'positions', 'velocities', 'adjusted', 'simple', 'manner', 'right', 'pbestx', 'velocity', 'call', 'adjusted', 'random', 'amount', 'weighted', 'parameter', 'system', 'rand', 'increment', 'left', 'pbestx', 'rand', 'increment', 'added', 'velocities', 'adjusted', 'depending', 'agent', 'agent', 'best', 'position', 'member', 'flock', 'found', 'value', 'array', 'index', 'agent', 'best', 'value', 'variable', 'called', 'gbest', 'pbestx', 'gbest', 'group', 'best', 'position', 'gbest', 'best', 'position', 'information', 'available', 'flock', 'members', 'member', 'adjusted', 'follows', 'increment', 'system', 'parameter', 'pbestx', 'gbest', 'rand', 'increment', 'pbestx', 'gbest', 'rand', 'increment', 'rand', 'increment', 'rand', 'increment', 'simulation', 'marked', 'position', 'pixel', 'field', 'agents', 'represented', 'points', 'flocking', 'agents', 'found', 'simulated', 'results', 'increment', 'increment', 'set', 'high', 'flock', 'iterations', 'entire', 'flock', 'individuals', 'seen', 'surrounding', 'goal', 'increment', 'increment', 'set', 'low', 'flock', 'goal', 'target', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'variables', 'clear', 'paradigm', 'dimensional', 'linear', 'functions', 'important', 'identify', 'parts', 'necessary', 'task', 'instance', 'authors', 'found', 'algorithm', 'craziness', 'removed', 'next', 'shown', 'optimization', 'occurs', 'faster', 'nearest', 'neighbor', 'velocity', 'matching', 'removed', 'effect', 'changed', 'able', 'find', 'variables', 'pbest', 'gbest', 'increments', 'necessary', 'pbest', 'resembles', 'memory', 'individual', 'experience', 'fact', 'velocity', 'pbest', 'called', 'simple', 'individual', 'tends', 'return', 'place', 'satisfied', 'past', 'hand', 'gbest', 'similar', 'knowledge', 'group', 'standard', 'individuals', 'simulations', 'high', 'value', 'relative', 'increment', 'results', 'excessive', 'individuals', 'problem', 'space', 'high', 'increment', 'results', 'flock', 'local', 'minima', 'equal', 'values', 'increments', 'seem', 'result', 'effective', 'search', 'problem', 'domain', 'multidimensional', 'search', 'algorithm', 'seems', 'flock', 'searching', 'interesting', 'optimization', 'problems', 'linear', 'dimensional', 'authors', 'objectives', 'model', 'social', 'behavior', 'multidimensional', 'free', 'simple', 'step', 'change', 'presentx', 'course', 'matrices', 'number', 'dimensions', 'number', 'agents', 'multidimensional', 'experiments', 'performed', 'nonlinear', 'multidimensional', 'problem', 'weights', 'train', 'neural', 'network', 'authors', 'experiments', 'involved', 'training', 'weights', 'solving', 'exclusive', 'problem', 'problem', 'requires', 'input', 'output', 'processing', 'elements', 'number', 'connections', 'output', 'bias', 'associated', 'requires', 'optimization', 'parameters', 'problem', 'agents', 'dimensional', 'space', 'average', 'sum', 'error', 'criterion', 'algorithm', 'performed', 'problem', 'network', 'criterion', 'average', 'iterations', 'agents', 'complex', 'longer', 'course', 'results', 'discussed', 'section', 'results', 'applications', 'acceleration', 'distance', 'algorithm', 'worked', 'hard', 'velocity', 'inequality', 'test', 'smaller', 'algorithm', 'made', 'improved', 'performance', 'testing', 'inequality', 'velocities', 'adjusted', 'according', 'difference', 'dimension', 'best', 'rand', 'presentx', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'note', 'parameters', 'presentx', 'sets', 'matrices', 'agents', 'dimensions', 'increment', 'current', 'simplified', 'version', 'guess', 'increment', 'larger', 'terms', 'algorithm', 'stochastic', 'factor', 'mean', 'agents', 'target', 'half', 'version', 'outperforms', 'previous', 'versions', 'research', 'show', 'optimum', 'value', 'constant', 'set', 'value', 'problem', 'value', 'determined', 'knowledge', 'particular', 'problem', 'current', 'simplified', 'particle_swarm', 'optimizer', 'velocities', 'following', 'formula', 'rand', 'pbestx', 'presentx', 'rand', 'experiments', 'variations', 'algorithm', 'tried', 'none', 'improve', 'current', 'simplified', 'version', 'instance', 'agent', 'weighted', 'average', 'best', 'points', 'problem', 'space', 'version', 'algorithm', 'reduced', 'terms', 'point', 'dimension', 'pbest', 'gbest', 'positions', 'version', 'converge', 'optimum', 'stochastic', 'necessary', 'part', 'process', 'version', 'considered', 'types', 'agents', 'used', 'inequality', 'test', 'cause', 'target', 'large', 'distance', 'used', 'difference', 'term', 'hypothesis', 'known', 'region', 'problem', 'domain', 'hill', 'micro', 'explore', 'regions', 'found', 'method', 'showed', 'improvement', 'current', 'simplified', 'version', 'version', 'tested', 'removed', 'rand', 'presentx', 'rand', 'pbestx', 'presentx', 'version', 'simplified', 'finding', 'global', 'optima', 'swarms', 'particles', 'described', 'section', 'became', 'obvious', 'paradigm', 'behavior', 'population', 'agents', 'swarm', 'flock', 'term', 'swarm', 'basis', 'literature', 'particular', 'authors', 'term', 'developed', 'models', 'applications', 'artificial', 'life', 'basic', 'principles', 'swarm', 'intelligence', 'principle', 'population', 'able', 'simple', 'space', 'computations', 'second', 'quality', 'principle', 'population', 'able', 'quality', 'factors', 'environment', 'third', 'principle', 'diverse', 'response', 'population', 'fourth', 'principle', 'stability', 'population', 'change', 'mode', 'behavior', 'environment', 'changes', 'fifth', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'principle', 'population', 'able', 'change', 'behavior', 'mode', 'computational', 'price', 'note', 'principles', 'opposite', 'particle_swarm', 'optimization', 'concept', 'paradigm', 'presented', 'seem', 'principles', 'basic', 'paradigm', 'dimensional', 'space', 'carried', 'series', 'steps', 'population', 'quality', 'factors', 'pbest', 'gbest', 'allocation', 'pbest', 'gbest', 'ensures', 'diversity', 'response', 'population', 'changes', 'state', 'mode', 'behavior', 'gbest', 'changes', 'principle', 'stability', 'population', 'adaptive', 'change', 'gbest', 'changes', 'term', 'particle', 'selected', 'population', 'members', 'mass', 'volume', 'called', 'points', 'velocities', 'applied', 'particles', 'defined', 'small', 'mass', 'volume', 'discusses', 'particle', 'systems', 'consisting', 'particles', 'models', 'authors', 'chosen', 'represent', 'optimization', 'concept', 'particle_swarm', 'tests', 'applications', 'optimizer', 'paradigm', 'tested', 'benchmark', 'tests', 'performance', 'applications', 'known', 'neural', 'application', 'described', 'section', 'instance', 'showed', 'particle_swarm', 'optimizer', 'train', 'weights', 'usual', 'error', 'method', 'particle_swarm', 'optimizer', 'used', 'train', 'neural', 'network', 'data', 'set', 'optimizer', 'weights', 'method', 'series', 'ten', 'training', 'particle_swarm', 'optimizer', 'paradigm', 'required', 'average', 'weights', 'found', 'particle', 'swarms', 'training', 'set', 'test', 'set', 'solutions', 'found', 'gradient', 'example', 'data', 'set', 'representing', 'achieved', 'percent', 'test', 'data', 'particle_swarm', 'optimizer', 'able', 'train', 'network', 'achieve', 'percent', 'particle_swarm', 'optimizer', 'benchmark', 'genetic', 'algorithms', 'davis', 'nonlinear', 'schaffer', 'function', 'function', 'difficult', 'optimize', 'discontinuous', 'data', 'surface', 'features', 'many', 'optima', 'particle_swarm', 'paradigm', 'found', 'global', 'optimum', 'run', 'appears', 'results', 'reported', 'genetic', 'algorithms', 'chapter', 'terms', 'number', 'evaluations', 'required', 'reach', 'certain', 'performance', 'levels', 'conclusions', 'particle_swarm', 'optimization', 'algorithm', 'seems', 'effective', 'optimizing', 'wide', 'range', 'functions', 'view', 'level', 'form', 'life', 'derived', 'algorithm', 'space', 'nature', 'search', 'requires', 'neural', 'processing', 'occurs', 'order', 'social', 'optimization', 'occurs', 'experience', 'fact', 'addition', 'life', 'particle_swarm', 'optimization', 'obvious', 'computation', 'seems', 'lie', 'genetic', 'algorithms', 'evolutionary', 'programming', 'dependent', 'stochastic', 'processes', 'evolutionary', 'programming', 'pbest', 'gbest', 'particle_swarm', 'optimizer', 'similar', 'crossover', 'operation', 'genetic', 'algorithms', 'uses', 'concept', 'evolutionary', 'computation', 'paradigms', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'unique', 'concept', 'particle_swarm', 'optimization', 'potential', 'solutions', 'solutions', 'evolutionary', 'computation', 'schemes', 'potential', 'solutions', 'represented', 'much', 'success', 'particle', 'swarms', 'seems', 'lie', 'agents', 'past', 'target', 'holland', 'chapter', 'optimum', 'allocation', 'trials', 'balance', 'testing', 'known', 'regions', 'versus', 'exploration', 'appears', 'current', 'version', 'paradigm', 'allocates', 'trials', 'stochastic', 'factors', 'allow', 'search', 'spaces', 'regions', 'found', 'effect', 'velocities', 'results', 'exploration', 'regions', 'problem', 'domain', 'authors', 'social', 'electrical', 'particle_swarm', 'optimizer', 'serves', 'fields', 'social', 'behavior', 'animal', 'solve', 'engineering', 'optimization', 'problems', 'modeling', 'social', 'behavior', 'much', 'research', 'remains', 'conducted', 'simple', 'concept', 'paradigm', 'developing', 'keep', 'simple', 'robust', 'seem', 'algorithm', 'written', 'lines', 'code', 'requires', 'specification', 'problem', 'parameters', 'order', 'solve', 'algorithm', 'belongs', 'school', 'allows', 'trying', 'nature', 'trying', 'control', 'simpler', 'complex', 'nature', 'provided', 'technique', 'processing', 'information', 'portions', 'adapted', 'chapter', 'particle_swarm', 'optimization', 'computational', 'intelligence', 'tools', 'published', 'press', 'include', 'material', 'input', 'references', 'davis', 'handbook', 'genetic', 'algorithms', 'van', 'york', 'neural', 'network', 'tools', 'practical', 'guide', 'press', 'san', 'multiple', 'problems', 'heppner', 'stochastic', 'nonlinear', 'model', 'bird', 'publications', 'washington', 'holland', 'adaptation', 'natural', 'systems', 'press', 'cambridge', 'swarms', 'phase', 'transitions', 'collective', 'intelligence', 'life', 'iii', 'addison', 'wesley', 'particle', 'systems', 'technique', 'modeling', 'class', 'fuzzy', 'acm', 'transactions', 'distributed', 'model', 'computer', 'synthesis', 'press', 'cambridge']"
11,4,1,"Bee Colony Optimization: Principles and Applications Dusan Teodorovic, Panta Lucic, Goran Markovic, Mauro Dell' Orco Abstract - The Bee Colony Optimization Metaheuristic (BCO) is proposed in the paper. The BCO represents the new metaheuristic capable to solve difficult combinatorial optimization problems. The artificial bee colony behaves partially alike, and partially differently from bee colonies in nature. In addition to proposing the BCO as a new metaheuristic, we also describe in the paper two BCO algorithms that we call the Bee System (BS) and the Fuzzy Bee System (FBS). In the case of FBS the agents (artificial bees) use approximate reasoning and rules of fuzzy logic in their communication and acting. In this way, the FBS is capable to solve deterministic combinatorial problems, as well as combinatorial problems characterized by uncertainty. The proposed approach is illustrated by three Case studies. Keywords - Key words or phrases in alphabetical order, separated by commas. I. INTRODUCTION Agreat number of traditional engineering models and algorithms used to solve complex problems are based on control and centralization. Various natural systems (social insects colonies) lecture us that very simple individual organisms can create systems able to perform highly complex tasks by dynamically interacting with each other. Bee swarm behavior in nature is, first and foremost, characterized by autonomy and distributed functioning and self-organizing. In the last couple of years, the researchers started studying the behavior of social insects in an attempt to use the Swarm Intelligence concept in order to develop various Artificial Systems. The Bee Colony Optimization (BCO) Metaheuristic that represents the new direction in the field of Swarm Intelligence is introduced in this paper. The primary goal of this paper is to explore the possible applications of collective bee intelligence in solving combinatorial problems characterized by uncertainty. The paper is Dusan Teodorovic is with the Faculty of Transport and Traffic Engineering, University of Belgrade, Serbia (phone +381-1 1-3091-210; fax: +381-1 1-3096-704; e-mail: dusanAsfbg.ac.yu). Panta Lucic is with the CSSI, Inc, Washington D.C., U.S.A. (e-mail: plucicAvt.edu). Goran Markovic is with the Faculty of Transport and Traffic Engineering, University of Belgrade, Serbia (e-mail: Mauro Dell' Orco is with the Technical University of Bari, Italy (e-mail: dellorco poliba.it) organized in the following way. The new computational paradigm - The Bee Colony Optimization is described in Section 2. Sections III, IV, and V are devoted to the description of Case Studies (Traveling Salesman Problem, Ride-Matching Problem, and Routing and Wavelength Assignment Problem). Conclusion is given in the Section VI. II. THE BEE COLONY OPTIMIZATION: THE NEW COMPUTATIONAL PARADIGM Social insects (bees, wasps, ants, termites) have lived on Earth for millions of years, building nests and more complex dwellings, organizing production and procuring food. The colonies of social insects are very flexible and can adapt well to the changing environment. This flexibility allows the colony of social insects to be robust and maintain its life in spite of considerable disturbances. The dynamics of the social insect population is a result of the different actions and interactions of individual insects with each other, as well as with their environment. The interactions are executed via multitude of various chemical and/or physical signals. The final product of different actions and interactions represents social insect colony behavior. Interaction between individual insects in the colony of social insects has been well documented. The examples of such interactive behavior are bee dancing during the food procurement, ants' pheromone secretion, and performance of specific acts, which signal the other insects to start performing the same actions. These communication systems between individual insects contribute to the formation of the `collective intelligence` of the social insect colonies. The term `Swarm Intelligence`, denoting this `collective intelligence` has come into use [1]-[3]. A. Bees in the Nature Self-organization of bees is based on a few relatively simple rules of individual insect's behavior. In spite of the existence of a large number of different social insect species, and variation in their behavioral patterns, it is possible to describe individual insects' as capable of performing a variety of complex tasks [4]. The best example is the collection and processing of nectar, the practice of which is highly organized. Each bee decides to reach the nectar source by following a nestmate who has already discovered a patch of flowers. Each hive has a socalled dance floor area in which the bees that have discovered nectar sources dance, in that way trying to 1-4244-0433-9/06/$20.00 (©2006 IEEE. 151 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:42:12 UTC from IEEE Xplore. Restrictions apply. convince their nestmates to follow them. If a bee decides to leave the hive to get nectar, she follows one of the bee dancers to one of the nectar areas. Upon arrival, the foraging bee takes a load of nectar and returns to the hive relinquishing the nectar to a food storer bee. After she relinquishes the food, the bee can (a) abandon the food source and become again uncommitted follower, (b) continue to forage at the food source without recruiting the nestmates, or (c) dance and thus recruit the nestmates before the return to the food source. The bee opts for one of the above alternatives with a certain probability. Within the dance area, the bee dancers `advertise` different food areas. The mechanisms by which the bee decides to follow a specific dancer are not well understood, but it is considered that `the recruitment among bees is always a function of the quality of the food source` [4]. It is also noted that not all bees start foraging simultaneously. The experiments confirmed, `new bees begin foraging at a rate proportional to the difference between the eventual total and the number presently foraging`. The basic principles of collective bee intelligence in solving combinatorial optimization problems were for a first time used in [5] and [6]. The authors introduced the Bee System (BS) and tested it in the case of Traveling Salesman Problem. The Bee Colony Optimization Metaheuristic (BCO) that has been proposed in this paper represents further improvement and generalization of the Bee System. The basic characteristics of the BCO Metaheuristic are described. Our artificial bee colony behaves partially alike, and partially differently from bee colonies in nature. The Fuzzy Bee System (FBS) capable to solve combinatorial optimization problems characterized by uncertainty is also introduced in the paper. Within FBS, the agents use approximate reasoning and rules of fuzzy logic in their communication and acting. B. The Bee Colony Optimization Metaheuristic Within the Bee Colony Optimization Metaheuristic (BCO), agents that we call - artificial bees collaborate in order to solve difficult combinatorial optimization problem. All artificial bees are located in the hive at the beginning of the search process. During the search process, artificial bees communicate directly. Each artificial bee makes a series of local moves, and in this way incrementally constructs a solution of the problem. Bees are adding solution components to the current partial solution until they create one or more feasible solutions. The search process is composed of iterations. The first iteration is finished when bees create for the first time one or more feasible solutions. The best discovered solution during the first iteration is saved, and then the second iteration begins. Within the second iteration, bees again incrementally construct solutions of the problem, etc. There are one or more partial solutions at the end of each iteration. The analyst-decision maker prescribes the total number of iterations. When flying through the space our artificial bees perform forward pass or backward pass. During forward pass, bees create various partial solutions. They do this via a combination of individual exploration and collective experience from the past. After that, they perform backward pass, i.e. they return to the hive. In the hive, all bees participate in a decision-making process. We assume that every bee can obtain the information about solutions' quality generated by all other bees. In this way, bees exchange information about quality of the partial solutions created. Bees compare all generated partial solutions. Based on the quality of the partial solutions generated, every bee decides whether to abandon the created partial solution and become again uncommitted follower, continue to expand the same partial solution without recruiting the nestmates, or dance and thus recruit the nestmates before returning to the created partial solution. Depending on the quality of the partial solutions generated, every bee possesses certain level of loyalty to the path leading to the previously discovered partial solution. During the second forward pass, bees expand previously created partial solutions, and after that perform again the backward pass and return to the hive. In the hive bees again participate in a decision-making process, perform third forward pass, etc. The iteration ends when one or more feasible solutions are created. Like Dynamic Programming, the BCO also solves combinatorial optimization problems in stages (Figure 1). Each of the defined stages involves one optimizing variable. Let us denote by ST= {stl, st2,..., stm5 a finite set of pre-selected stages, where m is the number of stages. By B we denote the number of bees to participate in the search process, and by I the total number of iterations. The set of partial solutions at stage stj is denoted by Sj First1, 2,..., m). Stag Stage0 0 B1 // 0 40 t.,, 2 B2 0 B3 s> / First Second Third Stage Stage Stage 0 0 0 0 0_ -'D 0 0 0 o_ o0 t t t Itt Fig. 1. First forward pass and the first backward pass 152 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:42:12 UTC from IEEE Xplore. Restrictions apply. The following is pseudo-code of the Bee Colony Optimization: Bee Colony Optimization (1) Initialization. Determine the number of bees B, and the number of iterations I. Select the set of stages ST = {Stl, st2 ,..., Stm}. Find any feasible solution x of the problem. This solution is the initial best solution. (2) Set i: 1. Until i = I, repeat the following steps: (3) Setj 1. Untilj = m, repeat the following steps: Forward pass: Allow bees to fly from the hive and to choose B partial solutions from the set of partial solutions Sj at stage stj. Backward pass: Send all bees back to the hive. Allow bees to exchange information about quality of the partial solutions created and to decide whether to abandon the created partial solution and become again uncommitted follower, continue to expand the same partial solution without recruiting the nestmates, or dance and thus recruit the nestmates before returning to the created partial solution. Set,j: =j + 1. (4) If the best solution xi obtained during the i-th iteration is better than the best- known solution, update the best known solution (x: = xi). (5) Set, i: = i + 1. perform third forward pass, etc. The iteration ends when the bees have visited all nodes. Within the proposed BCO Metaheuristic, various heuristic algorithms describing bees' behavior and/or `reasoning` could be developed and tested. In other words, various BCO algorithms could be developed. These algorithms should describe the ways in which bees decide to abandon the created partial solution, to continue to expand the same partial solution without recruiting the nestmates, or to dance and thus recruit the nestmates before returning to the created partial solution. o 0 BQ0 0 B3 B2 0 0 OIe 0 0 0 0 0 0 'I I I I I 1 First Second Third Stage Stage Stage Fig. 2. Second forward pass Alternatively, forward and backward passes could be performed until some other stopping condition is satisfied. The possible stopping conditions could be, for example, the maximum total number of forward/backward passes, or the maximum total number of forward/backward passes between two objective function value improvements. During the forward pass bees will visit certain number of nodes, create partial solution, and after that return to the hive (node 0). In the hive, bees will participate in a decision making process. Bees compare all generated partial solutions. Based on the quality of the partial solutions generated, every bee will decide whether to abandon the generated path and become again uncommitted follower, continue to fly along discovered path without recruiting the nestmates, or dance and thus recruit the nestmates before returning to the discovered path. Depending on the quality of the partial solutions generated, every bee possesses certain level of loyalty to the path previously discovered. For example, bee B1, B2, and B3 participated in the decision-making process. After comparing all generated partial solutions, bee B1 decided to abandon already generated path, and to join bee B2. The bees B1, and B2 fly together along the path generated by the bee B2. When they reach the end of the path, they are free to make individual decision about next node to be visited. The bee B3 will continue to fly along discovered path without recruiting the nestmates (Figure2). In this way, bees are again performing forward pass. During the second forward pass, bees will visit few more nodes, expand previously created partial solutions, and after that perform again the backward pass and return to the hive (node 0). In the hive, bees will again participate in a decision making process, make a decision, In addition to proposing the BCO as a new metaheuristic, we also describe in the paper two BCO algorithms that we call the Bee System (BS) and the Fuzzy Bee System (FBS). The BS proposed in [5] is described in more details within the Case Study of the Traveling Salesman Problem. In the case of FBS [7], the agents (artificial bees) use approximate reasoning and rules of fuzzy logic in their communication and acting. In this way, the FBS is capable to solve deterministic combinatorial problems, as well as combinatorial problems characterized by uncertainty. The FBS is described in details within the Case Study of Ride- Matching problem. III. CASE STUDY # 1: SOLVING THE TRAVELING SALESMAN PROBLEM BY THE BEE COLONY OPTIMIZATION The proposed Bee System was tested on a large number of numerical examples. The benchmark problems were taken from the following Internet address: The following problems were considered: Eil5 1 .tsp, Berlin52.tsp, St70.tsp, Pr76.tsp, Kroal OO.tsp and a280.tsp. All tests were run on an IBM compatible PC with PIll processor (533MHz). The results obtained are given in Table 1. We can see from the Table 1 that the proposed BCO produced results of a very high quality. The BCO was able to obtain the objective function values that are very close to the optimal values of the objective function. The times required to find the best solutions by the BCO are very low. In other words, the BCO was able to produce `very good` solutions in a `reasonable amount` of computer time. 153 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:42:12 UTC from IEEE Xplore. Restrictions apply. TABLE 1: THE RESULTS OBTAINED BY THE BEE COLONY OPTIMIZATION Problem The best Name Optimal value B0 CP (Numbe Value obtained by (B secPU ofnodes)| (0) the Bee 0noes S~~ystem (B) Eil5l 51 429.983 431.121 0.26% 44 Ber(l5i2n)52 7544.36 7544.366 Oo% 18 St70 (70) 678.597 678.621 0.00350o 238 Pr76 (76) 108159 108790 0.58% 127 KroalOO 21285.4 21441.5 0.730% 58 (10)0 A280 2586.77 2740.63 5.950o 1855 (280) _________________ IV. CASE STUDY #2: SOLVING THE RIDE-MATCHING PROBLEM BY THE FuzzY BEE SYSTEM Urban road networks in many countries are severely congested, resulting in increased travel times, increased number of stops, unexpected delays, greater travel costs, inconvenience to drivers and passengers, increased air pollution and noise level, and increased number of traffic accidents. Expanding traffic network capacities by building more roads is extremely costly as well as environmentally damaging. More efficient usage of the existing supply is vital in order to sustain the growing travel demand. Ridesharing is one of the widely spread Travel Demand Management (TDM) techniques that assumes the participation of two or more persons that all together share vehicle when traveling from few origins to few destinations. All drivers that participate in ride-sharing offer to the operator the following information regarding trips planned for the next week: (a) Vehicle capacity (2, 3, or 4 persons); (b) Days in the week when person is ready to participate in ride-sharing; (c) Trip origin for every day in a week; (d) Trip destination for every day in a week; (e) Desired departure and/or arrival time for every day in a week. The ride-matching problem considered in [7] could be defined in the following way: Make routing and scheduling of the vehicles and passengers for the whole week in the `best possible way`. The following are potential objective functions: (a) Minimize the total distance traveled by all participants; (b) Minimize the total delay; (c) Make relatively equals vehicle utilization. We deal with the deterministic combinatorial optimization problem in the case when the desired departure and/or arrival times are fixed (For example `I want to be picked-up exactly at 8:00 a.m.). On the other hand, in many real-life situations the desired departure and/or arrival times are fuzzy (I want to be picked-up about 8:00 a.m.). In this case, the ride-matching problem should be treated as a combinatorial optimization problem characterized by uncertainty. We solve the problem described by the Fuzzy Bee System. A. The Fuzzy Bee System Bees face many decision-making problems while searching for the best solution. The following are bees' choice dilemmas: (a) What is the next solution component to be added to the partial solution?; (b) Should the partial solution be abandon or not?; (c) Should the same partial solution be expanded without recruiting the nestmates? 444 Long I~~~~~~ iDNan isac O \ 500 \ 1 000 M edium Short Fig. 3. Fuzzy sets describing distance The majority of the choice models are based on random utility modeling concepts. These approaches are highly rational. They are based on assumptions that decision-makers possess perfect information processing capabilities and always behave in a rational way (trying to maximize utilities). In order to offer alternative modeling approach, researchers started to use less normative theories. The basic concepts of Fuzzy Sets Theory [8], linguistic variables, approximate reasoning, and computing with words have more understanding for uncertainty, imprecision, and linguistically expressed observations. Following these ideas, we start in our choice model from the assumption that the quantities perceived by bees are `fuzzy` [8]. Artificial bees use approximate reasoning and rules of fuzzy logic in their communication and acting. During the j-th stage bees fly from the hive and choose B partial solutions from the set of partial solutions Si at stage stj (forward pass). When adding the solution component to the current partial solution during the forward pass, specific bee perceives specific solution component as `less attractive`, attractive`, or `very attractive`. We also assume that an artificial bee can perceive a specific attributes as `short`, `medium` or `long` (Figure 3), `cheap`, `medium`, or `expensive`, etc. B. Calculating the solution component attractiveness and choice ofthe next solution component to be added to the partial solution The approximate reasoning algorithm for calculating the solution component attractiveness consists of the rules of the following type: If the attributes of the solution component are VERY GOOD Then the considered solution component is VERY ATTRACTIVE The main advantage of using the approximate reasoning algorithm for calculating the solution component attractiveness is that it is possible to calculate solution component attractiveness even if some of the input data were only approximately known. Let us denote byf the attractiveness value of solution component i. The probability pi for solution component i to be added to the partial solution is equal to the ratio off to the sum of all considered solution component attractiveness values: 154 Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:42:12 UTC from IEEE Xplore. Restrictions apply. Pi= /f (1) Efj In order to choose next solution component to be added to the partial solution, artificial bees use a proportional selection known as the `roulette wheel selection.` (The sections of roulette are in proportion to probabilities pi). In addition to the `roulette wheel selection,` several other ways of selection could be used. C. Bee's partial solutions comparison mechanism In order to describe bee's partial solutions comparison mechanism, we introduce the concept of partial solution badness. We define partial solution badness in the following way: Lk LL(k) ~-mLin Lmax -Lmin where: Lk - badness of the partial solution discovered by the k-th bee L(k) - the objective function values of the partial solution discovered by the k-th bee Lmin -the objective function value of the bestdiscovered partial solution from the beginning of the search process Lmax - the objective function value of the worst discovered partial solution from the beginning of the search process The approximate reasoning algorithm to determine the partial solution badness consists of the rules of the following type: If the discovered partial solution is BAD Then loyalty is LOW Bees use approximate reasoning, and compare their discovered partial solutions with the best, and the worst discovered partial solution from the beginning of the search process. In this way, `historical facts` discovered by the all members of the bee colony have significant influence on the future search directions. D. Calculating the number ofbees changing the path Every partial solution (partial path) that is being advertised in the dance area has two main attributes: (a) the objective function value, and (b) the number of bees that are advertising the partial solution (partial path). The number of bees that are advertising the partial solution is a good indicator of a bees' collective knowledge. It shows how bee colony perceives specific partial solutions. The approximate reasoning algorithm to determine the advertised partial solution attractiveness consists of the rules of the following type: If the length of the advertised path is SHORT and the number of bees advertising the path is SMALL Then the advertised partial solution attractiveness is MEDIUM Path attractiveness calculated in this way can take values from the interval [0,1]. The higher the calculated value, the more attractive is advertised path. Bees are less or more loyal to `old` paths. At the same time, advertised paths are less, or more attractive to bees. Let us note paths Pi and p1. We denote by nij the number of bees that will abandon path Pi , and join nestmates who will fly along path pj. The approximate reasoning algorithm to calculate the number of shifting bees consists of the rules of the following type: If bees' loyalty to path Pi is LOW and path pj 's attractiveness is HIGH Then the number of shifting bees from path Pi to path p1 is HIGH In this way, the number of bees flying along specific path is changed before beginning of the new forward pass. Using collective knowledge and sharing information among themselves, bees concentrate on more promising search paths, and slowly abandon less promising paths. ways of selection could be used. E. Numerical experiment The authors in [7] tested the proposed model in the case of ridesharing demand from Trani, a small city in the southeastern Italy, to Bari, the region capital of Puglia They collected the data regarding 97 travelers demanding for ridesharing, and assumed, for sake of simplicity, that the capacity is 4 passengers for all their cars. In our case, the algorithm chooses 24*4 = 96 out of 97 travelers to build up the `best` path. The authors used a hive of 15 bees, leaving at once. Bees have generated only six `foraging paths`. The other generated paths were abandoned eventually. Changes of the best discovered objective function values are shown in Figure 4. Fig. 4. Changes of the best-discovered objective function values V. CASE STUDY #3: ROUTING AND WAVELENGTH ASSIGNMENT (RWA) IN ALL-OPTICAL NETWORKS Every pair of nodes in optical networks is characterized by a number of requested connections. The total number of established connections in the network depends on the routing and wavelength assignment procedure. Routing and wavelength assignment (RWA) problem in all-optical networks could be defined in the following way: Assign a path through the network and a wavelength on that path for each considered connection between a pair of nodes in 155 i~~~~~~~~~~~~~~~~~~~ Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:42:12 UTC from IEEE Xplore. Restrictions apply. such a way to maximize the total number of established connections in the network. In [9] the authors proposed the BCO heuristic algorithm tailored for the RWA problem. They called the proposed algorithm the BCO-RWA algorithm. Bees decide to choose a physical route in optical network in a random manner. Logit model is one of the most successful and widely accepted discrete choice model. Inspired by the Logit model, the authors in [9] assumed that the probability p,'d of choosing route r in the case of origin-destination pair (s,d) equals: Vd e reRsd iW >0 Pprsd= Eisd ((33)) O,VreRsd iW =0 where Rsd is the total number of available routes between pair of nodes (s,d). The route r is availlable if there is at least one available wavelength on all links that belong to the route r. In the hive every bee makes the decision about abandoning the created partial solution or expanding it in the next forward pass. The authors in [9] assumed that every bee can obtain the information about partial solution quality created by every other bee. They calculated the probability that the bee b will at beginning of the u + 1 forward pass use the same partial tour that is defined in forward pass u in the following way: _ C.. Cb Pb =e u (4) where: Cb - the total number of established lightpaths from the beginning of the search process by the b-th bee Cmax - the maximal number of established lightpaths from the beginning of the search process by any bee u - ordinary number of forward pass, u=1,2,..., U TABLE 2: THE RESULTS COMPARISON Total Number of CPU time number of Number of established [s] Relative requested wave- lightpathsero % light-paths lengths ILP BCO- ILP BCO-ero[0] RWA RWA 1 14 14 4 4.33 0 28 2 23 23 94 4.58 0 28 32 27 27 251 4.68 0 4 28 28 313 4.66 0 1 15 14 4 4.73 6.67 31 2 25 25 83 5.00 0 3 30 30 235 5.19 0 4 31 31 1410 5.21 0 1 15 14 14 5.19 6.67 34 2 27 26 148 5.50 3.70 3 33 33 216 5.64 0 4 34 34 906 5.64 0 1 16 15 23 5.64 6.25 36 32 27 26 325 6.09 3.70 36 34 34 788 6.11 0 4 36 36 1484 6.13 0 1 17 16 16 5.67 5.88 38 2 28 27 247 6.09 3.57 38 35 35 261 6.23 0 4 38 38 1773 6.33 0 1 17 16 31 6.00 5.88 40 2 28 27 491 6.28 3.57 4 35 35 429 6.61 0 4 40 40 1346 6.67 0 The authors in [9] calculated the probability pp that the P-th advertised partial solution will be chosen by any of the uncomitted follower using the following relation: eCp PP = p Ecp p=1 ,(5) where Cp is the total number of the established lightpaths in the case of the P-th advertised partial solution The BCO-RWA algorithm was tested on a few numerical examples. The authors in [9] fornulated corresponding Integer Linear Program (ILP) and discovered optimal solutions for the considered examples. In the next step, they compared the BCO-RWA results with the optimal solution. The comparison for the considered network is shown in the Table 2. We can see from the Table 2 that the proposed BCORWA algorithm has been able to produce optimal, or a near-optimal solutions in a reasonable amount of computer time. VI. CONCLUSION The successful applications of the Bee Colony Optimization to difficult combinatorial optimization problems are very encouraging. It is of a great importance to investigate in future research both advantages and disadvantages of autonomy, distributed functioning and self-organizing in relation to traditional engineering methods relying on control and centralization. ACKNOWLEDGMENT This research was partially supported by the Ministry of Sciences of Serbia. REFERENCES [1] G. Beni, `The concept of Cellular Robotic System`, in Proceedings 1988 IEEE International Symposium on Intelligent Control, Los Alamitos, CA, IEEE Computer Society Press, 1988, pp.57-62. [2] G. Beni, J. Wang, `Swarm Intelligence, in Proceedings Seventh Annual Meeting of the Robotics Society of Japan, Tokyo, RSJ Press, 1989, pp.425-428. [3] E.Bonabeau, M. Dorigo, G. Theraulaz, G., `Swarm Intelligence`, Oxford University Press, Oxford, (1999). [4] S. Camazine, J. Sneyd, `A Model of Collective Nectar Source by Honey Bees: Self-organization Through Simple Rules`, Journal of Theoretical Biology, vol.149, pp.547-571, 1991. [5] P. Lu6i6, D.Teodorovi6, `Bee System: Modeling Combinatorial Optimization Transportation Engineering Problems by Swarm Intelligence`, in Preprints of the TRISTAN IV Triennial Symposium on Transportation Analysis, Sao Miguel, Azores Islands, Portugal 2001, pp. 441-445. [6] P. Lucic, D. Teodorovic, `Computing with Bees: Attacking Complex Transportation Engineering Problems`, International Journal on Artificial Intelligence Tools, vol. 12, pp. 375-394, 2003. [7] D. Teodorovic, M. Dell' Orco, `Bee Colony Optimization-A cooperative learning approach to complex transportation problems` in Abstracts - of 10th EWGT Meeting and 16th Mini EURO Conference, Poznan, 2005. [8] L. Zadeh, `Fuzzy Sets`, Information and Control, vol. 8, pp. 338- 353, 1965. [9] G. Markovic, D. Teodorovic, V. Acimovic-Raspopovic, `Routing and Wavelength Assignment in All-Optical Networks Based on the Bee Colony Optimization`, Submitted for publication, 2006 156","['bee', 'colony', 'optimization', 'principles', 'applications', 'teodorovic', 'abstract', 'bee', 'colony', 'optimization', 'metaheuristic', 'bco', 'bco', 'represents', 'metaheuristic', 'capable', 'solve', 'difficult', 'combinatorial', 'optimization', 'problems', 'artificial', 'bee', 'colony', 'bee', 'colonies', 'nature', 'addition', 'bco', 'metaheuristic', 'describe', 'bco', 'algorithms', 'call', 'bee', 'system', 'fuzzy', 'bee', 'system', 'fbs', 'case', 'fbs', 'agents', 'artificial', 'bees', 'approximate', 'reasoning', 'rules', 'fuzzy', 'logic', 'communication', 'acting', 'fbs', 'capable', 'solve', 'deterministic', 'combinatorial', 'problems', 'combinatorial', 'problems', 'characterized', 'uncertainty', 'approach', 'illustrated', 'case', 'studies', 'key', 'words', 'order', 'introduction', 'number', 'traditional', 'engineering', 'models', 'algorithms', 'used', 'solve', 'complex', 'problems', 'control', 'various', 'natural', 'systems', 'social', 'insects', 'colonies', 'lecture', 'simple', 'individual', 'create', 'systems', 'able', 'perform', 'complex', 'tasks', 'bee', 'swarm', 'behavior', 'nature', 'characterized', 'distributed', 'functioning', 'self', 'organizing', 'last', 'couple', 'years', 'researchers', 'started', 'behavior', 'social', 'insects', 'attempt', 'swarm', 'intelligence', 'concept', 'order', 'various', 'artificial', 'systems', 'bee', 'colony', 'optimization', 'bco', 'metaheuristic', 'represents', 'direction', 'field', 'swarm', 'intelligence', 'introduced', 'primary', 'goal', 'explore', 'possible', 'applications', 'collective', 'bee', 'intelligence', 'solving', 'combinatorial', 'problems', 'characterized', 'uncertainty', 'teodorovic', 'faculty', 'traffic', 'engineering', 'university', 'mail', 'washington', 'mail', 'edu', 'faculty', 'traffic', 'engineering', 'university', 'mail', 'technical', 'university', 'italy', 'mail', 'organized', 'following', 'computational', 'paradigm', 'bee', 'colony', 'optimization', 'described', 'section', 'sections', 'iii', 'devoted', 'description', 'case', 'studies', 'traveling', 'salesman', 'problem', 'ride', 'matching', 'problem', 'routing', 'wavelength', 'assignment', 'problem', 'conclusion', 'given', 'section', 'bee', 'colony', 'optimization', 'computational', 'paradigm', 'social', 'insects', 'bees', 'ants', 'years', 'building', 'complex', 'organizing', 'food', 'colonies', 'social', 'insects', 'flexible', 'adapt', 'changing', 'environment', 'allows', 'colony', 'social', 'insects', 'robust', 'maintain', 'life', 'considerable', 'dynamics', 'social', 'population', 'result', 'different', 'interactions', 'individual', 'insects', 'environment', 'interactions', 'executed', 'various', 'chemical', 'physical', 'final', 'product', 'different', 'interactions', 'represents', 'social', 'colony', 'behavior', 'interaction', 'individual', 'insects', 'colony', 'social', 'insects', 'examples', 'behavior', 'bee', 'food', 'pheromone', 'performance', 'specific', 'signal', 'insects', 'start', 'performing', 'communication', 'systems', 'individual', 'insects', 'collective', 'intelligence', 'social', 'colonies', 'term', 'swarm', 'intelligence', 'collective', 'intelligence', 'bees', 'nature', 'self', 'bees', 'simple', 'rules', 'individual', 'behavior', 'existence', 'large', 'number', 'different', 'social', 'species', 'variation', 'patterns', 'possible', 'describe', 'individual', 'capable', 'performing', 'variety', 'complex', 'tasks', 'best', 'example', 'processing', 'nectar', 'practice', 'organized', 'bee', 'reach', 'nectar', 'source', 'following', 'discovered', 'hive', 'dance', 'area', 'bees', 'discovered', 'nectar', 'dance', 'trying', 'ieee', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'nestmates', 'follow', 'bee', 'hive', 'nectar', 'follows', 'bee', 'nectar', 'areas', 'foraging', 'bee', 'takes', 'nectar', 'hive', 'nectar', 'food', 'bee', 'food', 'bee', 'abandon', 'food', 'source', 'become', 'follower', 'continue', 'food', 'source', 'recruiting', 'nestmates', 'dance', 'recruit', 'nestmates', 'return', 'food', 'source', 'bee', 'alternatives', 'certain', 'probability', 'dance', 'area', 'bee', 'different', 'food', 'areas', 'mechanisms', 'bee', 'follow', 'specific', 'considered', 'bees', 'function', 'quality', 'food', 'source', 'noted', 'bees', 'start', 'foraging', 'experiments', 'bees', 'foraging', 'rate', 'proportional', 'difference', 'total', 'number', 'foraging', 'basic', 'principles', 'collective', 'bee', 'intelligence', 'solving', 'combinatorial', 'optimization', 'problems', 'used', 'authors', 'introduced', 'bee', 'system', 'tested', 'case', 'traveling', 'salesman', 'problem', 'bee', 'colony', 'optimization', 'metaheuristic', 'bco', 'represents', 'improvement', 'generalization', 'bee', 'system', 'basic', 'characteristics', 'bco', 'metaheuristic', 'described', 'artificial', 'bee', 'colony', 'bee', 'colonies', 'nature', 'fuzzy', 'bee', 'system', 'fbs', 'capable', 'solve', 'combinatorial', 'optimization', 'problems', 'characterized', 'uncertainty', 'introduced', 'fbs', 'agents', 'approximate', 'reasoning', 'rules', 'fuzzy', 'logic', 'communication', 'acting', 'bee', 'colony', 'optimization', 'metaheuristic', 'bee', 'colony', 'optimization', 'metaheuristic', 'bco', 'agents', 'call', 'artificial', 'bees', 'order', 'solve', 'difficult', 'combinatorial', 'optimization', 'problem', 'artificial', 'bees', 'located', 'hive', 'beginning', 'search', 'process', 'search', 'process', 'artificial', 'bees', 'communicate', 'artificial', 'bee', 'makes', 'series', 'local', 'moves', 'solution', 'problem', 'bees', 'adding', 'solution', 'components', 'current', 'partial', 'solution', 'create', 'feasible', 'solutions', 'search', 'process', 'composed', 'iterations', 'iteration', 'bees', 'create', 'feasible', 'solutions', 'best', 'discovered', 'solution', 'iteration', 'second', 'iteration', 'second', 'iteration', 'bees', 'solutions', 'problem', 'etc', 'partial', 'solutions', 'end', 'iteration', 'decision', 'total', 'number', 'iterations', 'space', 'artificial', 'bees', 'perform', 'pass', 'backward', 'pass', 'pass', 'bees', 'create', 'various', 'partial', 'solutions', 'combination', 'individual', 'exploration', 'collective', 'experience', 'past', 'perform', 'backward', 'pass', 'return', 'hive', 'hive', 'bees', 'participate', 'decision', 'making', 'process', 'assume', 'bee', 'obtain', 'information', 'quality', 'generated', 'bees', 'bees', 'exchange', 'information', 'quality', 'partial', 'solutions', 'created', 'bees', 'compare', 'generated', 'partial', 'solutions', 'quality', 'partial', 'solutions', 'generated', 'bee', 'abandon', 'created', 'partial', 'solution', 'become', 'follower', 'continue', 'expand', 'partial', 'solution', 'recruiting', 'nestmates', 'dance', 'recruit', 'nestmates', 'returning', 'created', 'partial', 'solution', 'depending', 'quality', 'partial', 'solutions', 'generated', 'bee', 'possesses', 'certain', 'level', 'path', 'leading', 'discovered', 'partial', 'solution', 'second', 'pass', 'bees', 'expand', 'created', 'partial', 'solutions', 'perform', 'backward', 'pass', 'return', 'hive', 'hive', 'bees', 'participate', 'decision', 'making', 'process', 'perform', 'third', 'pass', 'etc', 'iteration', 'ends', 'feasible', 'solutions', 'created', 'dynamic', 'programming', 'bco', 'solves', 'combinatorial', 'optimization', 'problems', 'stages', 'figure', 'defined', 'stages', 'involves', 'optimizing', 'variable', 'let', 'denote', 'finite', 'set', 'pre', 'selected', 'stages', 'number', 'stages', 'denote', 'number', 'bees', 'participate', 'search', 'process', 'total', 'number', 'iterations', 'set', 'partial', 'solutions', 'stage', 'denoted', 'second', 'third', 'stage', 'stage', 'stage', 'fig', 'pass', 'backward', 'pass', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'following', 'pseudo', 'code', 'bee', 'colony', 'optimization', 'bee', 'colony', 'optimization', 'initialization', 'determine', 'number', 'bees', 'number', 'iterations', 'select', 'set', 'stages', 'find', 'feasible', 'solution', 'problem', 'solution', 'initial', 'best', 'solution', 'set', 'following', 'steps', 'following', 'steps', 'pass', 'allow', 'bees', 'fly', 'hive', 'choose', 'partial', 'solutions', 'set', 'partial', 'solutions', 'stage', 'backward', 'pass', 'bees', 'hive', 'allow', 'bees', 'exchange', 'information', 'quality', 'partial', 'solutions', 'created', 'decide', 'abandon', 'created', 'partial', 'solution', 'become', 'follower', 'continue', 'expand', 'partial', 'solution', 'recruiting', 'nestmates', 'dance', 'recruit', 'nestmates', 'returning', 'created', 'partial', 'solution', 'set', 'best', 'solution', 'obtained', 'iteration', 'best', 'known', 'solution', 'update', 'best', 'known', 'solution', 'set', 'perform', 'third', 'pass', 'etc', 'iteration', 'ends', 'bees', 'visited', 'nodes', 'bco', 'metaheuristic', 'various', 'heuristic', 'algorithms', 'describing', 'behavior', 'reasoning', 'developed', 'tested', 'words', 'various', 'bco', 'algorithms', 'developed', 'algorithms', 'describe', 'ways', 'bees', 'decide', 'abandon', 'created', 'partial', 'solution', 'continue', 'expand', 'partial', 'solution', 'recruiting', 'nestmates', 'dance', 'recruit', 'nestmates', 'returning', 'created', 'partial', 'solution', 'second', 'third', 'stage', 'stage', 'stage', 'fig', 'second', 'pass', 'backward', 'performed', 'stopping', 'condition', 'satisfied', 'possible', 'stopping', 'conditions', 'example', 'maximum', 'total', 'number', 'backward', 'maximum', 'total', 'number', 'backward', 'objective', 'function', 'value', 'improvements', 'pass', 'bees', 'visit', 'certain', 'number', 'nodes', 'create', 'partial', 'solution', 'return', 'hive', 'node', 'hive', 'bees', 'participate', 'decision', 'making', 'process', 'bees', 'compare', 'generated', 'partial', 'solutions', 'quality', 'partial', 'solutions', 'generated', 'bee', 'decide', 'abandon', 'generated', 'path', 'become', 'follower', 'continue', 'fly', 'discovered', 'path', 'recruiting', 'nestmates', 'dance', 'recruit', 'nestmates', 'returning', 'discovered', 'path', 'depending', 'quality', 'partial', 'solutions', 'generated', 'bee', 'possesses', 'certain', 'level', 'path', 'discovered', 'example', 'bee', 'decision', 'making', 'process', 'comparing', 'generated', 'partial', 'solutions', 'bee', 'decided', 'abandon', 'generated', 'path', 'bee', 'bees', 'fly', 'path', 'generated', 'bee', 'reach', 'end', 'path', 'free', 'individual', 'decision', 'next', 'node', 'visited', 'bee', 'continue', 'fly', 'discovered', 'path', 'recruiting', 'nestmates', 'bees', 'performing', 'pass', 'second', 'pass', 'bees', 'visit', 'nodes', 'expand', 'created', 'partial', 'solutions', 'perform', 'backward', 'pass', 'return', 'hive', 'node', 'hive', 'bees', 'participate', 'decision', 'making', 'process', 'decision', 'addition', 'bco', 'metaheuristic', 'describe', 'bco', 'algorithms', 'call', 'bee', 'system', 'fuzzy', 'bee', 'system', 'fbs', 'described', 'details', 'case', 'study', 'traveling', 'salesman', 'problem', 'case', 'fbs', 'agents', 'artificial', 'bees', 'approximate', 'reasoning', 'rules', 'fuzzy', 'logic', 'communication', 'acting', 'fbs', 'capable', 'solve', 'deterministic', 'combinatorial', 'problems', 'combinatorial', 'problems', 'characterized', 'uncertainty', 'fbs', 'described', 'details', 'case', 'study', 'ride', 'matching', 'problem', 'iii', 'case', 'study', 'solving', 'traveling', 'salesman', 'problem', 'bee', 'colony', 'optimization', 'bee', 'system', 'tested', 'large', 'number', 'numerical', 'examples', 'benchmark', 'problems', 'taken', 'following', 'internet', 'address', 'following', 'problems', 'considered', 'tsp', 'tsp', 'tsp', 'tsp', 'tsp', 'tsp', 'tests', 'run', 'processor', 'results', 'obtained', 'given', 'table', 'table', 'bco', 'produced', 'results', 'high', 'quality', 'bco', 'able', 'obtain', 'objective', 'function', 'values', 'optimal', 'values', 'objective', 'function', 'times', 'required', 'find', 'best', 'solutions', 'bco', 'low', 'words', 'bco', 'able', 'produce', 'solutions', 'reasonable', 'amount', 'computer', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'table', 'results', 'obtained', 'bee', 'colony', 'optimization', 'problem', 'best', 'name', 'optimal', 'value', 'value', 'obtained', 'bee', 'case', 'study', 'solving', 'ride', 'matching', 'problem', 'fuzzy', 'bee', 'system', 'networks', 'many', 'resulting', 'increased', 'travel', 'times', 'increased', 'number', 'greater', 'travel', 'costs', 'increased', 'air', 'noise', 'level', 'increased', 'number', 'traffic', 'traffic', 'network', 'building', 'efficient', 'usage', 'existing', 'order', 'growing', 'travel', 'demand', 'spread', 'travel', 'demand', 'management', 'techniques', 'traveling', 'participate', 'ride', 'sharing', 'operator', 'following', 'information', 'regarding', 'next', 'week', 'capacity', 'week', 'participate', 'ride', 'sharing', 'week', 'week', 'desired', 'week', 'ride', 'matching', 'problem', 'considered', 'defined', 'following', 'routing', 'scheduling', 'whole', 'week', 'best', 'possible', 'following', 'potential', 'objective', 'functions', 'minimize', 'total', 'distance', 'minimize', 'total', 'deal', 'deterministic', 'combinatorial', 'optimization', 'problem', 'case', 'desired', 'times', 'fixed', 'example', 'picked', 'hand', 'many', 'real', 'life', 'situations', 'desired', 'times', 'fuzzy', 'picked', 'case', 'ride', 'matching', 'problem', 'combinatorial', 'optimization', 'problem', 'characterized', 'uncertainty', 'solve', 'problem', 'described', 'fuzzy', 'bee', 'system', 'fuzzy', 'bee', 'system', 'bees', 'many', 'decision', 'making', 'problems', 'searching', 'best', 'solution', 'following', 'choice', 'next', 'solution', 'component', 'added', 'partial', 'solution', 'partial', 'solution', 'abandon', 'partial', 'solution', 'recruiting', 'nestmates', 'short', 'fig', 'fuzzy', 'sets', 'describing', 'distance', 'choice', 'models', 'random', 'modeling', 'concepts', 'approaches', 'decision', 'information', 'processing', 'capabilities', 'trying', 'maximize', 'order', 'alternative', 'modeling', 'approach', 'researchers', 'started', 'basic', 'concepts', 'fuzzy', 'sets', 'theory', 'variables', 'approximate', 'reasoning', 'computing', 'words', 'understanding', 'uncertainty', 'expressed', 'observations', 'following', 'ideas', 'start', 'choice', 'model', 'quantities', 'bees', 'fuzzy', 'artificial', 'bees', 'approximate', 'reasoning', 'rules', 'fuzzy', 'logic', 'communication', 'acting', 'stage', 'bees', 'fly', 'hive', 'choose', 'partial', 'solutions', 'set', 'partial', 'solutions', 'stage', 'pass', 'adding', 'solution', 'component', 'current', 'partial', 'solution', 'pass', 'specific', 'bee', 'specific', 'solution', 'component', 'attractive', 'attractive', 'attractive', 'assume', 'artificial', 'bee', 'specific', 'attributes', 'short', 'figure', 'expensive', 'etc', 'calculating', 'solution', 'component', 'attractiveness', 'choice', 'next', 'solution', 'component', 'added', 'partial', 'solution', 'approximate', 'reasoning', 'algorithm', 'calculating', 'solution', 'component', 'attractiveness', 'consists', 'rules', 'following', 'type', 'attributes', 'solution', 'component', 'considered', 'solution', 'component', 'attractive', 'main', 'advantage', 'approximate', 'reasoning', 'algorithm', 'calculating', 'solution', 'component', 'attractiveness', 'possible', 'calculate', 'solution', 'component', 'attractiveness', 'input', 'data', 'known', 'let', 'denote', 'attractiveness', 'value', 'solution', 'component', 'probability', 'solution', 'component', 'added', 'partial', 'solution', 'equal', 'ratio', 'sum', 'considered', 'solution', 'component', 'attractiveness', 'values', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'order', 'choose', 'next', 'solution', 'component', 'added', 'partial', 'solution', 'artificial', 'bees', 'proportional', 'selection', 'known', 'roulette', 'wheel', 'selection', 'sections', 'roulette', 'proportion', 'probabilities', 'addition', 'roulette', 'wheel', 'selection', 'several', 'ways', 'selection', 'used', 'partial', 'solutions', 'comparison', 'mechanism', 'order', 'describe', 'partial', 'solutions', 'comparison', 'mechanism', 'introduce', 'concept', 'partial', 'solution', 'define', 'partial', 'solution', 'following', 'lmin', 'partial', 'solution', 'discovered', 'bee', 'objective', 'function', 'values', 'partial', 'solution', 'discovered', 'bee', 'lmin', 'objective', 'function', 'value', 'partial', 'solution', 'beginning', 'search', 'process', 'objective', 'function', 'value', 'worst', 'discovered', 'partial', 'solution', 'beginning', 'search', 'process', 'approximate', 'reasoning', 'algorithm', 'determine', 'partial', 'solution', 'consists', 'rules', 'following', 'type', 'discovered', 'partial', 'solution', 'bad', 'low', 'bees', 'approximate', 'reasoning', 'compare', 'discovered', 'partial', 'solutions', 'best', 'worst', 'discovered', 'partial', 'solution', 'beginning', 'search', 'process', 'discovered', 'members', 'bee', 'colony', 'significant', 'influence', 'future', 'search', 'directions', 'calculating', 'number', 'changing', 'path', 'partial', 'solution', 'partial', 'path', 'advertised', 'dance', 'area', 'main', 'attributes', 'objective', 'function', 'value', 'number', 'bees', 'partial', 'solution', 'partial', 'path', 'number', 'bees', 'partial', 'solution', 'indicator', 'collective', 'knowledge', 'shows', 'bee', 'colony', 'specific', 'partial', 'solutions', 'approximate', 'reasoning', 'algorithm', 'determine', 'advertised', 'partial', 'solution', 'attractiveness', 'consists', 'rules', 'following', 'type', 'length', 'advertised', 'path', 'short', 'number', 'bees', 'path', 'small', 'advertised', 'partial', 'solution', 'attractiveness', 'path', 'attractiveness', 'calculated', 'values', 'interval', 'higher', 'calculated', 'value', 'attractive', 'advertised', 'path', 'bees', 'paths', 'advertised', 'paths', 'attractive', 'bees', 'let', 'note', 'paths', 'denote', 'number', 'bees', 'abandon', 'path', 'nestmates', 'fly', 'path', 'approximate', 'reasoning', 'algorithm', 'calculate', 'number', 'bees', 'consists', 'rules', 'following', 'type', 'path', 'low', 'path', 'attractiveness', 'high', 'number', 'bees', 'path', 'path', 'high', 'number', 'bees', 'specific', 'path', 'changed', 'beginning', 'pass', 'collective', 'knowledge', 'sharing', 'information', 'bees', 'promising', 'search', 'paths', 'abandon', 'promising', 'paths', 'ways', 'selection', 'used', 'numerical', 'experiment', 'authors', 'tested', 'model', 'case', 'demand', 'small', 'italy', 'region', 'collected', 'data', 'regarding', 'assumed', 'simplicity', 'capacity', 'case', 'algorithm', 'chooses', 'best', 'path', 'authors', 'used', 'hive', 'bees', 'bees', 'generated', 'foraging', 'paths', 'generated', 'paths', 'changes', 'best', 'discovered', 'objective', 'function', 'values', 'shown', 'figure', 'fig', 'changes', 'best', 'discovered', 'objective', 'function', 'values', 'case', 'study', 'routing', 'wavelength', 'assignment', 'rwa', 'optical', 'networks', 'pair', 'nodes', 'optical', 'networks', 'characterized', 'number', 'connections', 'total', 'number', 'established', 'connections', 'network', 'depends', 'routing', 'wavelength', 'assignment', 'procedure', 'routing', 'wavelength', 'assignment', 'rwa', 'problem', 'optical', 'networks', 'defined', 'following', 'assign', 'path', 'network', 'wavelength', 'path', 'considered', 'pair', 'nodes', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'maximize', 'total', 'number', 'established', 'connections', 'network', 'authors', 'bco', 'heuristic', 'algorithm', 'tailored', 'rwa', 'problem', 'called', 'algorithm', 'bco', 'rwa', 'algorithm', 'bees', 'decide', 'choose', 'physical', 'route', 'optical', 'network', 'random', 'manner', 'model', 'successful', 'accepted', 'discrete', 'choice', 'model', 'inspired', 'model', 'authors', 'assumed', 'probability', 'choosing', 'route', 'case', 'pair', 'total', 'number', 'available', 'pair', 'nodes', 'route', 'least', 'available', 'wavelength', 'belong', 'route', 'hive', 'bee', 'makes', 'decision', 'created', 'partial', 'solution', 'next', 'pass', 'authors', 'assumed', 'bee', 'obtain', 'information', 'partial', 'solution', 'quality', 'created', 'bee', 'calculated', 'probability', 'bee', 'beginning', 'pass', 'partial', 'tour', 'defined', 'pass', 'following', 'total', 'number', 'established', 'beginning', 'search', 'process', 'bee', 'maximal', 'number', 'established', 'beginning', 'search', 'process', 'bee', 'number', 'pass', 'table', 'results', 'comparison', 'total', 'number', 'number', 'number', 'established', 'relative', 'paths', 'lengths', 'bco', 'bco', 'rwa', 'rwa', 'authors', 'calculated', 'probability', 'advertised', 'partial', 'solution', 'chosen', 'follower', 'following', 'relation', 'total', 'number', 'established', 'case', 'advertised', 'partial', 'solution', 'bco', 'rwa', 'algorithm', 'tested', 'numerical', 'examples', 'authors', 'corresponding', 'integer', 'linear', 'program', 'discovered', 'optimal', 'solutions', 'considered', 'examples', 'next', 'step', 'compared', 'bco', 'rwa', 'results', 'optimal', 'solution', 'comparison', 'considered', 'network', 'shown', 'table', 'table', 'algorithm', 'able', 'produce', 'optimal', 'optimal', 'solutions', 'reasonable', 'amount', 'computer', 'conclusion', 'successful', 'applications', 'bee', 'colony', 'optimization', 'difficult', 'combinatorial', 'optimization', 'problems', 'encouraging', 'importance', 'investigate', 'future', 'research', 'advantages', 'distributed', 'functioning', 'self', 'organizing', 'relation', 'traditional', 'engineering', 'methods', 'relying', 'control', 'research', 'supported', 'sciences', 'references', 'concept', 'system', 'proceedings', 'ieee', 'international', 'symposium', 'intelligent', 'control', 'ieee', 'computer', 'society', 'press', 'wang', 'swarm', 'intelligence', 'proceedings', 'robotics', 'society', 'japan', 'press', 'dorigo', 'swarm', 'intelligence', 'university', 'press', 'model', 'collective', 'nectar', 'source', 'bees', 'self', 'simple', 'rules', 'journal', 'theoretical', 'biology', 'vol', 'bee', 'system', 'modeling', 'combinatorial', 'optimization', 'transportation', 'engineering', 'problems', 'swarm', 'intelligence', 'symposium', 'transportation', 'analysis', 'teodorovic', 'computing', 'bees', 'complex', 'transportation', 'engineering', 'problems', 'international', 'journal', 'artificial', 'intelligence', 'tools', 'vol', 'teodorovic', 'bee', 'colony', 'optimization', 'cooperative', 'learning', 'approach', 'complex', 'transportation', 'problems', 'conference', 'fuzzy', 'sets', 'information', 'control', 'vol', 'teodorovic', 'routing', 'wavelength', 'assignment', 'optical', 'networks', 'bee', 'colony', 'optimization']"
12,4,1,"Ant System: Optimization by a Colony of Cooperating Agents Marco Dorigo, Member, ZEEE, Vittorio Maniezzo, and Albert0 Colorni 29 Abstract-An analogy with the way ant colonies function has suggested the definition of a new computational paradigm, which we call Ant System. We propose it as a viable new approach to stochastic combinatorial optimization. The main characteristics of this model are positive feedback, distributed computation, and the use of a constructive greedy heuristic. Positive feedback accounts for rapid discovery of good solutions, distributed computation avoids premature convergence, and the greedy heuristic helps find acceptable solutions in the early stages of the search process. We apply the proposed methodology to the classical Traveling Salesman Problem (TSP), and report simulation results. We also discuss parameter selection and the early setups of the model, and compare it with tabu search and simulated annealing using TSP. To demonstrate the robustness of the approach, we show how the Ant System (AS) can be applied to other optimization problems like the asymmetric traveling salesman, the quadratic assignment and the job-shop scheduling. Finally we discuss the salient characteristics-global data structure revision, distributed communication and probabilistic transitions of the AS. I. INTRODUCTION IN this paper we define a new general-purpose heuristic al- gorithm which can be used to solve different combinatorial optimization problems. The new heuristic has the following desirable characteristics: It is versatile, in that it can be applied to similar versions of the same problem; for example, there is a straightforward extension from the traveling salesman problem (TSP) to the asymmetric traveling salesman problem (ATSP). It is robust. It can be applied with only minimal changes to other combinatorial optimization problems such as the quadratic assignment problem (QAP) and the job-shop scheduling problem (JSP). It is a population based approach. This is interesting because it allows the exploitation of positive feedback as a search mechanism, as explained later in the paper. It also Manuscript received November 15, 1991; revised September 3, 1993, July 2, 1994, and December 28, 1994. M. Dorigo was with the Progetto di Intelligenza Artificiale e Robotica, Dipartimento di Elettronica e Informazione, Politecnico di Milano, 20133 Milano, Italy. He is now with INDIA, Universite’ Libre de Bruxelles, 1050 Bruxelles, Belgium (e-mail: mdorigo@ulb.ac.be, http://iridia.ulb.ac. be/dorigo/dorigo.html). V. Maniezzo was with the Progetto di Intelligenza Artificiale e Robotica, Dipartimento di Elettronica e Informazione, Politecnico di Milano, 20133 Milano, Italy. He is now with Dipartimento di Scienze dell’Informazione, Universita’ di Bologna, 47023 Cesena, Italy (e-mail: maniezzo@csr.unibo.it, http://www.csr.unibo.it/-maniezzo). A. Colorni is with the Dipartimento di Elettronica e Informazione, Politecnico di Milano, 20133 Milano, Italy (e-mail: colorni@elet.polimi.it). Publisher Item Identifier S 1083-4419(96)00417-7 makes the system amenable to parallel implementations (though this is not considered in this paper). These desirable properties are counterbalanced by the fact that, for some applications, the Ant System can be outperformed by more specialized algorithms. This is a problem shared by other popular approaches like simulated annealing (SA), and tabu search (TS), with which we compare the Ant System. Nevertheless, we believe that, as is the case with SA and TS, our approach is meaningful in view of applications to problems which, although very similar to well known and studied basic problems, present peculiarities which make the application of the standard best-performing algorithm impossible. This is the case, for example, with the ATSP. In the approach discussed in this paper we distribute the search activities over so-called “ants,” that is, agents with very simple basic capabilities which, to some extent, mimic the behavior of real ants. In fact, research on the behavior of real ants has greatly inspired our work (see [lo], [ll], [21]). One of the problems studied by ethologists was to understand how almost blind animals like ants could manage to establish shortest route paths from their colony to feeding sources and back. It was found that the medium used to communicate information among individuals regarding paths, and used to decide where to go, consists of pheromone trails. A moving ant lays some pheromone (in varying quantities) on the ground, thus marking the path by a trail of this substance. While an isolated ant moves essentially at random, an ant encountering a previously laid trail can detect it and decide with high probability to follow it, thus reinforcing the trail with its own pheromone. The collective behavior that emerges is a form of autocatalytic behavior’ where the more the ants following a trail, the more attractive that trail becomes for being followed. The process is thus characterized by a positive feedback loop, where the probability with which an ant chooses a path increases with the number of ants that previously chose the same path. Consider for example the experimental setting shown in Fig. 1. There is a path along which ants are walking (for example from food source A to the nest E, and vice versa, see Fig. l(a)). Suddenly an obstacle appears and the path is cut off. So at position B the ants walking from A to E (or at position D those walking in the opposite direction) have to decide whether to turn right or left (Fig. l(b)). The choice is influenced by the intensity of the pheromone trails left by preceding ants. A higher level of pheromone on the ‘An autocatalytic [12], i.e. positive feedback, process is a process that reinforces itself, in a way that causes very rapid convergence and, if no limitation mechanism exists, leads to explosion. 10834419/96$05.00 0 1996 13:41:51 UTC from IEEE Xplore. Restrictions apply. 30 E A E &I8 88 IEEE TRANSACTIONS ON SYSTEMS. MAN, AND CYBERNETICS-PART B: CYBERNETICS, VOL. 26, NO. 1, FEBRUARY 1996 i f A f A (a) (b) (c) Fig. 1. An example with real ants. (a) Ants follow a path between points A and E. (b) An obstacle is interposed; ants can choose to go around it following one of the two different paths with equal probability. (c) On the shorter path more pheromone is laid down. right path gives an ant a stronger stimulus and thus a higher probability to turn right. The first ant reaching point B (or D) has the same probability to turn right or left (as there was no previous pheromone on the two alternative paths). Because path BCD is shorter than BHD, the first ant following it will reach D before the first ant following path BHD (Fig. l(c)). The result is that an ant returning from E to D will find a stronger trail on path DCB, caused by the half of all the ants that by chance decided to approach the obstacle via DCBA and by the already arrived ones coming via BCD: they will therefore prefer (in probability) path DCB to path DHB. As a consequence, the number of ants following path BCD per unit of time will be higher than the number of ants following EHD. This causes the quantity of pheromone on the shorter path to grow faster than on the longer one, and therefore the probability with which any single ant chooses the path to follow is quickly biased toward the shorter one. The final result is that very quickly all ants will choose the shorter path. The algorithms that we are going to define in the next sections are models derived from the study of real ant colonies. Therefore we call our system Ant System (AS) and the algorithms we introduce ant algorithms. As we are not interested in simulation of ant colonies, but in the use of artificial ant colonies as an optimization tool, our system will have some major differences with a real (natural) one: e artificial ants will have some memory, 0 they will not be completely blind, 0 they will live in an environment where time is discrete. Nevertheless, we believe that the ant colony metaphor can be useful to explain our model. Consider the graph of Fig. 2(a), which is a possible AS interpretation of the situation of Fig. l(b). To fix the ideas, suppose that the distances between D and H, between B and H, and between B and D-via C-are equal to 1, and let C be positioned half the way between D and B (see Fig. 2(a)). Now let us consider what happens at regular discretized intervals of time: t = 0,1,2, new ants come to B from A, and 30 to D from E at each time unit, that each ant walks at a speed of 1 per time unit, and that I A (a) I A Fig. 2. An example with artificial ants. (a) The initial graph with distances. @) At time t = 0 there is no trail on the graph edges; therefore ants choose whether to turn right or left with equal probability. (c) At time t = 1 trail is stronger on shorter edges, which are therefore, in the average, preferred by ants. while walking an ant lays down at time t a pheromone trail of intensity 1, which, to make the example simpler, evaporates completely and instantaneously in the middle of the successive time interval (t + 1, t + 2). At t = 0 there is no trail yet, but 30 ants are in B and 30 in D. Their choice about which way to go is completely random. Therefore, on the average 15 ants from each node will go toward H and 15 toward C (Fig. 2(b)). At t = 1 the 30 new ants that come to B from A find a trail of intensity 15 on the path that leads to H, laid by the 15 ants that went that way from E, and a trail of intensity 30 on the path to C, obtained as the sum of the trail laid by the 15 ants that went that way from B and by the 15 ants that reached B coming from D via C (Fig. 2(c)). The probability of choosing a path is therefore biased, so that the expected number of ants going toward C will be the double of those going toward H: 20 versus 10 respectively. The same is true for the new 30 ants in D which came from E. This process continues until all of the ants will eventually choose the shortest path. The idea is that if at a given point an ant has to choose among different paths, those which were heavily chosen by preceding ants (that is, those with a high trail level) are chosen with higher probability. Furthermore high trail levels are synonymous with short paths. The paper is organized as follows. Section I1 contains the description of the AS as it is currently implemented and the definition of the application problem: as the algorithm structure partially reflects the problem structure, we introduce them together. Section I11 describes three slightly different ways to apply the proposed algorithm. Sections IV and V report on experiments. In Section VI we compare the AS with other heuristics, and in Section VI1 we substantiate the versatility and robustness of the AS by showing how it can be applied to other optimization problems. In Section VI11 we informally discuss why and how the AS paradigm functions. Conclusions are in Section IX. 11. THE ANT SYSTEM In this section we introduce the AS. We decided to use the well-known traveling salesman problem [26] as benchmark, in order to make the comparison with other heuristic approaches Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. DORIGO et al.: ANT SYSTEM OPTIMIZATION BY A COLONY OF COOPERATING AGENTS 31 easier [2O]. Although the model definition is influenced by the problem structure, we will show in Section VI1 that the same approach can be used to solve other optimization problems. Given a set of n towns, the TSP can be stated as the problem of finding a minimal length closed tour that visits each town once. We call d,, the length of the path between towns i and j ; in the case of Euclidean TSP, di, is the Euclidean distance between i and j (i.e., d,, = [(z, - 2,)' + (y, - TJ,)']~/'). An instance of the TSP is given by a graph (N, E), where N is the set of towns and E is the set of edges between towns (a fully connected graph in the Euclidean TSP). Let b,(t) (i = 1, . . . , n) be the number of ants in town i at time t and let m = b,(t) be the total number of ants. Each ant is a simple agent with the following characteristics: it chooses the town to go to with a probability that is a function of the town distance and of the amount of trail present on the connecting edge; to force the ant to make legal tours, transitions to already visited towns are disallowed until a tour is completed (this is controlled by a tabu list); when it completes a tour, it lays a substance called trail on each edge ( i , j ) visited. Let r,, (t) be the intensity of trail on edge (i, j ) at time t. Each ant at time t chooses the next town, where it will be at time t + 1. Therefore, if we call an iteration of the AS algorithm the m moves carried out by the m ants in the interval (t, t + l), then every n iterations of the algorithm (which we call a cycle) each ant has completed a tour. At this point the trail intensity is updated according to the following formula (1) where p is a coefficient such that (1 - p) represents the evaporation of trail between time t and t + n, Tz, (t + n) = p . T,, (t) + AT,, m k=l where AT$ is the quantity per unit of length of trail substance (pheromone in real ants) laid on edge ( i , j ) by the kth ant between time t and t + n; it is given by E if kth ant uses edge ( i , j ) in its tour (between time t and t + n) = ( 3 ) 8, l o otherwise where Q is a constant and Lk is the tour length of the kth ant. The coefficient p must be set to a value < 1 to avoid unlimited accumulation of trail (see note 1). In our experiments, we set the intensity of trail at time O , r i j ( O ) , to a small positive constant c. In order to satisfy the constraint that an ant visits all the n different towns, we associate with each ant a data structure called the tabu lis$, that saves the towns already visited up to 'Even though the name chosen recalls tabu search, proposed in [17], [18], there are substantial differences between our approach and tabu search algorithms. We mention here: (i) the absence in the AS of any aspiration function, (ii) the difference of the elements recorded in the tabu list, permutations in the case of tabu search, nodes in the AS (our algorithms are constructive heuristics, which is not the case of tabu search). time t and forbids the ant to visit them again before n iterations (a tour) have been completed. When a tour is completed, the tabu list is used to compute the ant's current solution (i.e., the distance of the path followed by the ant). The tabu list is then emptied and the ant is free again to choose. We define tabuk the dynamically growing vector which contains the tabu list of the kth ant, tabUk the set obtained from the elements of tabuk, and tabuk(s) the sth element of the list (i.e., the sth town visited by the kth ant in the current tour). We call visibility q;j the quantity l/dij. This quantity is not modified during the run of the AS, as opposed to the trail which instead changes according to the previous formula (1). We define the transition probability from town i to town j for the kth ant as where allowedk = {N-tabuk} and where a and p are parameters that control the relative importance of trail versus visibility. Therefore the transition probability is a trade-off between visibility (which says that close towns should be chosen with high probability, thus implementing a greedy constructive heuristic) and trail intensity at time t (that says that if on edge (i,j) there has been a lot of traffic then it is highly desirable, thus implementing the autocatalytic process). 111. THE ALGORITHMS Given the definitions of the preceding section, the socalled ant-cycle algorithm is simply stated as follows. At time zero an initialization phase takes place during which ants are positioned on different towns and initial values rz, (0) for trail intensity are set on edges. The first element of each ant's tabu list is set to be equal to its starting town. Thereafter every ant moves from town i to town j choosing the town to move to with a probability that is a function (with parameters a and p, see formula (4)) of two desirability measures. The first, the trail T,, ( t ) ,g ives information about how many ants in the past have chosen that same edge (i, j ) ; the second, the visibility q,,, says that the closer a town the more desirable it is. Obviously, setting a = 0, the trail level is no longer considered, and a stochastic greedy algorithm with multiple starting points is obtained. After n iterations all ants have completed a tour, and their tabu lists will be full; at this point for each ant k the value of Lk is computed and the values Ar; are updated according to formula (3). Also, the shortest path found by the ants (i.e., mink Lk, k = 1, . . . , m) is saved and all the tabu lists are emptied. This process is iterated until the tour counter reaches the maximum (user-defined) number of cycles NCMAX, or all ants make the same tour. We call this last case stagnation behavior because it denotes a situation in which the algorithm stops searching for alternative solutions. We investigate this situation in Section IV. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. 32 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS-PART B CYBERNETICS, VOL 26, NO 1, FEBRUARY 1996 Formally the ant-cycle algorithm is: 1. Initialize: Set t := 0 Set NC := 0 For every edge (i,j) set an initial value ri3(t)= c for trail intensity and ArZ3 = 0 Place the m ants on the n nodes {t is the time counter} {NC is the cycles counter} 2. Set s := 1 { s is the tabu list index} For k := 1 to m do Place the starting town of the kth ant in tabuk(s) 3. Repeat until tabu list is full {this step will be repeated (n - 1) times} Set s := s + 1 For k := 1 to m do Choose the town j to move to, with probability P:j (t) given by Eq. (4) {at time t the kth ant is on town i = tabuk(s - 1)) Move the kth ant to the town j Insert town j in tabuk(s) 4. For k := 1 to m do Move the kth ant from tabuk(n) to tabuk(1) Compute the length LI, of the tour described by the kth ant Update the shortest tour found For every edge ( i , j ) For k:= 1 to m do E 0 otherwise if (i,j) E tour described by tabuk 5. For every edge ( 2 , j ) c ompute rZ3(t + n) according to equation rZj(+t n) = p . r,,(t) + Arz3 Set t:=t+n Set NC := NC + 1 For every edge (i, j ) set ArZj := 0 then 6. If (NC < NCMAX) and (not stagnation behavior) Empty all tabu lists Goto step 2 Print shortest tour else stop The complexity of the ant-cycle algorithm i s O(NC.n2 .rn) if we stop the algorithm after NC cycles. In fact step 1 is O(n2 + m), step 2 is O(rn), step 3 i s O(n2 . m), step 4 is O(n2. m) ,s tep 5 is O(n2) ,s tep 6 is O(n.rn).S ince we have experimentally found a linear relation between the number of towns and the best number of ants (see Section V-A), the complexity of the algorithm is O(NC . n3). We also experimented with two other algorithms of the AS, which we called ant-density and ant-quantity algorithms [6], [12]. They differ in the way the trail is updated. In these two models each ant lays its trail at each step, without waiting for the end of the tour. In the ant-density model a quantity Q of trail is left on edge ( i , j ) every time an ant goes from i to j ; in the ant-quantity model an ant going from i to j leaves a quantity Q/d,, of trail on edge (i,j) every time it goes from i to j . Therefore, in the ant-density model we have Q 0 otherwise if the kth ant goes from i and j between time t to t + 1 (5) if the kth ant goes from i to j between time t and t + 1 AI-; = { and in the ant-quantity model we have (6) 0 otherwise. From these definitions it is clear that the increase in trail on edge (i,j) when an ant goes from z to j is independent of dZ, in the ant-density model, while it is inversely proportional to d,, in the ant-quantity model (i.e., shorter edges are made more desirable by ants in the ant-quantity model). IV. EXPERIMENTASLT UDY1 : PARAMETER SE'ITING AND BASIC PROPERTIES We implemented the three algorithms (ant-cycle, ant-density and ant-quantity) of the AS and investigated their relative strengths and weaknesses by experimentation. Since we have not yet developed a mathematical analysis of the models, which would yield the optimal parameter setting in each situation, we ran simulations to collect statistical data for this purpose. The parameters considered here are those that affect directly or indirectly the computation of the probability in formula (4): a: the relative importance of the trail, a! 2 0; 0 ,B: the relative importance of the visibility, /3 2 0; p: trail persistence, 0 5 p < 1 (1 - p can be interpreted * Q: a constant related to the quantity of trail laid by ants as trail evaporation); (see formulas (3), (3, and (6)). The number m of ants has always been set equal to the number n of cities (see Section V-A for the explanation). We tested several values for each parameter while all the others were held constant (over ten simulations for each setting in order to achieve some statistical information about the average evolution). The default value of the parameters was a! = 1, p = 1, p = 0.5, Q = 100. In each experiment only one of the values was changed, except for a and ,B, which have been tested over different sets of values, as discussed at the end of this section. The values tested were: a: E {0,0.5,1,2,5}, ,O E {0,1,2,5}, p E (0.3,0.5,0.7,0.9,0.999} and Q E {I, 100, lOOOO}. Preliminary results, obtained on small-scale problems, have been presented in [6], [7], and [12], [13]; all the tests reported in this section are based, where not otherwise stated, on the Oliver30 problem, a 30-cities problem described in [3413. All the tests have been carried out for N C M A=~ 5 000 cycles and were averaged over ten trials. 31n [34] genetic algorithms were applied to solve the Oliver30 problem; they could find a tour of length 424.635. The same result was often obtained by ant-cycle, which also found a tour of length 423.741. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. DORIGO et al.: ANT SYSTEM: OPTIMIZATION BY A COLONY OF COOPERATINI ant-density ant-quantity ant-cycle TABLE I COMPARISONA MONGA NT-QUANTITYA,N T-DENSITY, AND ANT-CYCLEA. VERAGESO VER 10 TRIALS Best parameter set Average result Best result a=l, p=5, pO.99 426.740 424.635 a=l, p=5, p0.99 427.315 426.255 a=l, p=5, p0.5 424.250 423.741 To compare the three models we first experimentally determined the parameters best values for each algorithm, and then we ran each algorithm ten times using the best parameters set. Results are shown in Table I. Parameter Q is not shown because its influence was found to be negligible. Both the ant-density and the ant-quantity models have given worse results than those obtained with ant-cycle. The reason is to be found in the kind of feedback information which is used to direct the search process. Ant-cycle uses global information, that is, its ants lay an amount of trail which is proportional to how good the solution produced was. In fact, ants producing shorter paths contribute a higher amount of trail than ants whose tour was poor. On the other side, both ant-quantity and ant-density use local information. Their search is not directed by any measure of the final result achieved. Therefore, it is not surprising that they gave worse performance results (details can be found in [6]). The optimal value p = 0.5 in ant-cycle can be explained by the fact that the algorithm, after using the greedy heuristic to guide search in the early stages of computation, starts exploiting the global information contained in the values rt3 of trail. Ant-cycle needs therefore to have the possibility to forget part of the experience gained in the past in order to better exploit new incoming global information. Given that we found ant-cycle to be superior to the other two algorithms, we decided to deepen our understanding of ant-cycle alone. Figs. 3-5 present traces of a typical run of the ant-cycle algorithm applied to the Oliver30 problem. In particular, Fig. 3 shows the length of the best found tour at each cycle, and Fig. 4 the standard deviation of the tour lengths of the population at each cycle of the same run. Note how in the early cycles the AS identifies good tours which are subsequently refined in the rest of the run. Since the standard deviation of the population’s tour lengths never drops to zero, we are assured that the algorithm actively searches solutions which differ from the best-so-far found, which gives it the possibility of finding better ones. The search for better solutions is carried on in selected regions of the search space determined by the trail resulting from preceding cycles. This can be observed in Fig. 5, in which the vertical axis shows the average node branching of the problem’s graph. Although the graph is initially fully connected, those arcs whose trail level falls below a (very small) value E, which makes their probability of being chosen by ants negligible, are removed. The node branching of node i is therefore given by the number of edges which exit from node i and which have a trail level higher than E. Note how at the beginning of the run an ant could go from any node to any other (except for tabu 3 AGENTS 33 Best lour length 400 Cycles 300 I 0 500 1000 1500 2000 2500 3000 Fig. 3. Evolution of best tour length (Oliver30). Typical run. Tour lenglh standard deviation 60 Cycles 0 500 lob0 li00 aooo 2500 3000 _ . Fig. 4. (Oliver30). Typical run. Evolution of the standard deviation of the population’s tour lengths Average no& branching 5 -- Cycles 0 500 1000 1500 2000 2500 3000 0 - I Fig. 5. (Oliver30). Typical run. Evolution of the average node branching of the problem’s graph list constraints), while at the end the possible choices are significantly reduced. The same process can be observed in the graphs of Fig. 6, where the AS was applied to a very simple 10-cities problem (CCAO, from [20]), and which depict the effect of ant search on the trail distribution. In the figure the length of the edges is proportional to the distances between the towns; the thickness of the edges is proportional to their trail level. Initially (Fig. 6(a)) trail is uniformly distributed on every edge, and search is only directed by visibilities. Later on in the search process (Fig. 6(b)) trail has been deposited on the edges composing good tours, and is evaporated completely from edges which belonged to bad tours. The edges of the worst tours actually resulted to be deleted from the problem graph, thus causing a reduction of the search space. Besides the tour length, we also investigated the stagnation behnvior, i.e. the situation in which all the ants make the same tour. This indicates that the system has ceased to explore new possibilities and no better tour will arise. With some parameter settings we observed that, after several cycles, all the ants followed the same tour despite the stochastic nature of the algorithms because of a much higher trail level on the edges Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. 34 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS-PART B. CYBERNETICS, VOL. 26, NO. 1, FEBRUARY 1996 10 3 5 (a) CD) Fig. 6. Evolution of trail distribution for the CCAO problem. (a) Trail distribution at the beginning of search. (b) Trail distribution after 100 cycles. Average node branching 15 .. 10 5 - - Fig. 8. Ant-cycle behavior for different combinations of C Y - ~ parameters. *-The algorithm finds the best known solution without entering the stagnation behavior. oo-The algorithm doesn’t find good solutions without entering 0 500 1000 1500 2000 2500 3000 the stagnation behavior. @-The algorithm doesn’t find good solutions and .- 2 , ..... 0 - ..... . ................................... .........._. .. enters the stagnation behavior. Fig. 7. (Oliver30). Typical run obtained setting cy = 5 and p = 2. Average node branching of a rnn going to stagnation behavior comprising that tour than on all the others. This high trail level made the probability that an ant chooses an edge not belonging to the tour very low. For an example, see the Oliver30 problem, whose evolution of average branching is presented in Fig. 7. In fact, after 2500 cycles circa, the number of arcs exiting from each node sticks to the value of 2, which-given the symmetry of the problem-means that ants are always following the same cycle. This led us to also investigate the behavior of the ant-cycle algorithm for different combination of parameters a and p (in this experiment we set N C M A ~= 2500). The results are summarized in Fig. 8, which was obtained running the algorithm ten times for each couple of parameters, averaging the results and ascribing each averaged result to one of the three following different classes. 0 Bad solutions and stagnation: For high values of a the without finding very good solutions. This situation is * Bad solutions and no stagnation: If enough importance was not given to the trail (i.e., Q was set to a low value) algorithm enters the stagnation behavior very quickly 20 Fig. 9. The best tour obtained with 342 cycles of the ant-cycle algorithm for the Oliver30 problem (CY = 1, p = 5, p = 0.5, Q = loo), real length =423.741, integer length =420. represented by the symbol 0 in Fig. 8; then the algorithm did not find very good solutions. This situation is represented by the symbol 00. 0 Good solutions: Very good solutions are found for a and p values in the central area (where the symbol used is 0). In this case we found that different parameter combinations ( i . e . , ( Q = l , p = l ) , ( a ! = l , P = 2 ) , ( a : = l , p = 5 } , (a = 0.5, p = 5)) resulted in the same performance level: the same result (the shortest tour known on the Oliver30 problem) was obtained in approximately the same number values of a! make the algorithm very similar to a stochastic multigreedy algorithm. In Fig. 9 we present the best tour4 we found using the experimentally determined optimal set of parameters values for the ant-cycle algorithm, a! = 1, /3 = 5, p = 0.5, Q = 100. This tour is of length 423.741 and presents two inversions, 2-1 and 25-24, with respect to the best tour published in [34]. The major strengths of the ant-cycle algorithm can be summarized as: 0 Within the range of parameter optimality the algorithm always finds very good solutions for all the tested problems of cycles. The results obtained in this experiment are consistent with our understanding of the algoritha: a high value for a means that is very important and therefore ants tend to choose 4Th~sre sult is not competitive with results obtamed by special-purpose edges chosen by other ants in the past. On the other hand, low algorithms [2] Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. DORIGO et al.: ANT SYSTEM: OPTIMIZATION BY A COLONY OF COOPERATING AGENTS 35 Best tour length 400 t Cycles 10 10-0 I ri 0 O- g T T-T 0 -0 T 300 ! I I I 8 0 500 1000 1500 Fig. 11. An optimal solution for the 4 x 4 grid problem. Fig. 10. new optimal value (423.741) after NC = 342 cycles. The algorithm finds good values for Oliver30 very quickly and the (Oliver30 and other problems which will be presented later). The algorithm quickly finds good solutions (see Fig. 10; for a comparison with other heuristics, see Section VI); nevertheless it doesn’t exhibit stagnation behavior, i.e. the ants continue to search for new possibly better tours. With increasing dimensions the sensitivity of the parameter values to the problem dimension has been found to be very low. We partially tested the ant-cycle algorithm on the EilonSO and Eilon75 problems [ 141 with a limited number of runs and with a number of cycles bounded by N C M A=~ 3000. Under these restrictions we never got the best-known result, but a quick convergence to satisfactory solutions was maintained for both the problems. V. EXPERIMENTASLT UDY2 : EXTENSIONASN D ADVANCEDPR OPERTIES In this section we discuss experiments which have deepened our understanding of the ant-cycle algorithm. We study how synergy affects the algorithm performance (Section V-A). We compare the performance of ant-cycle when all the ants are initially positioned on a unique starting point with the performance obtained when each ant starts from a different town (Section V-B). Finally, we study the effects of an elitist strategy which increases the importance of the ant that found the best tour (Section V-C), and the change in performance of the AS when the problem dimension increases (Section V-D). A. Synergistic Effects We ran a set of experiments to assess both the impact of the number m of ants, and the importance of communication through trail, on the efficiency of the solution process. In this case, the test problem involved finding a tour in a 4 x 4 grid of evenly spaced points: this is a problem with a priori known optimal solution (160 if each edge has length 10, see Fig. 11). The result was that there is a synergistic effect in using many ants and using the trail communication system; that is, a 1.0 t 1‘0 + (a) (b) Fig. 12. mance. In (a) a = 0, in (b) cy = 1. Synergy: Communication among ants (a > 0) improves perforin which the synergistic effects reach a maximum. The results are shown in Figs. 12 and 13. In Fig. 12 we compare a situation in which ants do not communicate (a = 0), with a situation in which they communicate (a = 1). Results show that communication is indeed exploited by the algorithm. In Fig. 13 we report an experiment in which the 4 x 4 grid problem was solved with m E {4,8,16,32,64}. The abscissa shows the total number of ants used in each set of runs, the ordinate shows the so-called one-ant cycles, that is, the number of cycles required to reach the optimum, multiplied by the number of ants used (in order to evaluate the efficiency per ant, and have comparable data). The algorithm has always been able to identify the optimum with any number m 2 4 of ants. Tests run on a set of T x T grid problems (T = 4,5,6,7,8) have substantiated our hypothesis that the optimal number of ants is close to the number of cities (m M n); this property was used in the assessment of the computational complexity (Section 111). A second set of tests has been carried out with 16 cities randomly distributed (16 cities random graph). Again we found that the optimal performance was reached with 8-16 ants, a number comparable with the dimension of the problem to be solved. B. Initialization This experiment was run in order to study whether the initial ant distribution influences the AS performance. We tested whether there is any difference between the case in which all ants at time t = 0 are in the same city and the case in which they are uniformly distributed5. We used ant-cycle run with n ants is more search-effective with communication among ants than with no communication. In case of commu- We say ants are uniformly distributed if there is, at time t = 0, the same inteeer number of ants on every town (this forces m to be a multiple of n). nicating ants, there is an “optimality point” given by m M n Uniform distribution was the default starting configuration in the experiments Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. 36 hoblem 4x4 5x5 6 x 6 7 x 7 8x8 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS-PART B: CYEERNETICS, VOL. 26, NO. 1, FEBRUARY 1996 Best Average number of Time requlred to (dmenslon) solution cycles to find the find the optimum* optimum (seconds) 16 160 5.6 8 25 254.1 13.6 75 36 360 60 1020 49 494.1 320 13440 64 640 970 97000 1200 (0 -g 1000 6 800 0 600 ”0 nti, 400 200 z 0 C 5 4 8 16 32 64 Number m of ants Fig. 13. Number of one-ant cycles required to reach optimum as a function of the total number of ants for the 4 x 4 grid problem. Results are averaged over five runs. applied to the 16 cities random graph, to the 4 x 4 grid, and to the Oliver30 problem. In all three cases, distributing ants resulted in better performance. We also tested whether an initial random distribution of the ants over the cities performed better than a uniform one; results show that there is no significant difference between the two choices, even though the random distribution obtained slightly better results. C. Elitist Strategy We use the term “elitist strategy” (because in some way it resembles the elitist strategy used in genetic algorithms [19]) for the modified algorithm in which at every cycle the trail laid on the edges belonging to the best-so-far tour is reinforced more than in the standard version. We added to the trail of each arc of the best tour a quantity e . Q/L*, where e is the number of elitist ants6 and L* is the length of the best found tour. The idea is that the trail of the best tour, so reinforced, will direct the search of all the other ants in probability toward a solution composed by some edges of the best tour itself. The test were carried out again on the Oliver30 problem (the run was stopped after N C M A ~= 2500 cycles) and results indicated that there is an optimal range for the number of elitist ants: below it, increasing their number results in better tours discovered andlor in the best tour being discovered earlier; above it, the elitist ants force the exploration around suboptimal tours in the early phases of the search, so that a decrease in performance results. Fig. 14 shows the outcome of a test on the Oliver30 problem where this behavior is evident. D. Increasing the Problem Dimensions The algorithm complexity presented in Section 111, O(NC. presented in the previous sections. 61n our case the effect of an ant is to in crement the value of the trail on edges belonging to its tour; therefore in our case the equivalent of “saving” an individual is to reinforce its contribution. 2500 2250 2000 1750 1500 1250 loo0 750 500 250 0 Local optima: 425.82 423.91 423.74 0 1 2 4 8 12 16 20 30 Number e of elitist ants Fig. 14. number of elitist ants used (Oliver30). Results are averaged over five runs. Number of cycles required to reach a local optimum related to the n3), says nothing about the actual time required to reach the optimum. The experiment presented in this section is devoted to investigating the efficiency of the algorithm for increasing problem dimensions. Results are reported in Table I1 for the case of similar problems with increasing dimensions (T x T grids with the edge length set to 10, as in Fig. 11). It is interesting to note that, up to problems with 64 cities, the algorithm always found the optimal solution. VI. COMPARISON WITH OTHER HEURISTICS In this section we compare the efficacy of our algorithm to that of other heuristics, both tailored and general-purpose. A. Comparison with TSP-Tailored Heuristics In this section we compare ant-cycle with the heuristics contained in the package “Travel” [4]. This package represents the distances between the cities as an integer matrix and so we implemented an analogous representation in our system7. The results of the comparisons on Oliver30 are shown in Table 111, where the first column is the length of the best tour identified by each heuristic, and the second column is the improvement on the solution as obtained by the 2-opt heuristic (the 2-opt heuristic is an exhaustive exploration of all the permutations obtainable by exchanging 2 cities). Comparisons have been carried out also with the Lin-Kemighan [27] improvement of 71n this case distances between towns are integer numbers and are computed according to the standard code proposed in [3 11. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. DONG0 et al.: ANT SYSTEM OPTIMIZATION BY A COLONY OF COOPERATING AGENTS 31 As TS SA TABLE In F’ERFORMANCE OF THE ant-cycle ALGORITHMCO MPARED WITH OTHERA PPROACHERSE. SULTS ARE AVERAGEDO VER TEN RUNS, AND ROUNDEDTO THE NEARESTIN TEGER.8 Best Average Std.dev. 420 420.4 1.3 420 420.6 1.5 422 459.8 25.1 Far Insert Near Insert Sweep Random TABLE IV PERFORMANCE OF AS COMPARED TO TS AND SA ON THE OLIVER30 PROBLEM. RESULTS ARE AVERAGEDO VERT ENR UNSU SINGI NTEGEDRIS TANCES the first-column solutions, which has been able to reduce the length of any tour to 420 (or 421, depending on the starting solution provided by the basic algorithms). Note how ant-cycle consistently outperformed 2-opt, while its efficacy-i.e., the effectiveness it has in finding very good solutions--can be compared with that of Lin-Kernighan. On the other hand, our algorithm requires a much longer computational time than any other tested special-purpose heuristic. As a general comment of all the tests, we would like to point out that, given a good parameter setting (for instance a! = 1, ,B = 5, p = 0.5, Q = 100, e = 8), our algorithm consistently found the best known solution for the Oliver30 problem, and converged quickly toward satisfactory solutions. It always identified for Oliver30 the best-known solution of length 423.741 in less than 400 cycles, and it took only =lo0 cycles to reach values under 430. The algorithm never fell into the stagnation behavior. In fact, the average branching was always greater than 2, and the average length of tours was never equal to the best tour found but remained somewhat above it. This indicates that the ants followed different tours. B. Comparison with General-purpose Heuristics We also compare ant-cycle with other general-purpose heuristics. This comparison is more fair to the AS, which in fact is a general-purpose heuristic, and not a specialized algorithm for the TSP. To run the comparisons, we implemented a Simulated Annealing (SA) [l], and a Tabu Search (TS) [17], [18]; we let each of them run 10 times on the Oliver30 data. SA used the annealing function T(t + 1) = a!T(t)w, ith a = 0.99; TS was implemented with tabu list length varying in the interval [20, 501. TS and SA, and the AS as well, were allowed to run for 1 hour on a IBM-compatible PC with 80386 Intel processor. The results are presented in Table IV. Results show that the AS for this problem was as effective as TS and better than SA, when running under the same hardware and time constraints. VII. GENERALITOYF THE APPROACH As we said in Section I, the AS is both versatile and robust. Versatility is exemplified by the ease with which AS can be applied to the asymmetric TSP (ATSP), a particular kind of TSP (Section VII-A). Robustness is exemplified by the possibility of using the same algorithm, although appropriately adapted, to solve other combinatorial optimization problems like the quadratic assignment problem (QAP), and the job-shop scheduling problem (JSP) (Section VII-B). A. Versatility: The ATSP The asymmetric traveling salesman problem is a TSP in which the distance between two nodes is not symmetric (i.e., in general d,, # &). The ATSP is more difficult than the TSP; in fact, while symmetric TSP can be solved optimally even on graphs with several thousand nodes, ATSP instances, and particularly ATSP instances where the distance matrix is almost symmetric, can be solved to the optimum only on graphs with a few dozen nodes [16], [26]. The application of the AS to the ATSP is straightforward, as no modifications of the basic algorithm are necessary. The computational complexity of a cycle of the algorithm remains the same as in the TSP application, as the only differences are in the distance and trail matrices which are no longer symmetric. We chose as test problem the RY48P problem [16], a difficult problem instance with a distance distribution that is hard to solve even with tailored heuristics and branch and bound procedures. We ran AS 5 times on it, each time for 4000 cycles. The average length of the best found tour was 14899, that is 3.3% longer than the optimal one. The average number of cycles to find this result was 1517. B. Robustness: QAP and JSP Let’s now consider the robustness of the AS approach. Many combinatorial problems can be solved by the AS. To apply the autocatalytic algorithm to a combinatorial problem requires defining: 1) an appropriate graph representation with search by many 2) the autocatalytic (i.e. positive) feedback process; 3) the heuristic that allows a constructive definition of the solutions (which we also call “greedy force”); 4) the constraint satisfaction method (that is, the tabu list). This has been done for two well-known combinatorial optimization problems-Quadratic Assignment (QAP) and Job- Shop Scheduling (JSP)--each time obtaining an adapted version of the AS that could effectively handle the relative problem. The most difficult (and ad hoc) tasks to face when applying the AS are to find an appropriate graph representation for the problem to be solved and a greedy force as heuristic. A QAP of order n is the problem that arises when trying to assign n facilities to n simple agents for the problem; Quadratic Assignment Problem: 8The name “basic” means the basic heuristic, with no improvement. locations. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. 38 IEEE TRANSACTIONS ON SYSTEMS. MAN, AND CYBERNETICS-PART B: CYBERNETICS, VOL. 26, NO. 1, FEBRUARY 1996 Formally the problem is usually defined using two n x n (symmetric) matrices D = {dZ3}, where d,, is the distance between location i and location j ; F = { f h k } , where f h k is the flow (of information, products or some other quantity) between facility h and facility k. A permutation 7r is interpreted as an assignment of facility h = ~ ( ito) lo cation i, for each i = 1,. . . ,n. The problem is then to identify a permutation T of both row and column indexes of the matrix F that minimizes the total cost: n To apply AS to QAP we used the same algorithm as in the case of the TSP, after having studied an approximation of the QAP objective function that allows a problem representation on the basis of a single matrix which is used by the heuristic. The QAP objective function was expressed by a combination of the “potential vectors” of distance and flow matrices. The potential vectors, 2) and 3, are the row sums of each of the two matrices. Consider the following example 50 30 0 50 110 20 50 01 L 8 0 l From the two potential vectors, a third matrix S is obtained, where each element is computed as Szh = d, . fh, d, and fh being elements of the potential vectors. ~ 720 660 780 480 1200 1100 1300 800 1440 1320 1560 960 ’ 1680 1540 1820 1120 The ants choose the node to move to using the inverse of the values of S as visibility data, qzh = l/szhr thus interpreting each element Szh as the heuristic value of the choice of assigning to location i the facility h. To show how the heuristic works to build a solution we assume, for simplicity, that the ants act in a deterministic way (and not probabilistically, as it happens in the algorithm), and we don’t consider the effect of the trail (i.e., we set all trails 7th = 1). In constructing the solution we consider the columns of matrix S one by one, starting from that corresponding to the activity with greatest flow potential, and we assign this activity to the location with least distance potential, according to the “min-max” rule. In our example first activity 3 will be assigned to location 1 because the element a13 is the smallest of its column: we then pair activity 1 to location 2 (the coupling activity 1-location 1 is inhibited because location 1 already has an assigned activity); continuing in the same way one obtains the couplings 2-3, and 4 4 . s= [ TABLE V AVERAGEODV ER FIVE RUNS.B ESTK NOWN RESULTS ARE IN BOLD COMPARISOOFN TH E AS WITH OTHER HEURISTIC APPROACHERSE SULTSA RE Best known Ant System (AS) AS with non deterministic hill climbing Tabu Search Genetic Algorithm Evolution Strategy Sampling & Clustering sirnulared h e a l i n g Nugent -2% 1150 1150 1150 1150 1160 1168 1150 We compared AS, and a version of the AS to which was added a non deterministic hill climbing procedure, with many other well know heuristics (see [28] for more details). Experiments were run on IBM-compatible PC’s with a 80286 Intel processor, and were stopped after one hour time. The test problems used are those known as Nugent problems [29], Elshafei [15], and Krarup 1251. As can be seen in Table V, the performance of AS was always very good [5]. Ant System always found a result within 5% of the best known, while AS with local optimization always found, except for the Nugent 30 problem, the best known solution. This application is described in details in [28]. The JSP can be described as in the following. A set of M machines and a set of J jobs are given. The jth job (j = 1,. . . , J ) consists of an ordered sequence (chain) of operations from a set 0 = {. . . oJm.. .}. Each operation oJm E 0 belongs to job j and has to be processed on machine m for djm consecutive time instants. N = 101 is the total number of operations. The problem is to assign the operations to time intervals in such a way that no two jobs are processed at the same time on the same machine and the maximum of the completion times of all operations is minimized [22]. To apply the AS to JSP we chose the following representation. A JSP with M machines, J jobs and operation set 0 is represented as a directed weighted graph Q = (0’,A) where 0’ = 0 U {oo}, and A is the set of arcs that connect 00 with the first operation of each job and that completely connect the nodes of 0 except for the nodes belonging to a same job. Nodes belonging to a same job are connected in sequence (that is, a node is only connected to its immediate successor, see Fig. 15). Note that graph Q is not the graph with cliques representing machines that is usually utilized to represent the JSP. Node 00 is necessary in order to specify which job will be scheduled first, in case several jobs have their first operation on the same machine. We have therefore N + 1 nodes and 7+ I JI arcs, where all the nodes are painvise connected except 00, which is connected only to the first operation of each job. Each arc is weighted by a pair of numbers, {?-kL,Vkl}. The first, T ~ Lis, t he trail level, while the second is the visibility v k l , and is computed according to a desirability measure derived from a greedy problem specific heuristic like the Longest Processing Time or the Shortest Completion Time. The order in which the nodes are visited by each ant specifies the proposed solution. For instance, consider Job-Shop Scheduling Problem: N(N-1) Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. DORIGO et al.: ANT SYSTEM OPTIMIZATION BY A COLONY OF COOPERATING AGENTS - 39 o=o, l=oll 2= 0, 3= 0 , 4= O,, 5= 0, 6= o , ~ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 ~ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 O O o O o o o o o o 0 0 0 0 0 0 0 0 0 0 ~ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Fig. 15. arrows (in bold) are intended to represent a pair of directed arcs. AS graph for a 3 jobs and 2 machines JSP. Connections with no Fig. 16. problem. The steady-state transition matrix for a randomly generated lo-town a 3 x 2 problem (3 jobs, 2 machines): it would be represented in our system by the graph presented in Fig. 15. We suppose the first machine processes operations 1, 3, 5, and the second one the others. All ants are initially in 00; later on they have to identify at each step a feasible permutation of the remaining nodes. To cope with this problem, transition probabilities have to be slightly modified with respect to those computed according to formula (4): in order to have a feasible permutation it is in fact necessary to define the set of allowed nodes in any step not only through the tabu list, but also in a problem-dependent way. For each ant k, let Gk be the set of all the nodes still to be visited and SI, the set of the nodes allowed at the next step. Initially Gk = {1,2,3,4,5,6} and sk = {1,2,3}. Transition probabilities are computed on the basis of formula (4), where the set of allowed nodes is equal to s k . When a node is chosen, it is appended to the tabu list and deleted from Gk and from S k ; if the chosen node is not the last in its job then its immediate successor in the job chain is added to Sk. This procedure ensures the possibility to always produce a feasible solution, possibly the optimal one. The process is iterated until Gk = @. At the end, the order of the nodes in the permutation given by the tabu list specifies the solution proposed by ant k. The trails can thus be computed in the usual way and they are laid down as specified by the ant cycle algorithm. For example, suppose that an ant yielded the solution 7r = (0,1,4,2,5,3,6); this would direct the order of the operations imposing the precedences { ( 1,5), ( 1,3), (5,3)} and {(4,2), (4,6), (2,6)}, respectively. This approach has been implemented and successfully applied to JSP instances of dimension 10 x 10 and 10 x 15 (10 jobs, 15 machines). For each of these problems we always obtained a solution within 10% of the optimum [8], which can be considered a promising result. VIII. DISCUSSIOONF SOME AS CHARACTERISTICS A major issue in defining any distributed system is the definition of the communication protocol. In the AS a set of ants communicate by modifications of a global data structure: after each tour the trail left on each ant’s tour will change the probability with which the same decision will be taken in the future. A heuristic also guides ants in the early stages of the computational process, when experience has not yet accumulated into the problem structure. This heuristic automatically loses importance (remember the coefficient p related to evaporation) as the experience gained by ants, and saved in the problem representation, increases. One way to explain the behavior of AS on the TSP problem is the following. Consider the transition matrix pk(t) of ant k: every element pfj (t) is the transition probability from town i to town j at time t as defined by (4). At time t = 0 each pt3 (0) is proportional to vzj, i.e., closer towns are chosen with higher probability. As the process evolves, p k ( t ) changes its elements according to (1) and (4). The process can therefore be seen as a space deformation, in which path cost is reduced between towns which are connected by edges with a high amount of traffic, and, conversely, path cost is incremented between towns connected by edges with low traffic levels. From simulations we observed that the matrix p k ( t ) , at least in the range of optimality for our parameters, converges to a state’ that is very close to stationary (i.e., variations in the transition matrix p k ( t ) are very small). When this state is reached the behavior of the ants is dependent on the kind of transition matrix obtained. We observed two situations: in the most rare one, occurring (as we saw in Section IV) for particular parameter settings, only two transition probabilities are significantly higher than zero in every row and therefore all the ants choose the same edge at each step and no new tour is searched. In the most common situations instead, most of the rows have only a few transition probabilities with a significant value. In these cases search never stops, even if the number of significant transitions is highly reduced, with respect to the initial situation. Consider for example Fig. 16, obtained as the steady-state transition matrix for a randomly generated 10- town problem: the area of each circle is proportional to the corresponding value of the transition probability. An ant in town 1 has a very high probability to go either to town 5 (near 50%) or to town 2 (near 35%), and a low probability of choosing any other edge. A similar analysis holds for ants in any other town; from towns 9 and 0, for example, any destination is equally probable. 9The stochastic process that rules the evolution of the matrix p k ( t ) is a Markov process with infinitc memory. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. 40 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS-PART B CYBERNETICS, VOL 26, NO 1, FEBRUARY 1996 Another way to interpret how the algorithm works is to imagine having some kind of probabilistic superimposition of effects: each ant, if isolated (that is, if Q = 0), would move with a local, greedy rule. This greedy rule guarantees only locally optimal moves and will practically always lead to bad final results. The reason the rule doesn’t work is that greedy local improvements lead to very bad final steps (an ant is constrained to make a closed tour and therefore choices for the final steps are constrained by early steps). So the tour followed by an ant ruled by a greedy policy is composed of some (initial) parts that are very good and some (final) parts that are not. If we now consider the effect of the simultaneous presence of many ants, then each one contributes to the trail distribution. Good parts of paths will be followed by many ants and therefore they receive a great amount of trail. On the contrary, bad parts of paths are chosen by ants only when they are obliged by constraint satisfaction (remember the tabu list); these edges will therefore receive trail from only a few ants. IX. CONCLUSION This paper introduces a new search methodology based on a distributed autocatalytic process and its application to the solution of a classical optimization problem. The general idea underlying the Ant System paradigm is that of a population of agents each guided by an autocatalytic process directed by a greedy force. Were an agent alone, the autocatalytic process and the greedy force would tend to make the agent converge to a suboptimal tour with exponential speed. When agents interact it appears that the greedy force can give the right suggestions to the autocatalytic process and facilitate quick convergence to very good, often optimal, solutions without getting stuck in local optima. We have speculated that this behavior could be due to the fact that information gained by agents during the search1 process is used to modify the problem representation and in this way to reduce the region of the space considered by the search process. Even if no tour is completely excluded, bad tours become highly improbable, and the agents search only in the neighborhood of good solutions. The main contributions of this paper are the following. i) ii) We employ positive feedback as a search and optimization tool. The idea is that if at a given point an agent (ant) has to choose between different options and the one actually chosen results to be good, then in the future that choice will appear more desirable than it was before”. We show how synergy can arise and be useful in distributed systems. In the AS the effectiveness of the search carried out by a given number of cooperative ants is greater than that of the search carried out by the same number of ants, each one acting independently from the others. iii) We show how to apply the AS to different combinatorial optimization problems. After introducing the AS by an “Reinforcement of this nature is used by the reproduction-selection mechanism in evolutionary algorithms [23], [30], [33]. The main difference is that in evolutionary algorithms it is applied to favor (or disfavor) complete solutions, while in AS it is used to build solutions. application to the TSP, we show how to apply it to the ATSP, the QAP, and the JSP. We believe our approach to be a very promising one because of its generality (it can be applied to many different problenis, see Section VH), and because of its effectiveness in finding very good solutions to difficult problems. Related work can be classified in the following major areas: * studies of social animal behavior; * research in “natural heuristic algorithms”; stochastic optimization. As already pointed out the research on behavior of social animals is to be considered as a source of inspiration and as a useful metaphor to explain our ideas. We believe that, especially if we are interested in designing inherently parallel algorithms, observation of natural systems can be an invaluable source of inspiration. Neural networks [32], genetic algorithms [23], evolution strategies [30, 331, immune networks [3], simulated annealing [24] are only some examples of models with a “natural flavor”. The main characteristics, which are at least partially shared by members of this class of algorithms, are the use of a natural metaphor, inherent parallelism, stochastic nature, adaptivity, and the use of positive feedback. Our algorithm can be considered as a new member of this class. All this work in “natural optimization” [ 12, 91 fits within the more general research area of stochastic optimization, in which the quest for optimality is traded for computational efficiency. ACKNOWLEDGMENT The authors would like to thank two of the reviewers for the many useful comments on the first version of this paper. We also thank Thomas Back, Hughes Bersini, Jean-Louis Deneubourg, Frank Hoffmeister, Mauro Leoncini, Francesco Maffioli, Bernard Manderik, Giovanni Manzini, Daniele Montanari, Hans-Paul Schwefel and Frank Smieja for the discussions and the many useful comments on early versions of this paper. REFERENCES E. H. L. Aarts and J. H. M. Korst, Simulated Annealing and Boltzmann Machines. New York Wiley, 1988. J. L. Bentley, “Fast algorithms for geometric traveling salesman problems,” ORSA J. Computing, vol. 4, no. 4, pp. 387411, 1992. H. Bersini and F. J. Varela, “The immune recruitment mechanism: A selective evolutionary strategy,” in Proc. Fourth Int. Conf Genetic Algorithms. San Mateo, CA: Morgan Kaufmann, 1991, pp. 520-526. S. C. Boyd, W. R. Pulleyblank and G. Cornuejols, Travel Software Package, Carleton University, 1989. R. E. Burkhard, “Quadratic assignment problems,” Europ. J. Oper. Res., vol. 15, pp. 283-289, 1984. A. Colomi, M. Dorigo and V. Maniezzo, “Distributed optimization by ant colonies,” in Proc. First Europ. Conf ArtiJicial Life, F. Varela and P. Bourgine, Eds. A. Colomi, M. Dorigo and V. Maniezzo, “An investigation of some properties of an ant algorithm,” in Proc. Parallel Problem Solving from Nature Conference (PPSN ’92), R. Manner and B. Manderick Eds. Brussels, Belgium: Elsevier, 1992, pp. 509-520. A. Colorni, M. Dorigo, V. Maniezzo and M. Trubian, “Ant system for job-Shop scheduling,” JORBEL-Belgian J. Oper. Res., Statist. Conzp. Sci., vol. 34, no. 1, pp. 39-53. A. Colorni, M. Dorigo, F. Maffioli, V. Maniezzo, G. Righini and M. Trubian, “Heuristics from nature for hard combinatorial problems,” Tech. Rep. 93425, Dip. Elettronica e Informazione, Politecnico di Milano, Italy, 1993. Paris, France: Elsevier, 1991, pp. 134-142. Authorized licensed use limited to: De Montfort University. Downloaded on August 06,2021 at 13:41:51 UTC from IEEE Xplore. Restrictions apply. DORIGO et al.: ANT SYSTEM OPTIMIZATION BY A COLONY OF COOPERATI? [lo] J. L. Denebourg, J. M. Pasteels and J. C. Verhaeghe, “Probabilistic behavior in ants: A strategy of errors?,” J. Theoret. Biol., vol. 105, pp. 259-271, 1983. [ l l ] J. L. Denebourg and S. Goss, “Collective patterns and decision-making,” Ethology, Ecology & Evolution, vol. 1, pp. 295-311, 1989. [12] M. Dorigo, “Optimization, learning and natural algorithms,” Ph.D. Thesis, Dip. Elettronica e Informazione, Politecnico di Milano, Italy, 1992. [13] M. Dorigo, V. Maniezzo and A. Colorni, “Positive feedback as a search strategy,” Tech. Rep. 91-016, Politecnico di Milano, 1991. [14] S. Eilon, T. H. Watson-Gandy and N. Christofides, “Distribution management: Mathematical modeling and practical analysis,” Oper. Res. Quart., vol. 20, pp. 37-53, 1969. [15] A. E. Elshafei, “Hospital layout as a quadratic assignment problem,” Oper. Res. Quart., vol. 28, pp. 167-179, 1977. [16] M. Fischetti and P. Toth, “An additive bounding procedure for the asymmetric travelling salesman problem,” Mathemat. Prog., vol. 53, [17] F. Glover, “Tabu Search-Part I,” ORSA J. Computing, vol. 1, no. 3, [18] -, “Tabu Search-Part 11,” ORSA J. Computing, vol. 2, no. 1, pp. [ 191 D. E. Goldberg, Genetic Algorithms in Search, Optimization & Machine Learning. Reading, MA: Addison-Wesley, 1989. [20] B. Golden and W. Stewart, “Empiric analysis of heuristics,” in The Travelling Salesman Problem, E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy-Kan, D. B. Shmoys Eds.. New York Wiley, 1985. 1211 S. Goss, R. Beckers, J. L. Denebourg, S. Aron and J. M. Pasteels, “How trail laying and trail following can solve foraging problems for ant colonies,” in Behavioral Mechanisms of Food Selection, R. N. Hughes Ed., NATO-AS1 Series. Berlin: Springer-Verlag, vol. G 20, 1990. [22] R. L. Graham, E. L. Lawler, J. K. Lenstra and A. H. G. Rinnooy Kan, “Optimization and approximation in deterministic sequencing and scheduling: A survey,’’ in Annals Disc. Math., vol. 5, pp. 287-326, 1979. [23] J. H. Holland, Adaptation in Natural and Art$cial Systems. Ann Arbor, MI: The University of Michigan Press, 1975. [24] S. Kirkpatrick, C. D. Gelatt and M. P. Vecchi, “Optimization by simulated annealing,” Sci., vol. 220, pp. 671-680, 1983. [25] J. Krarup, P. M. Pruzan, “Computer-aided layout design,” Mathemat. Prog. Study, vol. 9, pp. 85-94, 1978. [26] E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy-Kan and D. B. Shmoys Eds., The Travelling Salesman Problem. New York: Wiley, 1985. [27] S. Lin and B. W. Kernighan, “An effective heuristic algorithm for the TSP,” Oper. Res., vol. 21, 498-516, 1973. [28] V. Maniezzo, A. Colorni and M. Dorigo, “The ant system applied to the quadratic assignment problem,” Tech. Rep. IRIDIN94-28, Universitk Libre de Bruxelles, Belgium, 1994. [29] C. E. Nugent, T. E. Vollmann and J. Ruml, “An experimental comparison of techniques for the assignment of facilities to locations,” Oper. Res., [30] I. Rechenberg, Evolutionsstrategie. Stuttgart: Fromman-Holzbog, 1973. [3 11 G. Reinelt, TSPLIB 1.0, Institut fur Mathematik, Universitat Augsburg, Germany, 1990. [32] D. E. Rumelhart and J. L. McLelland, Parallel Distributed Processing: Explorations in the Microstructure of Cogniton. Cambridge, MA: MIT Press, 1986. [33] H.-P. Schwefel, “Evolutionsstrategie und numerische optimierung,” Ph.D. Thesis, Technische Universitat Berlin, 1975. Also available as Numerical Optimization of Computer Models. New York Wiley, 198 1. [34] D. Whitley, T. Starkweather and D. Fuquay, “Scheduling problems and travelling salesman: The genetic edge recombination operator,” in Proc. Third Int. Con$ on Genetic Algorithms. San Mateo, CA Morgan Kaufmann, 1989. pp. 173-197, 1992. pp. 190-206, 1989. 4-32, 1990. vol. 16, pp. 150-173, 1968. \IG AGENTS 41 Marco Dorigo (S’92-M’93) was born in Milan, Italy, in 1961. He received the Laurea (Master of Technology) in industrial technologies engineering in 1986, and the Ph.D. in information and systems electronic engineering in 1992 from Politecnico di Milano, Milan, Italy. In 1992 he was a research fellow at the International Computer Science Institute, Berkeley, CA. In 1993 he became a NATO-CNR fellow at the IRIDIA Laboratory, Free University of Brussels, Belgium, and in 1994, he was awarded a Human Capital and Mobility two-year fellowship by the Commission of the European Community to continue his research at the IRIDIA laboratory, where he currently works. His areas of research include evolutionary computation, reinforcement learning, and their application to autonomous robotics and to combinatorial optimization. Dr. Dorigo is an Associate Editor for the IEEE TRANSACTIOONN SSY STEMS, MAN,A ND CYBERNETICanSd, he was the Guest Editor of a special issue on “Learning autonomous robots”. He is a member of the editorial board of the Evolutionary Computation journal and of the Adaptive Behavior journal. He is a member of the Politecnico di Milano Artificial Intelligence and Robotics Project, and of the Italian Association for Artificial Intelligence (AI*IA). He took part to several CEC ESPRIT Projects, and National research projects. Vittorio Maniezzo was born in Ferrara, Italy, in 1962. He received the Laurea (Master of Technology) in electronic engineering in 1986 and the Ph.D. degree in automatic control and computer science engineering in 1993, both from Politecnico di Milano, Milan, Italy. He is currently with the University of Bologna and is a member of the Politecnico di Milano Artificial Intelligence and Robotics Project. He took part to several CEC Esprit and National research projects. His current research interests are in the fields of machine learning (evolutionary techniques for sensonmotor coordination, cognitive modeling) and of combinatorial optimization (evolutionary heuristic algorithms, column generation techniques). Dr. Maniezzo is a member of the Italian Association for Artificial Intelligence (AI*IA) and of the Italian Association for Operations Research (AIRO). Albert0 Colorni was born in Milan, Italy, in 1946. He received the Laurea (Master of Technology) in electronic engineering in 1970 from Politecnico di Milano, Italy. He is an Professor of Operations Research at the Politecnico, and Director of the research center in Decision Support Systems for Environment and Land Use at the ME’ (Master Imprese-Politecnico). He currently works in the fields of Combinatorial Optimization (in particular, of heuristics from nature), DSS methodologies (Analytic Hierarchy Process and ELECTRE methods) and DSS applications to environmental impact assessment. Prof. Colorni is Associate Editor OF Rccerca Operatcva, the Italian journal of Operations Research.","['ant', 'system', 'optimization', 'colony', 'cooperating', 'agents', 'dorigo', 'member', 'maniezzo', 'colorni', 'abstract', 'ant', 'colonies', 'function', 'suggested', 'definition', 'computational', 'paradigm', 'call', 'ant', 'system', 'propose', 'approach', 'stochastic', 'combinatorial', 'optimization', 'main', 'characteristics', 'model', 'positive', 'feedback', 'distributed', 'computation', 'greedy', 'heuristic', 'positive', 'feedback', 'solutions', 'distributed', 'computation', 'premature', 'convergence', 'greedy', 'heuristic', 'helps', 'find', 'solutions', 'stages', 'search', 'process', 'apply', 'methodology', 'classical', 'traveling', 'salesman', 'problem', 'tsp', 'report', 'simulation', 'results', 'discuss', 'parameter', 'selection', 'model', 'compare', 'tabu', 'search', 'simulated', 'annealing', 'tsp', 'demonstrate', 'robustness', 'approach', 'show', 'ant', 'system', 'applied', 'optimization', 'problems', 'asymmetric', 'traveling', 'salesman', 'quadratic', 'assignment', 'job', 'shop', 'scheduling', 'discuss', 'characteristics', 'global', 'data', 'structure', 'distributed', 'communication', 'probabilistic', 'transitions', 'introduction', 'define', 'general', 'purpose', 'heuristic', 'used', 'solve', 'different', 'combinatorial', 'optimization', 'problems', 'heuristic', 'following', 'desirable', 'characteristics', 'applied', 'similar', 'versions', 'problem', 'example', 'straightforward', 'extension', 'traveling', 'salesman', 'problem', 'tsp', 'asymmetric', 'traveling', 'salesman', 'problem', 'atsp', 'robust', 'applied', 'minimal', 'changes', 'combinatorial', 'optimization', 'problems', 'quadratic', 'assignment', 'problem', 'qap', 'job', 'shop', 'scheduling', 'problem', 'jsp', 'population', 'approach', 'interesting', 'allows', 'exploitation', 'positive', 'feedback', 'search', 'mechanism', 'explained', 'manuscript', 'received', 'revised', 'september', 'july', 'december', 'dorigo', 'elettronica', 'informazione', 'politecnico', 'milano', 'milano', 'italy', 'india', 'mail', 'http', 'dorigo', 'dorigo', 'html', 'maniezzo', 'elettronica', 'informazione', 'politecnico', 'milano', 'milano', 'italy', 'informazione', 'italy', 'mail', 'maniezzo', 'http', 'www', 'maniezzo', 'colorni', 'elettronica', 'informazione', 'politecnico', 'milano', 'milano', 'italy', 'mail', 'colorni', 'identifier', 'makes', 'system', 'parallel', 'implementations', 'considered', 'desirable', 'properties', 'fact', 'applications', 'ant', 'system', 'outperformed', 'algorithms', 'problem', 'popular', 'approaches', 'simulated', 'annealing', 'tabu', 'search', 'compare', 'ant', 'system', 'believe', 'case', 'approach', 'view', 'applications', 'problems', 'similar', 'known', 'studied', 'basic', 'problems', 'present', 'application', 'standard', 'best', 'performing', 'algorithm', 'case', 'example', 'atsp', 'approach', 'discussed', 'distribute', 'search', 'called', 'ants', 'agents', 'simple', 'basic', 'capabilities', 'extent', 'behavior', 'real', 'ants', 'fact', 'research', 'behavior', 'real', 'ants', 'inspired', 'problems', 'studied', 'blind', 'ants', 'shortest', 'route', 'paths', 'colony', 'found', 'used', 'communicate', 'information', 'individuals', 'regarding', 'paths', 'used', 'decide', 'consists', 'pheromone', 'moving', 'ant', 'pheromone', 'varying', 'quantities', 'path', 'trail', 'ant', 'moves', 'random', 'ant', 'laid', 'trail', 'decide', 'high', 'probability', 'follow', 'trail', 'pheromone', 'collective', 'behavior', 'form', 'autocatalytic', 'behavior', 'ants', 'following', 'trail', 'attractive', 'trail', 'becomes', 'followed', 'process', 'characterized', 'positive', 'feedback', 'loop', 'probability', 'ant', 'chooses', 'path', 'increases', 'number', 'ants', 'path', 'consider', 'example', 'experimental', 'setting', 'shown', 'fig', 'path', 'ants', 'example', 'food', 'source', 'fig', 'appears', 'path', 'position', 'ants', 'position', 'opposite', 'direction', 'decide', 'turn', 'right', 'left', 'fig', 'choice', 'influenced', 'intensity', 'pheromone', 'left', 'ants', 'higher', 'level', 'pheromone', 'autocatalytic', 'positive', 'feedback', 'process', 'process', 'causes', 'convergence', 'mechanism', 'exists', 'leads', 'utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'part', 'cybernetics', 'vol', 'february', 'fig', 'example', 'real', 'ants', 'ants', 'follow', 'path', 'points', 'ants', 'choose', 'following', 'different', 'paths', 'equal', 'probability', 'shorter', 'path', 'pheromone', 'laid', 'right', 'path', 'gives', 'ant', 'higher', 'probability', 'turn', 'right', 'ant', 'point', 'probability', 'turn', 'right', 'left', 'previous', 'pheromone', 'alternative', 'paths', 'path', 'shorter', 'ant', 'following', 'reach', 'ant', 'following', 'path', 'fig', 'result', 'ant', 'returning', 'find', 'trail', 'path', 'half', 'ants', 'chance', 'decided', 'approach', 'ones', 'prefer', 'probability', 'path', 'path', 'number', 'ants', 'following', 'path', 'unit', 'higher', 'number', 'ants', 'following', 'causes', 'quantity', 'pheromone', 'shorter', 'path', 'faster', 'longer', 'probability', 'single', 'ant', 'chooses', 'path', 'follow', 'shorter', 'final', 'result', 'ants', 'choose', 'shorter', 'path', 'algorithms', 'going', 'define', 'next', 'sections', 'models', 'derived', 'study', 'real', 'ant', 'colonies', 'call', 'system', 'ant', 'system', 'algorithms', 'introduce', 'ant', 'algorithms', 'interested', 'simulation', 'ant', 'colonies', 'artificial', 'ant', 'colonies', 'optimization', 'system', 'major', 'differences', 'real', 'natural', 'artificial', 'ants', 'memory', 'blind', 'environment', 'discrete', 'believe', 'ant', 'colony', 'metaphor', 'useful', 'explain', 'model', 'consider', 'graph', 'fig', 'possible', 'situation', 'fig', 'ideas', 'suppose', 'distances', 'equal', 'let', 'half', 'fig', 'let', 'consider', 'intervals', 'ants', 'unit', 'ant', 'speed', 'unit', 'fig', 'example', 'artificial', 'ants', 'initial', 'graph', 'distances', 'trail', 'graph', 'edges', 'ants', 'choose', 'turn', 'right', 'left', 'equal', 'probability', 'trail', 'shorter', 'edges', 'average', 'ants', 'ant', 'pheromone', 'trail', 'intensity', 'example', 'simpler', 'successive', 'interval', 'trail', 'ants', 'choice', 'random', 'average', 'ants', 'node', 'fig', 'ants', 'find', 'trail', 'intensity', 'path', 'leads', 'laid', 'ants', 'trail', 'intensity', 'path', 'obtained', 'sum', 'trail', 'laid', 'ants', 'ants', 'reached', 'fig', 'probability', 'choosing', 'path', 'expected', 'number', 'ants', 'going', 'going', 'versus', 'true', 'ants', 'came', 'process', 'ants', 'choose', 'shortest', 'path', 'idea', 'given', 'point', 'ant', 'choose', 'different', 'paths', 'chosen', 'ants', 'high', 'trail', 'level', 'chosen', 'higher', 'probability', 'high', 'trail', 'levels', 'short', 'paths', 'organized', 'follows', 'section', 'contains', 'description', 'implemented', 'definition', 'application', 'problem', 'algorithm', 'structure', 'problem', 'structure', 'introduce', 'section', 'describes', 'different', 'ways', 'apply', 'algorithm', 'sections', 'report', 'experiments', 'section', 'compare', 'heuristics', 'section', 'robustness', 'showing', 'applied', 'optimization', 'problems', 'section', 'discuss', 'paradigm', 'functions', 'conclusions', 'section', 'ant', 'system', 'section', 'introduce', 'decided', 'known', 'traveling', 'salesman', 'problem', 'benchmark', 'order', 'comparison', 'heuristic', 'approaches', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'dorigo', 'ant', 'system', 'optimization', 'colony', 'cooperating', 'agents', 'model', 'definition', 'influenced', 'problem', 'structure', 'show', 'section', 'approach', 'used', 'solve', 'optimization', 'problems', 'given', 'set', 'towns', 'tsp', 'stated', 'problem', 'finding', 'minimal', 'length', 'tour', 'town', 'call', 'length', 'path', 'towns', 'case', 'euclidean', 'tsp', 'euclidean', 'distance', 'instance', 'tsp', 'given', 'graph', 'set', 'towns', 'set', 'edges', 'towns', 'connected', 'graph', 'euclidean', 'tsp', 'let', 'number', 'ants', 'town', 'let', 'total', 'number', 'ants', 'ant', 'simple', 'agent', 'following', 'characteristics', 'chooses', 'town', 'probability', 'function', 'town', 'distance', 'amount', 'trail', 'present', 'edge', 'force', 'ant', 'tours', 'transitions', 'visited', 'towns', 'tour', 'completed', 'controlled', 'tabu', 'list', 'tour', 'called', 'trail', 'edge', 'visited', 'let', 'intensity', 'trail', 'edge', 'ant', 'chooses', 'next', 'town', 'call', 'iteration', 'algorithm', 'moves', 'carried', 'ants', 'interval', 'iterations', 'algorithm', 'call', 'cycle', 'ant', 'completed', 'tour', 'point', 'trail', 'intensity', 'updated', 'according', 'following', 'formula', 'coefficient', 'represents', 'trail', 'quantity', 'unit', 'length', 'trail', 'pheromone', 'real', 'ants', 'laid', 'edge', 'kth', 'ant', 'given', 'kth', 'ant', 'uses', 'edge', 'tour', 'constant', 'tour', 'length', 'kth', 'ant', 'coefficient', 'set', 'value', 'avoid', 'trail', 'note', 'experiments', 'set', 'intensity', 'trail', 'small', 'positive', 'constant', 'order', 'constraint', 'ant', 'different', 'towns', 'associate', 'ant', 'data', 'structure', 'called', 'tabu', 'towns', 'visited', 'name', 'chosen', 'tabu', 'search', 'differences', 'approach', 'tabu', 'search', 'algorithms', 'mention', 'absence', 'function', 'difference', 'elements', 'tabu', 'list', 'case', 'tabu', 'search', 'nodes', 'algorithms', 'heuristics', 'case', 'tabu', 'search', 'ant', 'visit', 'iterations', 'tour', 'completed', 'tour', 'completed', 'tabu', 'list', 'used', 'compute', 'current', 'solution', 'distance', 'path', 'followed', 'ant', 'tabu', 'list', 'ant', 'free', 'choose', 'define', 'tabuk', 'growing', 'vector', 'contains', 'tabu', 'list', 'kth', 'ant', 'tabuk', 'set', 'obtained', 'elements', 'tabuk', 'tabuk', 'element', 'list', 'town', 'visited', 'kth', 'ant', 'current', 'tour', 'call', 'visibility', 'quantity', 'dij', 'quantity', 'modified', 'run', 'trail', 'changes', 'according', 'previous', 'formula', 'define', 'transition', 'probability', 'town', 'town', 'kth', 'ant', 'tabuk', 'parameters', 'control', 'relative', 'importance', 'trail', 'versus', 'visibility', 'transition', 'probability', 'visibility', 'towns', 'chosen', 'high', 'probability', 'greedy', 'heuristic', 'trail', 'intensity', 'edge', 'traffic', 'desirable', 'autocatalytic', 'process', 'algorithms', 'given', 'definitions', 'section', 'ant', 'cycle', 'algorithm', 'stated', 'follows', 'zero', 'initialization', 'phase', 'takes', 'place', 'ants', 'different', 'towns', 'initial', 'values', 'trail', 'intensity', 'set', 'edges', 'element', 'tabu', 'list', 'set', 'equal', 'starting', 'town', 'ant', 'moves', 'town', 'town', 'choosing', 'town', 'move', 'probability', 'function', 'parameters', 'formula', 'measures', 'trail', 'information', 'many', 'ants', 'past', 'chosen', 'edge', 'second', 'visibility', 'closer', 'town', 'desirable', 'setting', 'trail', 'level', 'longer', 'considered', 'stochastic', 'greedy', 'algorithm', 'multiple', 'starting', 'points', 'obtained', 'iterations', 'ants', 'completed', 'tour', 'tabu', 'lists', 'full', 'point', 'ant', 'value', 'computed', 'values', 'updated', 'according', 'formula', 'shortest', 'path', 'found', 'ants', 'tabu', 'lists', 'process', 'iterated', 'tour', 'counter', 'maximum', 'user', 'defined', 'number', 'cycles', 'ants', 'tour', 'call', 'last', 'case', 'stagnation', 'behavior', 'denotes', 'situation', 'algorithm', 'searching', 'alternative', 'solutions', 'investigate', 'situation', 'section', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'part', 'cybernetics', 'vol', 'february', 'ant', 'cycle', 'algorithm', 'initialize', 'set', 'set', 'edge', 'set', 'initial', 'value', 'trail', 'intensity', 'place', 'ants', 'nodes', 'counter', 'cycles', 'counter', 'set', 'tabu', 'list', 'index', 'place', 'starting', 'town', 'kth', 'ant', 'tabuk', 'tabu', 'list', 'full', 'step', 'repeated', 'times', 'set', 'choose', 'town', 'move', 'probability', 'given', 'kth', 'ant', 'town', 'tabuk', 'move', 'kth', 'ant', 'town', 'town', 'tabuk', 'move', 'kth', 'ant', 'tabuk', 'tabuk', 'compute', 'length', 'tour', 'described', 'kth', 'ant', 'update', 'shortest', 'tour', 'found', 'edge', 'tour', 'described', 'tabuk', 'edge', 'according', 'equation', 'set', 'set', 'edge', 'set', 'stagnation', 'behavior', 'tabu', 'lists', 'step', 'shortest', 'tour', 'complexity', 'ant', 'cycle', 'algorithm', 'algorithm', 'cycles', 'fact', 'step', 'step', 'step', 'step', 'found', 'linear', 'relation', 'number', 'towns', 'best', 'number', 'ants', 'section', 'complexity', 'algorithm', 'algorithms', 'called', 'ant', 'density', 'ant', 'quantity', 'algorithms', 'differ', 'trail', 'updated', 'models', 'ant', 'trail', 'step', 'end', 'tour', 'ant', 'density', 'model', 'quantity', 'trail', 'left', 'edge', 'ant', 'goes', 'ant', 'quantity', 'model', 'ant', 'going', 'quantity', 'trail', 'edge', 'goes', 'ant', 'density', 'model', 'kth', 'ant', 'goes', 'kth', 'ant', 'goes', 'ant', 'quantity', 'model', 'definitions', 'clear', 'increase', 'trail', 'edge', 'ant', 'goes', 'independent', 'ant', 'density', 'model', 'proportional', 'ant', 'quantity', 'model', 'shorter', 'edges', 'made', 'desirable', 'ants', 'ant', 'quantity', 'model', 'parameter', 'basic', 'properties', 'implemented', 'algorithms', 'ant', 'cycle', 'ant', 'density', 'ant', 'quantity', 'investigated', 'relative', 'developed', 'mathematical', 'analysis', 'models', 'yield', 'optimal', 'parameter', 'setting', 'situation', 'simulations', 'statistical', 'data', 'purpose', 'parameters', 'considered', 'affect', 'computation', 'probability', 'formula', 'relative', 'importance', 'trail', 'relative', 'importance', 'visibility', 'trail', 'constant', 'related', 'quantity', 'trail', 'laid', 'ants', 'trail', 'number', 'ants', 'set', 'equal', 'number', 'cities', 'section', 'tested', 'several', 'values', 'parameter', 'others', 'constant', 'ten', 'simulations', 'setting', 'order', 'achieve', 'statistical', 'information', 'average', 'evolution', 'value', 'parameters', 'experiment', 'values', 'changed', 'tested', 'different', 'sets', 'values', 'discussed', 'end', 'section', 'values', 'tested', 'preliminary', 'results', 'obtained', 'small', 'scale', 'problems', 'presented', 'tests', 'reported', 'section', 'stated', 'problem', 'cities', 'problem', 'described', 'tests', 'carried', 'cycles', 'averaged', 'ten', 'trials', 'genetic', 'algorithms', 'applied', 'solve', 'problem', 'find', 'tour', 'length', 'result', 'obtained', 'ant', 'cycle', 'found', 'tour', 'length', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'dorigo', 'ant', 'system', 'optimization', 'colony', 'ant', 'density', 'ant', 'quantity', 'ant', 'cycle', 'table', 'density', 'ant', 'trials', 'best', 'parameter', 'set', 'average', 'result', 'best', 'result', 'compare', 'models', 'determined', 'parameters', 'best', 'values', 'algorithm', 'algorithm', 'ten', 'times', 'best', 'parameters', 'set', 'results', 'shown', 'table', 'parameter', 'shown', 'influence', 'found', 'ant', 'density', 'ant', 'quantity', 'models', 'given', 'worse', 'results', 'obtained', 'ant', 'cycle', 'reason', 'found', 'kind', 'feedback', 'information', 'used', 'direct', 'search', 'process', 'ant', 'cycle', 'uses', 'global', 'information', 'ants', 'amount', 'trail', 'proportional', 'solution', 'produced', 'fact', 'ants', 'shorter', 'paths', 'higher', 'amount', 'trail', 'ants', 'tour', 'poor', 'side', 'ant', 'quantity', 'ant', 'density', 'local', 'information', 'search', 'directed', 'measure', 'final', 'result', 'achieved', 'worse', 'performance', 'results', 'details', 'found', 'optimal', 'value', 'ant', 'cycle', 'explained', 'fact', 'algorithm', 'greedy', 'heuristic', 'guide', 'search', 'stages', 'computation', 'starts', 'global', 'information', 'contained', 'values', 'trail', 'ant', 'cycle', 'needs', 'possibility', 'part', 'experience', 'gained', 'past', 'order', 'exploit', 'global', 'information', 'given', 'found', 'ant', 'cycle', 'superior', 'algorithms', 'decided', 'understanding', 'ant', 'cycle', 'figs', 'present', 'typical', 'run', 'ant', 'cycle', 'algorithm', 'applied', 'problem', 'particular', 'fig', 'shows', 'length', 'best', 'found', 'tour', 'cycle', 'fig', 'standard', 'deviation', 'tour', 'lengths', 'population', 'cycle', 'run', 'note', 'cycles', 'tours', 'rest', 'run', 'standard', 'deviation', 'population', 'tour', 'lengths', 'zero', 'algorithm', 'searches', 'solutions', 'differ', 'best', 'found', 'gives', 'possibility', 'finding', 'ones', 'search', 'solutions', 'carried', 'selected', 'regions', 'search', 'space', 'determined', 'trail', 'resulting', 'cycles', 'observed', 'fig', 'axis', 'shows', 'average', 'node', 'branching', 'problem', 'graph', 'graph', 'connected', 'arcs', 'trail', 'level', 'falls', 'small', 'value', 'makes', 'probability', 'chosen', 'ants', 'removed', 'node', 'branching', 'node', 'given', 'number', 'edges', 'node', 'trail', 'level', 'higher', 'note', 'beginning', 'run', 'ant', 'node', 'tabu', 'agents', 'best', 'length', 'cycles', 'fig', 'evolution', 'best', 'tour', 'length', 'typical', 'run', 'tour', 'standard', 'deviation', 'cycles', 'fig', 'typical', 'run', 'evolution', 'standard', 'deviation', 'population', 'tour', 'lengths', 'average', 'branching', 'cycles', 'fig', 'typical', 'run', 'evolution', 'average', 'node', 'branching', 'problem', 'graph', 'list', 'constraints', 'end', 'possible', 'choices', 'reduced', 'process', 'observed', 'graphs', 'fig', 'applied', 'simple', 'cities', 'problem', 'effect', 'ant', 'search', 'trail', 'distribution', 'figure', 'length', 'edges', 'proportional', 'distances', 'towns', 'edges', 'proportional', 'trail', 'level', 'fig', 'trail', 'distributed', 'edge', 'search', 'directed', 'search', 'process', 'fig', 'trail', 'edges', 'tours', 'edges', 'bad', 'tours', 'edges', 'worst', 'tours', 'resulted', 'problem', 'graph', 'reduction', 'search', 'space', 'tour', 'length', 'investigated', 'stagnation', 'situation', 'ants', 'tour', 'indicates', 'system', 'explore', 'tour', 'parameter', 'settings', 'observed', 'several', 'cycles', 'ants', 'followed', 'tour', 'stochastic', 'nature', 'algorithms', 'much', 'higher', 'trail', 'level', 'edges', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'part', 'cybernetics', 'vol', 'february', 'fig', 'evolution', 'trail', 'distribution', 'problem', 'trail', 'distribution', 'beginning', 'search', 'trail', 'distribution', 'cycles', 'average', 'node', 'branching', 'fig', 'ant', 'cycle', 'behavior', 'different', 'combinations', 'parameters', 'algorithm', 'finds', 'best', 'known', 'solution', 'entering', 'stagnation', 'behavior', 'algorithm', 'find', 'solutions', 'entering', 'stagnation', 'behavior', 'algorithm', 'find', 'solutions', 'stagnation', 'behavior', 'fig', 'typical', 'run', 'obtained', 'setting', 'average', 'node', 'branching', 'going', 'stagnation', 'behavior', 'comprising', 'tour', 'others', 'high', 'trail', 'level', 'made', 'probability', 'ant', 'chooses', 'edge', 'belonging', 'tour', 'low', 'example', 'problem', 'evolution', 'average', 'branching', 'presented', 'fig', 'fact', 'cycles', 'number', 'arcs', 'node', 'value', 'given', 'problem', 'means', 'ants', 'following', 'cycle', 'led', 'investigate', 'behavior', 'ant', 'cycle', 'algorithm', 'different', 'combination', 'parameters', 'experiment', 'set', 'results', 'summarized', 'fig', 'obtained', 'running', 'algorithm', 'ten', 'times', 'couple', 'parameters', 'results', 'averaged', 'result', 'following', 'different', 'classes', 'bad', 'solutions', 'stagnation', 'high', 'values', 'finding', 'solutions', 'situation', 'bad', 'solutions', 'stagnation', 'importance', 'given', 'trail', 'set', 'low', 'value', 'algorithm', 'stagnation', 'behavior', 'fig', 'best', 'tour', 'obtained', 'cycles', 'ant', 'cycle', 'algorithm', 'problem', 'real', 'length', 'integer', 'length', 'represented', 'symbol', 'fig', 'algorithm', 'find', 'solutions', 'situation', 'represented', 'symbol', 'solutions', 'solutions', 'found', 'values', 'area', 'symbol', 'used', 'case', 'found', 'different', 'parameter', 'combinations', 'resulted', 'performance', 'level', 'result', 'shortest', 'tour', 'known', 'problem', 'obtained', 'number', 'values', 'algorithm', 'similar', 'stochastic', 'algorithm', 'fig', 'present', 'best', 'found', 'determined', 'optimal', 'set', 'parameters', 'values', 'ant', 'cycle', 'algorithm', 'tour', 'length', 'presents', 'respect', 'best', 'tour', 'published', 'major', 'ant', 'cycle', 'algorithm', 'summarized', 'range', 'parameter', 'optimality', 'algorithm', 'finds', 'solutions', 'tested', 'problems', 'cycles', 'results', 'obtained', 'experiment', 'consistent', 'understanding', 'high', 'value', 'means', 'important', 'ants', 'tend', 'choose', 'competitive', 'results', 'special', 'purpose', 'edges', 'chosen', 'ants', 'past', 'hand', 'low', 'algorithms', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'dorigo', 'ant', 'system', 'optimization', 'colony', 'cooperating', 'agents', 'best', 'tour', 'length', 'cycles', 'fig', 'optimal', 'solution', 'grid', 'problem', 'fig', 'optimal', 'value', 'cycles', 'algorithm', 'finds', 'values', 'problems', 'presented', 'algorithm', 'finds', 'solutions', 'fig', 'comparison', 'heuristics', 'section', 'stagnation', 'behavior', 'ants', 'continue', 'search', 'tours', 'increasing', 'dimensions', 'sensitivity', 'parameter', 'values', 'problem', 'dimension', 'found', 'low', 'tested', 'ant', 'cycle', 'algorithm', 'problems', 'limited', 'number', 'runs', 'number', 'cycles', 'best', 'known', 'result', 'quick', 'convergence', 'satisfactory', 'solutions', 'problems', 'section', 'discuss', 'experiments', 'understanding', 'ant', 'cycle', 'algorithm', 'study', 'synergy', 'affects', 'algorithm', 'performance', 'section', 'compare', 'performance', 'ant', 'cycle', 'ants', 'unique', 'starting', 'point', 'performance', 'obtained', 'ant', 'starts', 'different', 'town', 'section', 'study', 'effects', 'elitist', 'strategy', 'increases', 'importance', 'ant', 'found', 'best', 'tour', 'section', 'change', 'performance', 'problem', 'dimension', 'increases', 'section', 'synergistic', 'effects', 'set', 'experiments', 'impact', 'number', 'ants', 'importance', 'communication', 'trail', 'efficiency', 'solution', 'process', 'case', 'test', 'problem', 'involved', 'finding', 'tour', 'grid', 'points', 'problem', 'priori', 'known', 'optimal', 'solution', 'edge', 'length', 'fig', 'result', 'synergistic', 'effect', 'many', 'ants', 'trail', 'communication', 'system', 'fig', 'synergy', 'communication', 'ants', 'improves', 'synergistic', 'effects', 'reach', 'maximum', 'results', 'shown', 'figs', 'fig', 'compare', 'situation', 'ants', 'communicate', 'situation', 'communicate', 'results', 'show', 'communication', 'algorithm', 'fig', 'report', 'experiment', 'grid', 'problem', 'solved', 'shows', 'total', 'number', 'ants', 'used', 'set', 'runs', 'shows', 'called', 'ant', 'cycles', 'number', 'cycles', 'required', 'reach', 'optimum', 'number', 'ants', 'used', 'order', 'evaluate', 'efficiency', 'ant', 'comparable', 'data', 'algorithm', 'able', 'identify', 'optimum', 'number', 'ants', 'tests', 'run', 'set', 'grid', 'problems', 'hypothesis', 'optimal', 'number', 'ants', 'number', 'cities', 'property', 'used', 'assessment', 'computational', 'complexity', 'section', 'second', 'set', 'tests', 'carried', 'cities', 'distributed', 'cities', 'random', 'graph', 'found', 'optimal', 'performance', 'reached', 'ants', 'number', 'comparable', 'dimension', 'problem', 'solved', 'initialization', 'experiment', 'run', 'order', 'study', 'initial', 'ant', 'distribution', 'influences', 'performance', 'tested', 'difference', 'case', 'ants', 'case', 'used', 'ant', 'cycle', 'run', 'ants', 'search', 'effective', 'communication', 'ants', 'communication', 'case', 'ants', 'distributed', 'number', 'ants', 'town', 'multiple', 'ants', 'optimality', 'point', 'given', 'uniform', 'distribution', 'starting', 'experiments', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'part', 'vol', 'february', 'best', 'average', 'number', 'solution', 'cycles', 'find', 'find', 'optimum', 'optimum', 'number', 'ants', 'fig', 'number', 'ant', 'cycles', 'required', 'reach', 'optimum', 'function', 'total', 'number', 'ants', 'grid', 'problem', 'results', 'averaged', 'runs', 'applied', 'cities', 'random', 'graph', 'grid', 'problem', 'cases', 'ants', 'resulted', 'performance', 'tested', 'initial', 'random', 'distribution', 'ants', 'cities', 'performed', 'uniform', 'results', 'show', 'significant', 'difference', 'choices', 'random', 'distribution', 'obtained', 'results', 'elitist', 'strategy', 'term', 'elitist', 'strategy', 'resembles', 'elitist', 'strategy', 'used', 'genetic', 'algorithms', 'modified', 'algorithm', 'cycle', 'trail', 'laid', 'edges', 'belonging', 'best', 'tour', 'standard', 'version', 'added', 'trail', 'best', 'tour', 'quantity', 'number', 'elitist', 'length', 'best', 'found', 'tour', 'idea', 'trail', 'best', 'tour', 'direct', 'search', 'ants', 'probability', 'solution', 'composed', 'edges', 'best', 'tour', 'test', 'carried', 'problem', 'run', 'cycles', 'results', 'indicated', 'optimal', 'range', 'number', 'elitist', 'ants', 'increasing', 'number', 'results', 'tours', 'discovered', 'best', 'tour', 'discovered', 'elitist', 'ants', 'force', 'exploration', 'suboptimal', 'tours', 'phases', 'search', 'decrease', 'performance', 'results', 'fig', 'shows', 'outcome', 'test', 'problem', 'behavior', 'evident', 'increasing', 'problem', 'dimensions', 'algorithm', 'complexity', 'presented', 'section', 'presented', 'previous', 'sections', 'case', 'effect', 'ant', 'value', 'trail', 'edges', 'belonging', 'tour', 'case', 'equivalent', 'individual', 'local', 'optima', 'number', 'elitist', 'ants', 'fig', 'number', 'elitist', 'ants', 'used', 'results', 'averaged', 'runs', 'number', 'cycles', 'required', 'reach', 'local', 'optimum', 'related', 'actual', 'required', 'reach', 'optimum', 'experiment', 'presented', 'section', 'devoted', 'efficiency', 'algorithm', 'increasing', 'problem', 'dimensions', 'results', 'reported', 'table', 'case', 'similar', 'problems', 'increasing', 'dimensions', 'edge', 'length', 'set', 'fig', 'interesting', 'note', 'problems', 'cities', 'algorithm', 'found', 'optimal', 'solution', 'comparison', 'heuristics', 'section', 'compare', 'efficacy', 'algorithm', 'heuristics', 'tailored', 'general', 'purpose', 'comparison', 'tsp', 'tailored', 'heuristics', 'section', 'compare', 'ant', 'cycle', 'heuristics', 'contained', 'travel', 'represents', 'distances', 'cities', 'integer', 'matrix', 'implemented', 'representation', 'results', 'comparisons', 'shown', 'table', 'column', 'length', 'best', 'tour', 'identified', 'heuristic', 'second', 'column', 'improvement', 'solution', 'obtained', 'heuristic', 'heuristic', 'exploration', 'cities', 'comparisons', 'carried', 'lin', 'improvement', 'case', 'distances', 'towns', 'integer', 'numbers', 'computed', 'according', 'standard', 'code', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ant', 'system', 'optimization', 'colony', 'cooperating', 'agents', 'table', 'ant', 'cycle', 'ten', 'runs', 'best', 'average', 'std', 'random', 'table', 'performance', 'compared', 'problem', 'results', 'column', 'solutions', 'able', 'reduce', 'length', 'tour', 'depending', 'starting', 'solution', 'provided', 'basic', 'algorithms', 'note', 'ant', 'cycle', 'outperformed', 'efficacy', 'effectiveness', 'finding', 'solutions', 'compared', 'lin', 'hand', 'algorithm', 'requires', 'much', 'longer', 'computational', 'tested', 'special', 'purpose', 'heuristic', 'general', 'tests', 'point', 'given', 'parameter', 'setting', 'instance', 'algorithm', 'found', 'best', 'known', 'solution', 'problem', 'converged', 'satisfactory', 'solutions', 'identified', 'best', 'known', 'solution', 'length', 'cycles', 'took', 'cycles', 'reach', 'values', 'algorithm', 'stagnation', 'behavior', 'fact', 'average', 'branching', 'greater', 'average', 'length', 'tours', 'equal', 'best', 'tour', 'found', 'indicates', 'ants', 'followed', 'different', 'tours', 'comparison', 'general', 'purpose', 'heuristics', 'compare', 'ant', 'cycle', 'general', 'purpose', 'heuristics', 'comparison', 'fair', 'fact', 'general', 'purpose', 'heuristic', 'algorithm', 'tsp', 'run', 'comparisons', 'implemented', 'simulated', 'annealing', 'tabu', 'search', 'let', 'run', 'times', 'data', 'used', 'annealing', 'function', 'ith', 'implemented', 'tabu', 'list', 'length', 'varying', 'interval', 'allowed', 'run', 'processor', 'results', 'presented', 'table', 'results', 'show', 'problem', 'effective', 'running', 'constraints', 'vii', 'approach', 'said', 'section', 'robust', 'applied', 'asymmetric', 'tsp', 'atsp', 'particular', 'kind', 'tsp', 'section', 'vii', 'robustness', 'possibility', 'algorithm', 'adapted', 'solve', 'combinatorial', 'optimization', 'problems', 'quadratic', 'assignment', 'problem', 'qap', 'job', 'shop', 'scheduling', 'problem', 'jsp', 'section', 'vii', 'atsp', 'asymmetric', 'traveling', 'salesman', 'problem', 'tsp', 'distance', 'nodes', 'symmetric', 'general', 'atsp', 'difficult', 'tsp', 'fact', 'symmetric', 'tsp', 'solved', 'graphs', 'several', 'nodes', 'atsp', 'instances', 'atsp', 'instances', 'distance', 'matrix', 'symmetric', 'solved', 'optimum', 'graphs', 'nodes', 'application', 'atsp', 'straightforward', 'modifications', 'basic', 'algorithm', 'necessary', 'computational', 'complexity', 'cycle', 'algorithm', 'remains', 'tsp', 'application', 'differences', 'distance', 'trail', 'matrices', 'longer', 'symmetric', 'test', 'problem', 'problem', 'difficult', 'problem', 'instance', 'distance', 'distribution', 'hard', 'solve', 'tailored', 'heuristics', 'bound', 'procedures', 'times', 'cycles', 'average', 'length', 'best', 'found', 'tour', 'longer', 'optimal', 'average', 'number', 'cycles', 'find', 'result', 'robustness', 'qap', 'jsp', 'let', 'consider', 'robustness', 'approach', 'many', 'combinatorial', 'problems', 'solved', 'apply', 'autocatalytic', 'algorithm', 'combinatorial', 'problem', 'requires', 'defining', 'appropriate', 'graph', 'representation', 'search', 'many', 'autocatalytic', 'positive', 'feedback', 'process', 'heuristic', 'allows', 'definition', 'solutions', 'call', 'greedy', 'force', 'constraint', 'method', 'tabu', 'list', 'done', 'known', 'combinatorial', 'optimization', 'problems', 'quadratic', 'assignment', 'qap', 'job', 'shop', 'scheduling', 'jsp', 'obtaining', 'adapted', 'version', 'handle', 'relative', 'problem', 'difficult', 'tasks', 'applying', 'find', 'appropriate', 'graph', 'representation', 'problem', 'solved', 'greedy', 'force', 'heuristic', 'qap', 'order', 'problem', 'arises', 'trying', 'assign', 'simple', 'agents', 'problem', 'quadratic', 'assignment', 'problem', 'name', 'basic', 'means', 'basic', 'heuristic', 'improvement', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'part', 'cybernetics', 'vol', 'february', 'problem', 'defined', 'symmetric', 'matrices', 'distance', 'location', 'location', 'flow', 'information', 'quantity', 'permutation', 'assignment', 'problem', 'identify', 'permutation', 'row', 'column', 'indexes', 'matrix', 'total', 'cost', 'apply', 'qap', 'used', 'algorithm', 'case', 'tsp', 'studied', 'approximation', 'qap', 'objective', 'function', 'allows', 'problem', 'representation', 'basis', 'single', 'matrix', 'used', 'heuristic', 'qap', 'objective', 'function', 'expressed', 'combination', 'potential', 'vectors', 'distance', 'flow', 'matrices', 'potential', 'vectors', 'row', 'matrices', 'consider', 'following', 'example', 'potential', 'vectors', 'third', 'matrix', 'obtained', 'element', 'computed', 'elements', 'potential', 'vectors', 'ants', 'choose', 'node', 'move', 'values', 'visibility', 'data', 'element', 'heuristic', 'value', 'choice', 'location', 'show', 'heuristic', 'works', 'solution', 'assume', 'simplicity', 'ants', 'deterministic', 'algorithm', 'consider', 'effect', 'trail', 'set', 'solution', 'consider', 'matrix', 'starting', 'corresponding', 'activity', 'flow', 'potential', 'assign', 'activity', 'location', 'least', 'distance', 'potential', 'according', 'min', 'max', 'rule', 'example', 'activity', 'assigned', 'location', 'element', 'smallest', 'column', 'pair', 'activity', 'location', 'activity', 'location', 'location', 'assigned', 'activity', 'obtains', 'table', 'runs', 'results', 'heuristic', 'best', 'known', 'ant', 'system', 'non', 'deterministic', 'hill', 'climbing', 'tabu', 'search', 'genetic', 'algorithm', 'evolution', 'strategy', 'sampling', 'clustering', 'compared', 'version', 'added', 'non', 'deterministic', 'hill', 'climbing', 'procedure', 'many', 'heuristics', 'details', 'experiments', 'run', 'processor', 'test', 'problems', 'used', 'known', 'problems', 'seen', 'table', 'performance', 'ant', 'system', 'found', 'result', 'best', 'known', 'local', 'optimization', 'found', 'problem', 'best', 'known', 'solution', 'application', 'described', 'details', 'jsp', 'described', 'following', 'set', 'machines', 'set', 'jobs', 'given', 'jth', 'job', 'consists', 'sequence', 'chain', 'operations', 'set', 'operation', 'belongs', 'job', 'processed', 'machine', 'consecutive', 'total', 'number', 'operations', 'problem', 'assign', 'operations', 'intervals', 'jobs', 'processed', 'machine', 'maximum', 'times', 'operations', 'minimized', 'apply', 'jsp', 'following', 'representation', 'jsp', 'machines', 'jobs', 'operation', 'set', 'represented', 'directed', 'weighted', 'graph', 'set', 'arcs', 'operation', 'job', 'nodes', 'nodes', 'belonging', 'job', 'nodes', 'belonging', 'job', 'connected', 'sequence', 'node', 'connected', 'immediate', 'fig', 'note', 'graph', 'graph', 'representing', 'machines', 'represent', 'jsp', 'node', 'necessary', 'order', 'specify', 'job', 'case', 'several', 'jobs', 'operation', 'machine', 'nodes', 'arcs', 'nodes', 'connected', 'connected', 'operation', 'job', 'weighted', 'pair', 'numbers', 'trail', 'level', 'second', 'visibility', 'computed', 'according', 'measure', 'derived', 'greedy', 'problem', 'specific', 'heuristic', 'processing', 'shortest', 'order', 'nodes', 'visited', 'ant', 'solution', 'instance', 'consider', 'job', 'shop', 'scheduling', 'problem', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'dorigo', 'ant', 'system', 'optimization', 'colony', 'cooperating', 'agents', 'fig', 'represent', 'pair', 'directed', 'arcs', 'graph', 'jobs', 'machines', 'jsp', 'connections', 'fig', 'problem', 'steady', 'state', 'transition', 'matrix', 'generated', 'town', 'problem', 'jobs', 'machines', 'represented', 'system', 'graph', 'presented', 'fig', 'suppose', 'machine', 'processes', 'operations', 'second', 'others', 'ants', 'identify', 'step', 'feasible', 'permutation', 'remaining', 'nodes', 'problem', 'transition', 'probabilities', 'modified', 'respect', 'computed', 'according', 'formula', 'order', 'feasible', 'permutation', 'fact', 'necessary', 'define', 'set', 'allowed', 'nodes', 'step', 'tabu', 'list', 'problem', 'dependent', 'ant', 'let', 'set', 'nodes', 'visited', 'set', 'nodes', 'allowed', 'next', 'step', 'transition', 'probabilities', 'computed', 'basis', 'formula', 'set', 'allowed', 'nodes', 'equal', 'node', 'chosen', 'tabu', 'list', 'chosen', 'node', 'last', 'job', 'immediate', 'job', 'chain', 'added', 'procedure', 'ensures', 'possibility', 'produce', 'feasible', 'solution', 'optimal', 'process', 'iterated', 'end', 'order', 'nodes', 'permutation', 'given', 'tabu', 'list', 'solution', 'ant', 'computed', 'usual', 'laid', 'specified', 'ant', 'cycle', 'algorithm', 'example', 'suppose', 'ant', 'yielded', 'solution', 'direct', 'order', 'operations', 'approach', 'implemented', 'applied', 'jsp', 'instances', 'dimension', 'jobs', 'machines', 'problems', 'obtained', 'solution', 'optimum', 'considered', 'promising', 'result', 'viii', 'characteristics', 'major', 'issue', 'defining', 'distributed', 'system', 'definition', 'communication', 'set', 'ants', 'communicate', 'modifications', 'global', 'data', 'structure', 'tour', 'trail', 'left', 'ant', 'tour', 'change', 'probability', 'decision', 'taken', 'future', 'heuristic', 'ants', 'stages', 'computational', 'process', 'experience', 'problem', 'structure', 'heuristic', 'importance', 'coefficient', 'related', 'experience', 'gained', 'ants', 'problem', 'representation', 'increases', 'explain', 'behavior', 'tsp', 'problem', 'following', 'consider', 'transition', 'matrix', 'ant', 'element', 'transition', 'probability', 'town', 'town', 'defined', 'proportional', 'closer', 'towns', 'chosen', 'higher', 'probability', 'process', 'changes', 'elements', 'according', 'process', 'seen', 'space', 'path', 'cost', 'reduced', 'towns', 'connected', 'edges', 'high', 'amount', 'traffic', 'path', 'cost', 'towns', 'connected', 'edges', 'low', 'traffic', 'levels', 'simulations', 'observed', 'matrix', 'least', 'range', 'optimality', 'parameters', 'converges', 'state', 'variations', 'transition', 'matrix', 'small', 'state', 'reached', 'behavior', 'ants', 'dependent', 'kind', 'transition', 'matrix', 'obtained', 'observed', 'situations', 'section', 'particular', 'parameter', 'settings', 'transition', 'probabilities', 'higher', 'zero', 'row', 'ants', 'choose', 'edge', 'step', 'tour', 'common', 'situations', 'rows', 'transition', 'probabilities', 'significant', 'value', 'cases', 'search', 'number', 'significant', 'transitions', 'reduced', 'respect', 'initial', 'situation', 'consider', 'example', 'fig', 'obtained', 'steady', 'state', 'transition', 'matrix', 'generated', 'town', 'problem', 'area', 'proportional', 'corresponding', 'value', 'transition', 'probability', 'ant', 'town', 'high', 'probability', 'town', 'town', 'low', 'probability', 'choosing', 'edge', 'similar', 'analysis', 'ants', 'town', 'towns', 'example', 'stochastic', 'process', 'rules', 'evolution', 'matrix', 'markov', 'process', 'memory', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'ieee', 'transactions', 'systems', 'man', 'cybernetics', 'part', 'cybernetics', 'vol', 'february', 'algorithm', 'works', 'kind', 'probabilistic', 'effects', 'ant', 'move', 'local', 'greedy', 'rule', 'greedy', 'rule', 'guarantees', 'optimal', 'moves', 'lead', 'bad', 'final', 'results', 'reason', 'rule', 'greedy', 'local', 'improvements', 'lead', 'bad', 'final', 'steps', 'ant', 'constrained', 'tour', 'choices', 'final', 'steps', 'constrained', 'steps', 'tour', 'followed', 'ant', 'greedy', 'composed', 'initial', 'parts', 'final', 'parts', 'consider', 'effect', 'simultaneous', 'presence', 'many', 'ants', 'trail', 'distribution', 'parts', 'paths', 'followed', 'many', 'ants', 'amount', 'trail', 'contrary', 'bad', 'parts', 'paths', 'chosen', 'ants', 'constraint', 'tabu', 'list', 'edges', 'trail', 'ants', 'conclusion', 'introduces', 'search', 'methodology', 'distributed', 'autocatalytic', 'process', 'application', 'solution', 'classical', 'optimization', 'problem', 'general', 'idea', 'underlying', 'ant', 'system', 'paradigm', 'population', 'agents', 'autocatalytic', 'process', 'directed', 'greedy', 'force', 'agent', 'autocatalytic', 'process', 'greedy', 'force', 'tend', 'agent', 'converge', 'suboptimal', 'tour', 'exponential', 'speed', 'agents', 'appears', 'greedy', 'force', 'right', 'autocatalytic', 'process', 'facilitate', 'quick', 'convergence', 'optimal', 'solutions', 'stuck', 'local', 'optima', 'behavior', 'due', 'fact', 'information', 'gained', 'agents', 'process', 'used', 'modify', 'problem', 'representation', 'reduce', 'region', 'space', 'considered', 'search', 'process', 'tour', 'bad', 'tours', 'become', 'agents', 'search', 'neighborhood', 'solutions', 'main', 'following', 'positive', 'feedback', 'search', 'optimization', 'idea', 'given', 'point', 'agent', 'ant', 'choose', 'different', 'chosen', 'results', 'future', 'choice', 'appear', 'desirable', 'show', 'synergy', 'useful', 'distributed', 'systems', 'effectiveness', 'search', 'carried', 'given', 'number', 'cooperative', 'ants', 'greater', 'search', 'carried', 'number', 'ants', 'acting', 'others', 'iii', 'show', 'apply', 'different', 'combinatorial', 'optimization', 'problems', 'introducing', 'nature', 'used', 'reproduction', 'selection', 'mechanism', 'evolutionary', 'algorithms', 'main', 'difference', 'evolutionary', 'algorithms', 'applied', 'complete', 'solutions', 'used', 'solutions', 'application', 'tsp', 'show', 'apply', 'atsp', 'qap', 'jsp', 'believe', 'approach', 'promising', 'generality', 'applied', 'many', 'different', 'section', 'effectiveness', 'finding', 'solutions', 'difficult', 'problems', 'related', 'classified', 'following', 'major', 'areas', 'studies', 'social', 'animal', 'behavior', 'research', 'natural', 'heuristic', 'algorithms', 'stochastic', 'optimization', 'pointed', 'research', 'behavior', 'social', 'considered', 'source', 'inspiration', 'useful', 'metaphor', 'explain', 'ideas', 'believe', 'interested', 'parallel', 'algorithms', 'observation', 'natural', 'systems', 'source', 'inspiration', 'neural', 'networks', 'genetic', 'algorithms', 'evolution', 'strategies', 'immune', 'networks', 'simulated', 'annealing', 'examples', 'models', 'natural', 'main', 'characteristics', 'least', 'members', 'class', 'algorithms', 'natural', 'metaphor', 'inherent', 'stochastic', 'nature', 'positive', 'feedback', 'algorithm', 'considered', 'member', 'class', 'natural', 'optimization', 'general', 'research', 'area', 'stochastic', 'optimization', 'optimality', 'computational', 'efficiency', 'authors', 'many', 'useful', 'version', 'schwefel', 'many', 'useful', 'versions', 'references', 'simulated', 'annealing', 'machines', 'york', 'wiley', 'fast', 'algorithms', 'traveling', 'salesman', 'problems', 'computing', 'vol', 'immune', 'mechanism', 'selective', 'evolutionary', 'strategy', 'proc', 'fourth', 'int', 'conf', 'genetic', 'algorithms', 'san', 'mateo', 'morgan', 'kaufmann', 'travel', 'university', 'quadratic', 'assignment', 'problems', 'oper', 'res', 'vol', 'dorigo', 'maniezzo', 'distributed', 'optimization', 'ant', 'colonies', 'proc', 'conf', 'life', 'eds', 'dorigo', 'maniezzo', 'investigation', 'properties', 'ant', 'algorithm', 'proc', 'parallel', 'problem', 'solving', 'nature', 'conference', 'manner', 'eds', 'elsevier', 'colorni', 'dorigo', 'maniezzo', 'ant', 'system', 'job', 'shop', 'scheduling', 'oper', 'res', 'sci', 'vol', 'colorni', 'dorigo', 'maniezzo', 'heuristics', 'nature', 'hard', 'combinatorial', 'problems', 'tech', 'rep', 'elettronica', 'informazione', 'politecnico', 'milano', 'italy', 'elsevier', 'authorized_licensed', 'limited_montfort', 'university_downloaded', 'august_utc', 'ieee', 'xplore_restrictions', 'apply', 'dorigo', 'ant', 'system', 'optimization', 'colony', 'probabilistic', 'behavior', 'ants', 'strategy', 'errors', 'vol', 'collective', 'patterns', 'decision', 'making', 'evolution', 'vol', 'dorigo', 'optimization', 'learning', 'natural', 'algorithms', 'thesis', 'elettronica', 'informazione', 'politecnico', 'milano', 'italy', 'dorigo', 'maniezzo', 'colorni', 'positive', 'feedback', 'search', 'strategy', 'tech', 'rep', 'politecnico', 'milano', 'distribution', 'management', 'mathematical', 'modeling', 'practical', 'analysis', 'oper', 'res', 'vol', 'layout', 'quadratic', 'assignment', 'problem', 'oper', 'res', 'vol', 'procedure', 'asymmetric', 'salesman', 'problem', 'vol', 'tabu', 'search', 'part', 'computing', 'vol', 'tabu', 'search', 'part', 'computing', 'vol', 'goldberg', 'genetic', 'algorithms', 'search', 'optimization', 'machine', 'learning', 'addison', 'wesley', 'analysis', 'heuristics', 'salesman', 'problem', 'eds', 'york', 'wiley', 'trail', 'trail', 'following', 'solve', 'foraging', 'problems', 'ant', 'colonies', 'mechanisms', 'food', 'selection', 'series', 'berlin', 'springer', 'verlag', 'vol', 'optimization', 'approximation', 'deterministic', 'scheduling', 'survey', 'math', 'vol', 'holland', 'adaptation', 'natural', 'art', 'systems', 'ann', 'arbor', 'university', 'michigan', 'press', 'optimization', 'simulated', 'annealing', 'sci', 'vol', 'computer', 'layout', 'design', 'study', 'vol', 'eds', 'salesman', 'problem', 'york', 'wiley', 'lin', 'effective', 'heuristic', 'algorithm', 'tsp', 'oper', 'res', 'vol', 'maniezzo', 'colorni', 'dorigo', 'ant', 'system', 'applied', 'quadratic', 'assignment', 'problem', 'tech', 'rep', 'experimental', 'comparison', 'techniques', 'assignment', 'oper', 'res', 'rechenberg', 'evolutionsstrategie', 'stuttgart', 'germany', 'parallel', 'distributed', 'processing', 'cambridge', 'press', 'schwefel', 'evolutionsstrategie', 'thesis', 'berlin', 'available', 'numerical', 'optimization', 'computer', 'models', 'york', 'wiley', 'scheduling', 'problems', 'salesman', 'genetic', 'edge', 'recombination', 'operator', 'proc', 'third', 'int', 'con', 'genetic', 'algorithms', 'san', 'mateo', 'morgan', 'kaufmann', 'vol', 'agents', 'dorigo', 'born', 'italy', 'received', 'master', 'technology', 'industrial', 'engineering', 'information', 'systems', 'electronic', 'engineering', 'politecnico', 'milano', 'italy', 'research', 'fellow', 'international', 'computer', 'science', 'institute', 'berkeley', 'became', 'fellow', 'laboratory', 'free', 'university', 'human', 'continue', 'research', 'laboratory', 'works', 'areas', 'research', 'include', 'evolutionary', 'computation', 'learning', 'application', 'robotics', 'combinatorial', 'optimization', 'dorigo', 'associate', 'editor', 'ieee', 'man', 'editor', 'special', 'issue', 'learning', 'member', 'evolutionary', 'computation', 'journal', 'adaptive', 'behavior', 'journal', 'member', 'politecnico', 'milano', 'artificial', 'intelligence', 'robotics', 'artificial', 'intelligence', 'took', 'part', 'several', 'cec', 'projects', 'national', 'research', 'projects', 'maniezzo', 'born', 'italy', 'received', 'master', 'technology', 'electronic', 'engineering', 'degree', 'automatic', 'control', 'computer', 'science', 'engineering', 'politecnico', 'milano', 'italy', 'university', 'member', 'politecnico', 'milano', 'artificial', 'intelligence', 'robotics', 'took', 'part', 'several', 'cec', 'national', 'research', 'projects', 'current', 'research', 'interests', 'fields', 'machine', 'learning', 'evolutionary', 'techniques', 'modeling', 'combinatorial', 'optimization', 'evolutionary', 'heuristic', 'algorithms', 'column', 'generation', 'techniques', 'maniezzo', 'member', 'artificial', 'intelligence', 'operations', 'research', 'colorni', 'born', 'italy', 'received', 'master', 'technology', 'electronic', 'engineering', 'politecnico', 'milano', 'italy', 'professor', 'operations', 'research', 'politecnico', 'research', 'center', 'decision', 'support', 'systems', 'environment', 'master', 'politecnico', 'works', 'fields', 'combinatorial', 'optimization', 'particular', 'heuristics', 'nature', 'methodologies', 'process', 'methods', 'applications', 'impact', 'assessment', 'colorni', 'associate', 'editor', 'journal', 'operations', 'research']"
